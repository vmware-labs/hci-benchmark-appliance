# ******* WARNING - AUTO GENERATED CODE - DO NOT EDIT *******
from .VmomiSupport import CreateDataType, CreateManagedType
from .VmomiSupport import CreateEnumType
from .VmomiSupport import AddVersion, AddVersionParent
from .VmomiSupport import AddBreakingChangesInfo
from .VmomiSupport import F_LINK, F_LINKABLE
from .VmomiSupport import F_OPTIONAL, F_SECRET
from .VmomiSupport import newestVersions, ltsVersions
from .VmomiSupport import dottedVersions, oldestVersions

AddVersion("vmodl.query.version.version4", "", "", 0, "vim25")
AddVersion("vmodl.query.version.version3", "", "", 0, "vim25")
AddVersion("vmodl.query.version.version2", "", "", 0, "vim25")
AddVersion("vmodl.query.version.version1", "", "", 0, "vim25")
AddVersion("vim.version.version8", "vim25", "5.1", 0, "vim25")
AddVersion("vim.version.version9", "vim25", "5.5", 0, "vim25")
AddVersion("integrity.version.version1", "integrity", "1.0", 0, "integrity")
AddVersion("vim.version.version6", "vim25", "4.1", 0, "vim25")
AddVersion("vim.version.version7", "vim25", "5.0", 0, "vim25")
AddVersion("integrity.version.version8", "integrity", "8.0", 0, "integrity")
AddVersion("vim.version.version1", "vim2", "2.0", 0, "vim25")
AddVersion("vim.version.version4", "vim25", "2.5u2server", 0, "vim25")
AddVersion("vim.version.version5", "vim25", "4.0", 0, "vim25")
AddVersion("vim.version.version2", "vim25", "2.5", 0, "vim25")
AddVersion("vim.version.version3", "vim25", "2.5u2", 0, "vim25")
AddVersion("vmodl.version.version0", "", "", 0, "vim25")
AddVersion("vmodl.version.version1", "", "", 0, "vim25")
AddVersion("vmodl.version.version2", "", "", 0, "vim25")
AddVersion("vmodl.reflect.version.version1", "reflect", "1.0", 0, "reflect")
AddVersionParent("vmodl.query.version.version4", "vmodl.query.version.version4")
AddVersionParent("vmodl.query.version.version4", "vmodl.query.version.version3")
AddVersionParent("vmodl.query.version.version4", "vmodl.query.version.version2")
AddVersionParent("vmodl.query.version.version4", "vmodl.query.version.version1")
AddVersionParent("vmodl.query.version.version4", "vmodl.version.version0")
AddVersionParent("vmodl.query.version.version4", "vmodl.version.version1")
AddVersionParent("vmodl.query.version.version4", "vmodl.version.version2")
AddVersionParent("vmodl.query.version.version3", "vmodl.query.version.version3")
AddVersionParent("vmodl.query.version.version3", "vmodl.query.version.version2")
AddVersionParent("vmodl.query.version.version3", "vmodl.query.version.version1")
AddVersionParent("vmodl.query.version.version3", "vmodl.version.version0")
AddVersionParent("vmodl.query.version.version3", "vmodl.version.version1")
AddVersionParent("vmodl.query.version.version2", "vmodl.query.version.version2")
AddVersionParent("vmodl.query.version.version2", "vmodl.query.version.version1")
AddVersionParent("vmodl.query.version.version2", "vmodl.version.version0")
AddVersionParent("vmodl.query.version.version2", "vmodl.version.version1")
AddVersionParent("vmodl.query.version.version1", "vmodl.query.version.version1")
AddVersionParent("vmodl.query.version.version1", "vmodl.version.version0")
AddVersionParent("vim.version.version8", "vmodl.query.version.version4")
AddVersionParent("vim.version.version8", "vmodl.query.version.version3")
AddVersionParent("vim.version.version8", "vmodl.query.version.version2")
AddVersionParent("vim.version.version8", "vmodl.query.version.version1")
AddVersionParent("vim.version.version8", "vim.version.version8")
AddVersionParent("vim.version.version8", "vim.version.version6")
AddVersionParent("vim.version.version8", "vim.version.version7")
AddVersionParent("vim.version.version8", "vim.version.version1")
AddVersionParent("vim.version.version8", "vim.version.version4")
AddVersionParent("vim.version.version8", "vim.version.version5")
AddVersionParent("vim.version.version8", "vim.version.version2")
AddVersionParent("vim.version.version8", "vim.version.version3")
AddVersionParent("vim.version.version8", "vmodl.version.version0")
AddVersionParent("vim.version.version8", "vmodl.version.version1")
AddVersionParent("vim.version.version8", "vmodl.version.version2")
AddVersionParent("vim.version.version8", "vmodl.reflect.version.version1")
AddVersionParent("vim.version.version9", "vmodl.query.version.version4")
AddVersionParent("vim.version.version9", "vmodl.query.version.version3")
AddVersionParent("vim.version.version9", "vmodl.query.version.version2")
AddVersionParent("vim.version.version9", "vmodl.query.version.version1")
AddVersionParent("vim.version.version9", "vim.version.version8")
AddVersionParent("vim.version.version9", "vim.version.version9")
AddVersionParent("vim.version.version9", "vim.version.version6")
AddVersionParent("vim.version.version9", "vim.version.version7")
AddVersionParent("vim.version.version9", "vim.version.version1")
AddVersionParent("vim.version.version9", "vim.version.version4")
AddVersionParent("vim.version.version9", "vim.version.version5")
AddVersionParent("vim.version.version9", "vim.version.version2")
AddVersionParent("vim.version.version9", "vim.version.version3")
AddVersionParent("vim.version.version9", "vmodl.version.version0")
AddVersionParent("vim.version.version9", "vmodl.version.version1")
AddVersionParent("vim.version.version9", "vmodl.version.version2")
AddVersionParent("vim.version.version9", "vmodl.reflect.version.version1")
AddVersionParent("integrity.version.version1", "vmodl.query.version.version4")
AddVersionParent("integrity.version.version1", "vmodl.query.version.version3")
AddVersionParent("integrity.version.version1", "vmodl.query.version.version2")
AddVersionParent("integrity.version.version1", "vmodl.query.version.version1")
AddVersionParent("integrity.version.version1", "vim.version.version8")
AddVersionParent("integrity.version.version1", "vim.version.version9")
AddVersionParent("integrity.version.version1", "integrity.version.version1")
AddVersionParent("integrity.version.version1", "vim.version.version6")
AddVersionParent("integrity.version.version1", "vim.version.version7")
AddVersionParent("integrity.version.version1", "vim.version.version1")
AddVersionParent("integrity.version.version1", "vim.version.version4")
AddVersionParent("integrity.version.version1", "vim.version.version5")
AddVersionParent("integrity.version.version1", "vim.version.version2")
AddVersionParent("integrity.version.version1", "vim.version.version3")
AddVersionParent("integrity.version.version1", "vmodl.version.version0")
AddVersionParent("integrity.version.version1", "vmodl.version.version1")
AddVersionParent("integrity.version.version1", "vmodl.version.version2")
AddVersionParent("integrity.version.version1", "vmodl.reflect.version.version1")
AddVersionParent("vim.version.version6", "vmodl.query.version.version3")
AddVersionParent("vim.version.version6", "vmodl.query.version.version2")
AddVersionParent("vim.version.version6", "vmodl.query.version.version1")
AddVersionParent("vim.version.version6", "vim.version.version6")
AddVersionParent("vim.version.version6", "vim.version.version1")
AddVersionParent("vim.version.version6", "vim.version.version4")
AddVersionParent("vim.version.version6", "vim.version.version5")
AddVersionParent("vim.version.version6", "vim.version.version2")
AddVersionParent("vim.version.version6", "vim.version.version3")
AddVersionParent("vim.version.version6", "vmodl.version.version0")
AddVersionParent("vim.version.version6", "vmodl.version.version1")
AddVersionParent("vim.version.version7", "vmodl.query.version.version4")
AddVersionParent("vim.version.version7", "vmodl.query.version.version3")
AddVersionParent("vim.version.version7", "vmodl.query.version.version2")
AddVersionParent("vim.version.version7", "vmodl.query.version.version1")
AddVersionParent("vim.version.version7", "vim.version.version6")
AddVersionParent("vim.version.version7", "vim.version.version7")
AddVersionParent("vim.version.version7", "vim.version.version1")
AddVersionParent("vim.version.version7", "vim.version.version4")
AddVersionParent("vim.version.version7", "vim.version.version5")
AddVersionParent("vim.version.version7", "vim.version.version2")
AddVersionParent("vim.version.version7", "vim.version.version3")
AddVersionParent("vim.version.version7", "vmodl.version.version0")
AddVersionParent("vim.version.version7", "vmodl.version.version1")
AddVersionParent("vim.version.version7", "vmodl.version.version2")
AddVersionParent("vim.version.version7", "vmodl.reflect.version.version1")
AddVersionParent("integrity.version.version8", "vmodl.query.version.version4")
AddVersionParent("integrity.version.version8", "vmodl.query.version.version3")
AddVersionParent("integrity.version.version8", "vmodl.query.version.version2")
AddVersionParent("integrity.version.version8", "vmodl.query.version.version1")
AddVersionParent("integrity.version.version8", "vim.version.version8")
AddVersionParent("integrity.version.version8", "vim.version.version9")
AddVersionParent("integrity.version.version8", "integrity.version.version1")
AddVersionParent("integrity.version.version8", "vim.version.version6")
AddVersionParent("integrity.version.version8", "vim.version.version7")
AddVersionParent("integrity.version.version8", "integrity.version.version8")
AddVersionParent("integrity.version.version8", "vim.version.version1")
AddVersionParent("integrity.version.version8", "vim.version.version4")
AddVersionParent("integrity.version.version8", "vim.version.version5")
AddVersionParent("integrity.version.version8", "vim.version.version2")
AddVersionParent("integrity.version.version8", "vim.version.version3")
AddVersionParent("integrity.version.version8", "vmodl.version.version0")
AddVersionParent("integrity.version.version8", "vmodl.version.version1")
AddVersionParent("integrity.version.version8", "vmodl.version.version2")
AddVersionParent("integrity.version.version8", "vmodl.reflect.version.version1")
AddVersionParent("vim.version.version1", "vmodl.query.version.version1")
AddVersionParent("vim.version.version1", "vim.version.version1")
AddVersionParent("vim.version.version1", "vmodl.version.version0")
AddVersionParent("vim.version.version4", "vmodl.query.version.version1")
AddVersionParent("vim.version.version4", "vim.version.version1")
AddVersionParent("vim.version.version4", "vim.version.version4")
AddVersionParent("vim.version.version4", "vim.version.version2")
AddVersionParent("vim.version.version4", "vim.version.version3")
AddVersionParent("vim.version.version4", "vmodl.version.version0")
AddVersionParent("vim.version.version5", "vmodl.query.version.version2")
AddVersionParent("vim.version.version5", "vmodl.query.version.version1")
AddVersionParent("vim.version.version5", "vim.version.version1")
AddVersionParent("vim.version.version5", "vim.version.version4")
AddVersionParent("vim.version.version5", "vim.version.version5")
AddVersionParent("vim.version.version5", "vim.version.version2")
AddVersionParent("vim.version.version5", "vim.version.version3")
AddVersionParent("vim.version.version5", "vmodl.version.version0")
AddVersionParent("vim.version.version5", "vmodl.version.version1")
AddVersionParent("vim.version.version2", "vmodl.query.version.version1")
AddVersionParent("vim.version.version2", "vim.version.version1")
AddVersionParent("vim.version.version2", "vim.version.version2")
AddVersionParent("vim.version.version2", "vmodl.version.version0")
AddVersionParent("vim.version.version3", "vmodl.query.version.version1")
AddVersionParent("vim.version.version3", "vim.version.version1")
AddVersionParent("vim.version.version3", "vim.version.version2")
AddVersionParent("vim.version.version3", "vim.version.version3")
AddVersionParent("vim.version.version3", "vmodl.version.version0")
AddVersionParent("vmodl.version.version0", "vmodl.version.version0")
AddVersionParent("vmodl.version.version1", "vmodl.version.version0")
AddVersionParent("vmodl.version.version1", "vmodl.version.version1")
AddVersionParent("vmodl.version.version2", "vmodl.version.version0")
AddVersionParent("vmodl.version.version2", "vmodl.version.version1")
AddVersionParent("vmodl.version.version2", "vmodl.version.version2")
AddVersionParent("vmodl.reflect.version.version1", "vmodl.version.version0")
AddVersionParent("vmodl.reflect.version.version1", "vmodl.version.version1")
AddVersionParent("vmodl.reflect.version.version1", "vmodl.version.version2")
AddVersionParent("vmodl.reflect.version.version1", "vmodl.reflect.version.version1")

newestVersions.Add("integrity.version.version8")
ltsVersions.Add("integrity.version.version8")
dottedVersions.Add("integrity.version.version8")
oldestVersions.Add("integrity.version.version1")

CreateDataType("integrity.BaselineAttribute", "BaselineAttribute", "vmodl.DynamicData", "integrity.version.version1", [("targetType", "string", "integrity.version.version1", 0), ("targetComponent", "string", "integrity.version.version1", F_OPTIONAL), ("type", "string", "integrity.version.version1", 0), ("extraAttribute", "string[]", "integrity.version.version1", F_OPTIONAL)])
CreateEnumType("integrity.BaselineAttribute.BaselineType", "BaselineAttributeBaselineType", "integrity.version.version1", ["Patch", "Upgrade", "Configuration", "Extension"])
CreateEnumType("integrity.BaselineAttribute.Attribute", "BaselineAttributeAttribute", "integrity.version.version1", ["Singleton", "LeafOnly", "NonRemediable"])
CreateDataType("integrity.BaselineComplianceStatus", "BaselineComplianceStatus", "vmodl.DynamicData", "integrity.version.version1", [("key", "int", "integrity.version.version1", 0), ("status", "string", "integrity.version.version1", 0)])
CreateEnumType("integrity.BaselineComplianceStatus.Status", "BaselineComplianceStatusStatus", "integrity.version.version1", ["Compliant", "NotCompliant", "Unknown", "Incompatible"])
CreateDataType("integrity.BaselineGroupComplianceStatus", "BaselineGroupComplianceStatus", "vmodl.DynamicData", "integrity.version.version1", [("key", "int", "integrity.version.version1", 0), ("status", "string", "integrity.version.version1", 0)])
CreateManagedType("integrity.BaselineGroupManager", "BaselineGroupManager", "vmodl.ManagedObject", "integrity.version.version1", [("baselinegroup", "integrity.BaselineGroupManager.BaselineGroupInfo[]", "integrity.version.version1", F_OPTIONAL, "System.View")], [("create", "CreateBaselineGroup", "integrity.version.version1", (("spec", "integrity.BaselineGroupManager.BaselineGroupSpec", "integrity.version.version1", 0, None),), (0, "int", "int"), "VcIntegrity.Baseline.com.vmware.vcIntegrity.ManageBaselines", ["vim.fault.AlreadyExists", "integrity.fault.InvalidObjectName", "vmodl.fault.InvalidArgument", "integrity.fault.ConflictedBaselines", "integrity.fault.TooManyBaselinegroups", ]), ("get", "GetBaselineGroupInfo", "integrity.version.version1", (("id", "int[]", "integrity.version.version1", 0, None),), (0, "integrity.BaselineGroupManager.BaselineGroupInfo[]", "integrity.BaselineGroupManager.BaselineGroupInfo[]"), "System.View", None), ("set", "SetBaselineGroupInfo", "integrity.version.version1", (("info", "integrity.BaselineGroupManager.BaselineGroupInfo", "integrity.version.version1", 0, None),), (0, "void", "void"), "VcIntegrity.Baseline.com.vmware.vcIntegrity.ManageBaselines", ["vim.fault.NotFound", "vim.fault.ConcurrentAccess", "integrity.fault.InvalidObjectName", "vim.fault.AlreadyExists", "vmodl.fault.InvalidArgument", "integrity.fault.ConflictedBaselines", ]), ("delete", "DeleteBaselineGroup", "integrity.version.version1", (("id", "int", "integrity.version.version1", 0, None),), (0, "void", "void"), "VcIntegrity.Baseline.com.vmware.vcIntegrity.ManageBaselines", ["vim.fault.NotFound", ]), ("assignToEntity", "AssignBaselineGroupToEntity", "integrity.version.version1", (("entity", "vim.ManagedEntity", "integrity.version.version1", 0, "VcIntegrity.Baseline.com.vmware.vcIntegrity.AssignBaselines"),("group", "int[]", "integrity.version.version1", 0, None),), (0, "void", "void"), None, ["vmodl.fault.ManagedObjectNotFound", "vim.fault.NotFound", ]), ("removeFromEntity", "RemoveBaselineGroupFromEntity", "integrity.version.version1", (("entity", "vim.ManagedEntity", "integrity.version.version1", 0, "VcIntegrity.Baseline.com.vmware.vcIntegrity.AssignBaselines"),("group", "int[]", "integrity.version.version1", 0, None),), (0, "void", "void"), None, ["vmodl.fault.ManagedObjectNotFound", ]), ("queryForEntity", "QueryBaselineGroupForEntity", "integrity.version.version1", (("entity", "vim.ManagedEntity", "integrity.version.version1", 0, "System.Read"),("inheritFromParent", "boolean", "integrity.version.version1", 0, None),("assignedToChild", "boolean", "integrity.version.version1", 0, None),), (F_OPTIONAL, "integrity.BaselineGroupManager.TargetBaselineGroup[]", "integrity.BaselineGroupManager.TargetBaselineGroup[]"), None, ["vmodl.fault.ManagedObjectNotFound", ]), ("queryAssignedEntity", "QueryAssignedEntityForBaselineGroup", "integrity.version.version1", (("group", "int[]", "integrity.version.version1", 0, None),), (F_OPTIONAL, "integrity.BaselineGroupManager.AssignedEntityGroup[]", "integrity.BaselineGroupManager.AssignedEntityGroup[]"), "System.View", None)])
CreateDataType("integrity.BaselineGroupManager.BaselineGroupSpec", "BaselineGroupManagerBaselineGroupSpec", "vmodl.DynamicData", "integrity.version.version1", [("name", "string", "integrity.version.version1", 0), ("description", "string", "integrity.version.version1", F_OPTIONAL), ("targetType", "string", "integrity.version.version1", 0), ("baseline", "int[]", "integrity.version.version1", F_OPTIONAL), ("owner", "string", "integrity.version.version1", F_OPTIONAL), ("ownerdata", "string", "integrity.version.version1", F_OPTIONAL)])
CreateDataType("integrity.BaselineGroupManager.BaselineGroupInfo", "BaselineGroupManagerBaselineGroupInfo", "integrity.BaselineGroupManager.BaselineGroupSpec", "integrity.version.version1", [("key", "int", "integrity.version.version1", 0), ("versionNumber", "int", "integrity.version.version1", 0), ("lastUpdateTime", "vmodl.DateTime", "integrity.version.version1", F_OPTIONAL), ("contentVersions", "string[]", "integrity.version.version1", F_OPTIONAL)])
CreateDataType("integrity.BaselineGroupManager.TargetBaselineGroup", "BaselineGroupManagerTargetBaselineGroup", "vmodl.DynamicData", "integrity.version.version1", [("entity", "vim.ManagedEntity", "integrity.version.version1", 0), ("groupId", "int[]", "integrity.version.version1", F_OPTIONAL)])
CreateDataType("integrity.BaselineGroupManager.AssignedEntityGroup", "BaselineGroupManagerAssignedEntityGroup", "vmodl.DynamicData", "integrity.version.version1", [("group", "int", "integrity.version.version1", 0), ("entity", "vim.ManagedEntity[]", "integrity.version.version1", F_OPTIONAL)])
CreateDataType("integrity.BaselineInfo", "BaselineInfo", "vmodl.DynamicData", "integrity.version.version1", [("spec", "integrity.BaselineSpec", "integrity.version.version1", 0), ("key", "int", "integrity.version.version1", 0), ("versionNumber", "int", "integrity.version.version1", 0), ("lastUpdateTime", "vmodl.DateTime", "integrity.version.version1", F_OPTIONAL), ("contentType", "string", "integrity.version.version1", 0), ("builtin", "boolean", "integrity.version.version1", 0), ("contentVersions", "string[]", "integrity.version.version1", F_OPTIONAL)])
CreateEnumType("integrity.BaselineInfo.ContentType", "BaselineInfoContentType", "integrity.version.version1", ["DYNAMIC", "STATIC", "BOTH", "INVALID"])
CreateManagedType("integrity.BaselineManager", "BaselineManager", "vmodl.ManagedObject", "integrity.version.version1", [("baseline", "integrity.BaselineInfo[]", "integrity.version.version1", F_OPTIONAL, "System.View")], [("create", "CreateBaseline", "integrity.version.version1", (("spec", "integrity.BaselineSpec", "integrity.version.version1", 0, None),), (0, "int", "int"), "VcIntegrity.Baseline.com.vmware.vcIntegrity.ManageBaselines", ["vim.fault.AlreadyExists", "integrity.fault.InvalidObjectName", "vmodl.fault.InvalidArgument", "integrity.fault.TooManyBaselines", ]), ("get", "GetBaselineInfo", "integrity.version.version1", (("id", "int[]", "integrity.version.version1", 0, None),), (0, "integrity.BaselineInfo[]", "integrity.BaselineInfo[]"), "System.View", None), ("set", "SetBaselineInfo", "integrity.version.version1", (("baseline", "integrity.BaselineInfo", "integrity.version.version1", 0, None),), (0, "void", "void"), "VcIntegrity.Baseline.com.vmware.vcIntegrity.ManageBaselines", ["vim.fault.NotFound", "vim.fault.ConcurrentAccess", "integrity.fault.InvalidObjectName", "vim.fault.AlreadyExists", "vmodl.fault.InvalidArgument", "integrity.fault.ReadOnlyObject", "integrity.fault.ConflictedBaselines", ]), ("delete", "DeleteBaseline", "integrity.version.version1", (("id", "int", "integrity.version.version1", 0, None),), (0, "void", "void"), "VcIntegrity.Baseline.com.vmware.vcIntegrity.ManageBaselines", ["vim.fault.NotFound", "integrity.fault.ReadOnlyObject", ]), ("assignToEntity", "AssignBaselinesToEntity", "integrity.version.version1", (("entity", "vim.ManagedEntity", "integrity.version.version1", 0, "VcIntegrity.Baseline.com.vmware.vcIntegrity.AssignBaselines"),("baseline", "int[]", "integrity.version.version1", 0, None),), (0, "void", "void"), None, ["vmodl.fault.ManagedObjectNotFound", "vim.fault.NotFound", "vmodl.fault.InvalidArgument", ]), ("removeFromEntity", "RemoveBaselinesFromEntity", "integrity.version.version1", (("entity", "vim.ManagedEntity", "integrity.version.version1", 0, "VcIntegrity.Baseline.com.vmware.vcIntegrity.AssignBaselines"),("baseline", "int[]", "integrity.version.version1", 0, None),), (0, "void", "void"), None, ["vmodl.fault.ManagedObjectNotFound", ]), ("queryForEntity", "QueryBaselinesForEntity", "integrity.version.version1", (("entity", "vim.ManagedEntity", "integrity.version.version1", 0, "System.Read"),("searchCriteria", "integrity.BaselineManager.BaselinesSearchSpec", "integrity.version.version1", 0, None),), (F_OPTIONAL, "integrity.BaselineManager.TargetBaselineGroup[]", "integrity.BaselineManager.TargetBaselineGroup[]"), None, ["vmodl.fault.ManagedObjectNotFound", "vmodl.fault.InvalidArgument", ]), ("queryAssignedEntity", "QueryAssignedEntityForBaseline", "integrity.version.version1", (("baseline", "int[]", "integrity.version.version1", 0, None),), (F_OPTIONAL, "integrity.BaselineManager.AssignedEntityGroup[]", "integrity.BaselineManager.AssignedEntityGroup[]"), "System.View", None), ("queryMissingPatchInformation", "QueryMissingPatchInformation", "integrity.version.version1", (), (F_OPTIONAL, "integrity.BaselineManager.TargetMissingPatchGroup[]", "integrity.BaselineManager.TargetMissingPatchGroup[]"), "System.View", None), ("queryBaselinesForUpdate", "QueryBaselinesForUpdate", "integrity.version.version1", (("update", "int[]", "integrity.version.version1", 0, None),), (F_OPTIONAL, "integrity.BaselineManager.UpdateBaselinesGroup[]", "integrity.BaselineManager.UpdateBaselinesGroup[]"), "System.View", None), ("queryUpdates", "QueryUpdates", "integrity.version.version1", (("baseline", "int[]", "integrity.version.version1", 0, None),), (F_OPTIONAL, "integrity.BaselineManager.UpdateGroup[]", "integrity.BaselineManager.UpdateGroup[]"), "System.View", ["vim.fault.NotFound", ]), ("queryVMHWScanResult", "QueryVMHWScanResult", "integrity.version.version1", (("entities", "vim.ManagedEntity[]", "integrity.version.version1", 0, None),("baseline", "int", "integrity.version.version1", 0, None),), (F_OPTIONAL, "integrity.BaselineManager.VmHWScanResult[]", "integrity.BaselineManager.VmHWScanResult[]"), "System.View", None), ("queryVMToolsStatus", "QueryVMToolsStatus", "integrity.version.version1", (("entities", "vim.ManagedEntity[]", "integrity.version.version1", 0, None),), (F_OPTIONAL, "integrity.BaselineManager.VmToolsStatus[]", "integrity.BaselineManager.VmToolsStatus[]"), "System.View", None), ("queryBaselinesForUpgradeRelease", "QueryBaselinesForUpgradeRelease", "integrity.version.version1", (("releaseKey", "string", "integrity.version.version1", 0, None),), (F_OPTIONAL, "integrity.BaselineInfo[]", "integrity.BaselineInfo[]"), "System.View", ["vmodl.fault.InvalidArgument", ]), ("queryUpdatesForEntityBaseline", "QueryUpdatesForEntityBaseline", "integrity.version.version1", (("entities", "vim.ManagedEntity[]", "integrity.version.version1", 0, None),("baseline", "int", "integrity.version.version1", 0, None),), (0, "integrity.BaselineManager.BaselineEntityUpdateInfo[]", "integrity.BaselineManager.BaselineEntityUpdateInfo[]"), "System.View", ["vmodl.fault.InvalidArgument", "vim.fault.DatabaseError", "vmodl.fault.NotImplemented", ])])
CreateDataType("integrity.BaselineManager.BaselinesSearchSpec", "BaselineManagerBaselinesSearchSpec", "vmodl.DynamicData", "integrity.version.version1", [("inheritFromParent", "boolean", "integrity.version.version1", F_OPTIONAL), ("includeChild", "boolean", "integrity.version.version1", F_OPTIONAL), ("includeBaselineGroup", "boolean", "integrity.version.version1", F_OPTIONAL)])
CreateDataType("integrity.BaselineManager.TargetBaselineGroup", "BaselineManagerTargetBaselineGroup", "vmodl.DynamicData", "integrity.version.version1", [("entity", "vim.ManagedEntity", "integrity.version.version1", 0), ("baselineId", "int[]", "integrity.version.version1", F_OPTIONAL)])
CreateDataType("integrity.BaselineManager.AssignedEntityGroup", "BaselineManagerAssignedEntityGroup", "vmodl.DynamicData", "integrity.version.version1", [("baseline", "int", "integrity.version.version1", 0), ("entity", "vim.ManagedEntity[]", "integrity.version.version1", F_OPTIONAL)])
CreateDataType("integrity.BaselineManager.TargetMissingPatchGroup", "BaselineManagerTargetMissingPatchGroup", "vmodl.DynamicData", "integrity.version.version1", [("updateId", "int", "integrity.version.version1", 0), ("entities", "vim.ManagedEntity[]", "integrity.version.version1", F_OPTIONAL)])
CreateDataType("integrity.BaselineManager.UpdateBaselinesGroup", "BaselineManagerUpdateBaselinesGroup", "vmodl.DynamicData", "integrity.version.version1", [("update", "int", "integrity.version.version1", 0), ("baseline", "int[]", "integrity.version.version1", F_OPTIONAL)])
CreateDataType("integrity.BaselineManager.UpdateGroup", "BaselineManagerUpdateGroup", "vmodl.DynamicData", "integrity.version.version1", [("baselineId", "int", "integrity.version.version1", 0), ("updateId", "int[]", "integrity.version.version1", F_OPTIONAL)])
CreateDataType("integrity.BaselineManager.VmHWScanResult", "BaselineManagerVmHWScanResult", "vmodl.DynamicData", "integrity.version.version1", [("baseline", "int", "integrity.version.version1", 0), ("vm", "vim.ManagedEntity", "integrity.version.version1", 0), ("vmHWVersion", "int", "integrity.version.version1", 0), ("baselineHWVersion", "int", "integrity.version.version1", 0), ("details", "vmodl.LocalizableMessage", "integrity.version.version1", F_OPTIONAL)])
CreateDataType("integrity.BaselineManager.VmToolsStatus", "BaselineManagerVmToolsStatus", "vmodl.DynamicData", "integrity.version.version1", [("vm", "vim.ManagedEntity", "integrity.version.version1", 0), ("toolsStatus", "string", "integrity.version.version1", F_OPTIONAL)])
CreateDataType("integrity.BaselineManager.BaselineEntityUpdateInfo", "BaselineManagerBaselineEntityUpdateInfo", "vmodl.DynamicData", "integrity.version.version1", [("entity", "vim.ManagedEntity", "integrity.version.version1", 0), ("baselineId", "int", "integrity.version.version1", 0), ("baselineApplicable", "boolean", "integrity.version.version1", 0), ("update", "int[]", "integrity.version.version1", F_OPTIONAL)])
CreateDataType("integrity.BaselineSpec", "BaselineSpec", "vmodl.DynamicData", "integrity.version.version1", [("name", "string", "integrity.version.version1", 0), ("description", "string", "integrity.version.version1", F_OPTIONAL), ("attribute", "integrity.BaselineAttribute", "integrity.version.version1", 0), ("owner", "string", "integrity.version.version1", F_OPTIONAL), ("ownerdata", "string", "integrity.version.version1", F_OPTIONAL)])
CreateDataType("integrity.BasicComplianceStatus", "BasicComplianceStatus", "vmodl.DynamicData", "integrity.version.version1", [("key", "int", "integrity.version.version1", 0), ("status", "string", "integrity.version.version1", 0), ("reason", "vmodl.LocalizableMessage[]", "integrity.version.version1", F_OPTIONAL)])
CreateManagedType("integrity.ComplianceStatusManager", "ComplianceStatusManager", "vmodl.ManagedObject", "integrity.version.version1", [("maxStatusCollector", "int", "integrity.version.version1", 0, "System.View")], [("getComplianceStatus", "GetComplianceStatus", "integrity.version.version1", (("entity", "vim.ManagedEntity", "integrity.version.version1", 0, "VcIntegrity.Updates.com.vmware.vcIntegrity.ViewStatus"),), (0, "integrity.StatusCollector", "integrity.StatusCollector"), None, ["vim.fault.NotFound", "vim.fault.InvalidState", ]), ("getUpdateComplianceStatus", "GetUpdateComplianceStatus", "integrity.version.version1", (("entity", "vim.ManagedEntity", "integrity.version.version1", 0, "VcIntegrity.Updates.com.vmware.vcIntegrity.ViewStatus"),("spec", "integrity.ComplianceStatusManager.DetailedComplianceStatusSpec", "integrity.version.version1", 0, None),), (0, "integrity.DetailedComplianceStatusCollector", "integrity.DetailedComplianceStatusCollector"), None, ["vim.fault.NotFound", "vmodl.fault.InvalidArgument", "vim.fault.InvalidState", ]), ("queryEntityComplianceStatus", "QueryEntityComplianceStatus", "integrity.version.version1", (("entity", "vim.ManagedEntity", "integrity.version.version1", 0, "VcIntegrity.Updates.com.vmware.vcIntegrity.ViewStatus"),("baselineIds", "int[]", "integrity.version.version1", 0, None),), (0, "integrity.ComplianceStatusManager.EntityBaselinesComplianceSummary", "integrity.ComplianceStatusManager.EntityBaselinesComplianceSummary"), None, ["vmodl.fault.ManagedObjectNotFound", "integrity.fault.NoEntities", "vmodl.fault.InvalidArgument", ]), ("queryEntityComplianceCounts", "QueryEntityComplianceCounts", "integrity.version.version1", (("entity", "vim.ManagedEntity", "integrity.version.version1", 0, "VcIntegrity.Updates.com.vmware.vcIntegrity.ViewStatus"),("baselineIds", "int[]", "integrity.version.version1", F_OPTIONAL, None),("baselineGroupIds", "int[]", "integrity.version.version1", F_OPTIONAL, None),), (F_OPTIONAL, "integrity.ComplianceStatusManager.EntityComplianceCountsPerBlOrBlGroup[]", "integrity.ComplianceStatusManager.EntityComplianceCountsPerBlOrBlGroup[]"), None, ["vmodl.fault.ManagedObjectNotFound", "integrity.fault.NoEntities", "vmodl.fault.InvalidArgument", ]), ("queryUpdateStatus", "QueryUpdateStatus", "integrity.version.version1", (("entity", "vim.ManagedEntity", "integrity.version.version1", 0, "VcIntegrity.Updates.com.vmware.vcIntegrity.ViewStatus"),("baseline", "int[]", "integrity.version.version1", F_OPTIONAL, None),), (F_OPTIONAL, "integrity.ComplianceStatusManager.BaselineUpdateStatus[]", "integrity.ComplianceStatusManager.BaselineUpdateStatus[]"), None, ["vmodl.fault.ManagedObjectNotFound", "vim.fault.NotFound", "vmodl.fault.InvalidArgument", ]), ("queryBaselineStatus", "QueryBaselineStatus", "integrity.version.version1", (("entity", "vim.ManagedEntity", "integrity.version.version1", 0, "VcIntegrity.Updates.com.vmware.vcIntegrity.ViewStatus"),("selectedStatus", "string[]", "integrity.version.version1", F_OPTIONAL, None),("baseline", "int[]", "integrity.version.version1", 0, None),), (0, "integrity.ComplianceStatusManager.EntityStatusSummary", "integrity.ComplianceStatusManager.EntityStatusSummary"), None, ["vmodl.fault.ManagedObjectNotFound", "vim.fault.NotFound", "vmodl.fault.InvalidArgument", ]), ("queryUpdateStatusForBaselineGroup", "QueryUpdateStatusForBaselineGroup", "integrity.version.version1", (("entity", "vim.ManagedEntity", "integrity.version.version1", 0, "VcIntegrity.Updates.com.vmware.vcIntegrity.ViewStatus"),("baselinegroup", "int", "integrity.version.version1", 0, None),), (F_OPTIONAL, "integrity.ComplianceStatusManager.BaselineUpdateStatus[]", "integrity.ComplianceStatusManager.BaselineUpdateStatus[]"), None, ["vmodl.fault.ManagedObjectNotFound", "vim.fault.NotFound", "vmodl.fault.InvalidArgument", ]), ("queryBaselineComplianceStatus", "QueryBaselineComplianceStatus", "integrity.version.version1", (("entity", "vim.ManagedEntity", "integrity.version.version1", 0, "VcIntegrity.Updates.com.vmware.vcIntegrity.ViewStatus"),), (F_OPTIONAL, "integrity.BaselineComplianceStatus[]", "integrity.BaselineComplianceStatus[]"), None, ["vmodl.fault.ManagedObjectNotFound", "vim.fault.NotFound", ]), ("queryBaselineGroupComplianceStatus", "QueryBaselineGroupComplianceStatus", "integrity.version.version1", (("entity", "vim.ManagedEntity", "integrity.version.version1", 0, "VcIntegrity.Updates.com.vmware.vcIntegrity.ViewStatus"),), (F_OPTIONAL, "integrity.BaselineGroupComplianceStatus[]", "integrity.BaselineGroupComplianceStatus[]"), None, ["vmodl.fault.ManagedObjectNotFound", "vim.fault.NotFound", ])])
CreateDataType("integrity.ComplianceStatusManager.DetailedComplianceStatusSpec", "ComplianceStatusManagerDetailedComplianceStatusSpec", "vmodl.DynamicData", "integrity.version.version1", [("baseline", "int[]", "integrity.version.version1", 0)])
CreateDataType("integrity.ComplianceStatusManager.EntityBaselinesCompliance", "ComplianceStatusManagerEntityBaselinesCompliance", "vmodl.DynamicData", "integrity.version.version1", [("entity", "vim.ManagedEntity", "integrity.version.version1", 0), ("status", "string", "integrity.version.version1", 0), ("baselineId", "int[]", "integrity.version.version1", 0), ("baselineType", "string", "integrity.version.version1", 0), ("lastScanTime", "vmodl.DateTime", "integrity.version.version1", F_OPTIONAL), ("toolsUpgradeOnPowerCycle", "boolean", "integrity.version.version1", F_OPTIONAL)])
CreateDataType("integrity.ComplianceStatusManager.EntityComplianceCountsSummary", "ComplianceStatusManagerEntityComplianceCountsSummary", "vmodl.DynamicData", "integrity.version.version1", [("notCompliantEntities", "int", "integrity.version.version1", 0), ("inCompatibleEntities", "int", "integrity.version.version1", 0), ("unknownEntities", "int", "integrity.version.version1", 0), ("compliantEntities", "int", "integrity.version.version1", 0)])
CreateDataType("integrity.ComplianceStatusManager.EntityBaselinesComplianceSummary", "ComplianceStatusManagerEntityBaselinesComplianceSummary", "vmodl.DynamicData", "integrity.version.version1", [("summary", "integrity.ComplianceStatusManager.EntityComplianceCountsSummary", "integrity.version.version1", 0), ("baselinesComplianceStatus", "integrity.ComplianceStatusManager.EntityBaselinesCompliance[]", "integrity.version.version1", 0)])
CreateDataType("integrity.ComplianceStatusManager.EntityComplianceCountsPerBlOrBlGroup", "ComplianceStatusManagerEntityComplianceCountsPerBlOrBlGroup", "vmodl.DynamicData", "integrity.version.version1", [("id", "int", "integrity.version.version1", 0), ("isSingleBaseline", "boolean", "integrity.version.version1", 0), ("summary", "integrity.ComplianceStatusManager.EntityComplianceCountsSummary", "integrity.version.version1", 0)])
CreateEnumType("integrity.ComplianceStatusManager.UpdateStatus", "ComplianceStatusManagerUpdateStatus", "integrity.version.version1", ["Missing", "Installed", "NotApplicable", "Unknown", "Staged", "Conflict", "ObsoletedByHost", "MissingPackage", "NotInstallable", "NewModule", "UnsupportedUpgrade", "IncompatibleHardware", "ConflictingNewModule", "InstalledRecalled", "NotApplicableRecalled", "PrerequisiteRecalled", "MissingRecalled", "NewModuleRecalled", "PrerequisiteRecalledInstalled", "IncompatibleSoftwareConfig"])
CreateDataType("integrity.ComplianceStatusManager.UpdateCompliantStatus", "ComplianceStatusManagerUpdateCompliantStatus", "vmodl.DynamicData", "integrity.version.version1", [("key", "vim.ManagedEntity", "integrity.version.version1", 0), ("missingUpdate", "int[]", "integrity.version.version1", F_OPTIONAL), ("installedUpdate", "int[]", "integrity.version.version1", F_OPTIONAL), ("stagedUpdate", "int[]", "integrity.version.version1", F_OPTIONAL), ("notApplicableUpdate", "int[]", "integrity.version.version1", F_OPTIONAL), ("UnknownUpdate", "int[]", "integrity.version.version1", F_OPTIONAL), ("conflict", "int[]", "integrity.version.version1", F_OPTIONAL), ("obsoletedByHost", "int[]", "integrity.version.version1", F_OPTIONAL), ("missingPackage", "int[]", "integrity.version.version1", F_OPTIONAL), ("notInstallable", "int[]", "integrity.version.version1", F_OPTIONAL), ("newModule", "int[]", "integrity.version.version1", F_OPTIONAL), ("unSupportedUpgrade", "int[]", "integrity.version.version1", F_OPTIONAL), ("incompatibleHardware", "int[]", "integrity.version.version1", F_OPTIONAL), ("conflictingNewModule", "int[]", "integrity.version.version1", F_OPTIONAL), ("installedRecalled", "int[]", "integrity.version.version1", F_OPTIONAL), ("notApplicableRecalled", "int[]", "integrity.version.version1", F_OPTIONAL), ("prerequisiteRecalled", "int[]", "integrity.version.version1", F_OPTIONAL), ("missingRecalled", "int[]", "integrity.version.version1", F_OPTIONAL), ("newModuleRecalled", "int[]", "integrity.version.version1", F_OPTIONAL), ("prerequisiteRecalledInstalled", "int[]", "integrity.version.version1", F_OPTIONAL), ("incompatibleSoftwareConfig", "int[]", "integrity.version.version1", F_OPTIONAL)])
CreateDataType("integrity.ComplianceStatusManager.BaselineUpdateStatus", "ComplianceStatusManagerBaselineUpdateStatus", "vmodl.DynamicData", "integrity.version.version1", [("baselineId", "int", "integrity.version.version1", F_OPTIONAL), ("updateStatus", "integrity.ComplianceStatusManager.UpdateCompliantStatus[]", "integrity.version.version1", F_OPTIONAL)])
CreateDataType("integrity.ComplianceStatusManager.UpdateStatusSummary", "ComplianceStatusManagerUpdateStatusSummary", "vmodl.DynamicData", "integrity.version.version1", [("status", "string", "integrity.version.version1", F_OPTIONAL), ("patchCount", "int", "integrity.version.version1", F_OPTIONAL), ("upgradeCount", "int", "integrity.version.version1", F_OPTIONAL), ("stagedPatchCount", "int", "integrity.version.version1", F_OPTIONAL), ("stagedUpgradeCount", "int", "integrity.version.version1", F_OPTIONAL), ("extensionCount", "int", "integrity.version.version1", F_OPTIONAL), ("stagedExtensionCount", "int", "integrity.version.version1", F_OPTIONAL)])
CreateDataType("integrity.ComplianceStatusManager.EntityComplianceStatus", "ComplianceStatusManagerEntityComplianceStatus", "vmodl.DynamicData", "integrity.version.version1", [("entity", "vim.ManagedEntity", "integrity.version.version1", 0), ("baseline", "int[]", "integrity.version.version1", F_OPTIONAL), ("lastScanTime", "vmodl.DateTime", "integrity.version.version1", F_OPTIONAL), ("updateStatus", "integrity.ComplianceStatusManager.UpdateStatusSummary[]", "integrity.version.version1", F_OPTIONAL), ("toolsUpgradeOnPowerCycle", "boolean", "integrity.version.version1", F_OPTIONAL)])
CreateDataType("integrity.ComplianceStatusManager.EntityStatusSummary", "ComplianceStatusManagerEntityStatusSummary", "vmodl.DynamicData", "integrity.version.version1", [("entityStatus", "integrity.ComplianceStatusManager.EntityComplianceStatus[]", "integrity.version.version1", F_OPTIONAL), ("summary", "integrity.ComplianceStatusManager.UpdateStatusSummary[]", "integrity.version.version1", F_OPTIONAL)])
CreateManagedType("integrity.DVSManager", "VciDVSManager", "vmodl.ManagedObject", "integrity.version.version1", None, [("scan", "VciDVSScan_Task", "integrity.version.version1", (("entity", "vim.ManagedEntity[]", "integrity.version.version1", 0, "VcIntegrity.Updates.com.vmware.vcIntegrity.Scan"),("spec", "integrity.DVSManager.ScanSpec", "integrity.version.version1", 0, None),), (0, "vim.Task", "void"), None, ["vmodl.fault.InvalidArgument", "integrity.fault.NoEntities", "integrity.fault.DVSScanFailure", "integrity.fault.DVSUpdateDownloadFailure", "vim.fault.DatabaseError", ]), ("stage", "VciDVSStage_Task", "integrity.version.version1", (("entity", "vim.ManagedEntity[]", "integrity.version.version1", 0, "VcIntegrity.Updates.com.vmware.vcIntegrity.Remediate"),("spec", "integrity.DVSManager.StagingSpec", "integrity.version.version1", 0, None),), (0, "vim.Task", "void"), None, ["vmodl.fault.InvalidArgument", "integrity.fault.NoEntities", "integrity.fault.DVSStageFailure", "integrity.fault.DVSUpdateDownloadFailure", "vim.fault.DatabaseError", ]), ("remediate", "VciDVSRemediate_Task", "integrity.version.version1", (("entity", "vim.ManagedEntity[]", "integrity.version.version1", 0, "VcIntegrity.Updates.com.vmware.vcIntegrity.Remediate"),("spec", "integrity.DVSManager.RemediationSpec", "integrity.version.version1", 0, None),), (0, "vim.Task", "void"), None, ["vmodl.fault.InvalidArgument", "integrity.fault.NoEntities", "integrity.fault.DVSRemediateFailure", "integrity.fault.DVSUpdateDownloadFailure", "vim.fault.DatabaseError", ]), ("getUpdateComplianceStatus", "VciDVSGetUpdateComplianceStatus", "integrity.version.version1", (("entity", "vim.ManagedEntity[]", "integrity.version.version1", 0, "VcIntegrity.Updates.com.vmware.vcIntegrity.ViewStatus"),("spec", "integrity.DVSManager.UpdateComplianceStatusSpec", "integrity.version.version1", 0, None),), (0, "integrity.DVSManager.UpdateComplianceStatusGroup[]", "integrity.DVSManager.UpdateComplianceStatusGroup[]"), None, ["vim.fault.NotFound", "vmodl.fault.InvalidArgument", "vim.fault.DatabaseError", ])])
CreateDataType("integrity.DVSManager.Option", "VciDVSOption", "vmodl.DynamicData", "integrity.version.version1", [("feedURL", "string", "integrity.version.version1", 0)])
CreateDataType("integrity.DVSManager.ScanOption", "VciDVSScanOption", "integrity.DVSManager.Option", "integrity.version.version1", None)
CreateDataType("integrity.DVSManager.ScanSpec", "VciDVSScanSpec", "vmodl.DynamicData", "integrity.version.version1", [("softwareUpdateUniqueId", "string[]", "integrity.version.version1", 0), ("option", "integrity.DVSManager.ScanOption", "integrity.version.version1", F_OPTIONAL)])
CreateDataType("integrity.DVSManager.StagingOption", "VciDVSStagingOption", "integrity.DVSManager.Option", "integrity.version.version1", None)
CreateDataType("integrity.DVSManager.StagingSpec", "VciDVSStagingSpec", "vmodl.DynamicData", "integrity.version.version1", [("softwareUpdateUniqueId", "string[]", "integrity.version.version1", 0), ("option", "integrity.DVSManager.StagingOption", "integrity.version.version1", F_OPTIONAL)])
CreateDataType("integrity.DVSManager.RemediateOption", "VciDVSRemediationOption", "integrity.DVSManager.Option", "integrity.version.version1", None)
CreateDataType("integrity.DVSManager.RemediationSpec", "VciDVSRemediationSpec", "vmodl.DynamicData", "integrity.version.version1", [("softwareUpdateUniqueId", "string[]", "integrity.version.version1", 0), ("option", "integrity.DVSManager.RemediateOption", "integrity.version.version1", 0)])
CreateEnumType("integrity.DVSManager.UpdateStatus", "VciDVSUpdateStatus", "integrity.version.version1", ["Missing", "Installed", "NotApplicable", "Unknown", "Staged", "Conflict", "ObsoletedByHost"])
CreateEnumType("integrity.DVSManager.Result", "VciDVSResult", "integrity.version.version1", ["Success", "Fail"])
CreateDataType("integrity.DVSManager.UpdateComplianceStatus", "VciDVSUpdateComplianceStatus", "vmodl.DynamicData", "integrity.version.version1", [("softwareUpdateUniqueId", "string", "integrity.version.version1", 0), ("status", "string", "integrity.version.version1", 0), ("result", "string", "integrity.version.version1", 0), ("fault", "vmodl.MethodFault", "integrity.version.version1", F_OPTIONAL), ("replacementUpdateUniqueId", "string", "integrity.version.version1", F_OPTIONAL)])
CreateDataType("integrity.DVSManager.UpdateComplianceStatusGroup", "VciDVSUpdateComplianceStatusGroup", "vmodl.DynamicData", "integrity.version.version1", [("entity", "vim.ManagedEntity", "integrity.version.version1", 0), ("status", "integrity.DVSManager.UpdateComplianceStatus[]", "integrity.version.version1", F_OPTIONAL)])
CreateDataType("integrity.DVSManager.UpdateComplianceStatusSpec", "VciDVSUpdateComplianceStatusSpec", "vmodl.DynamicData", "integrity.version.version1", [("operationId", "string[]", "integrity.version.version1", 0), ("softwareUpdateUniqueId", "string[]", "integrity.version.version1", 0)])
CreateManagedType("integrity.Disposable", "Disposable", "vmodl.ManagedObject", "integrity.version.version1", None, [("Dispose", "IntegrityDispose", "integrity.version.version1", (), (0, "void", "void"), "System.Read", None), ("MakeSticky", "IntegrityMakeSticky", "integrity.version.version1", (), (0, "void", "void"), "System.Read", None)])
CreateDataType("integrity.EntityToolsUpgradeOption", "EntityToolsUpgradeOption", "vmodl.DynamicData", "integrity.version.version1", [("toolsUpgradeOnPowerCycle", "boolean", "integrity.version.version1", F_OPTIONAL), ("entity", "vim.ManagedEntity", "integrity.version.version1", 0)])
CreateManagedType("integrity.EulaManager", "EulaManager", "vmodl.ManagedObject", "integrity.version.version1", None, [("retrieveEulaDetails", "RetrieveEulaDetails", "integrity.version.version1", (("updateId", "int", "integrity.version.version1", 0, None),), (0, "string[]", "string[]"), "System.Read", ["vim.fault.NotFound", "vim.fault.DatabaseError", ]), ("setEulaState", "SetEulaState", "integrity.version.version1", (("updateId", "int", "integrity.version.version1", 0, None),("accepted", "boolean", "integrity.version.version1", 0, None),), (0, "void", "void"), "VcIntegrity.Updates.com.vmware.vcIntegrity.Remediate", ["vim.fault.NotFound", "integrity.fault.NotApplicableEulaState", "vim.fault.DatabaseError", ]), ("getEulaState", "GetEulaState", "integrity.version.version1", (("updateId", "int", "integrity.version.version1", 0, None),), (0, "integrity.EulaManager.EulaStatus", "integrity.EulaManager.EulaStatus"), "System.Read", ["vim.fault.NotFound", "vim.fault.DatabaseError", ])])
CreateEnumType("integrity.EulaManager.EulaStatus", "EulaManagerEulaStatus", "integrity.version.version1", ["EULA_NOTAPPLICABLE", "EULA_ACCEPTED", "EULA_NOTACCEPTED"])
CreateManagedType("integrity.FileUploadManager", "FileUploadManager", "vmodl.ManagedObject", "integrity.version.version1", None, [("ImportFile", "ImportFile_Task", "integrity.version.version1", (("fileSpec", "integrity.FileUploadManager.FileUploadSpec", "integrity.version.version1", 0, None),), (0, "vim.Task", "integrity.FileUploadManager.FileUploadResponse"), "VcIntegrity.FileUpload.com.vmware.vcIntegrity.ImportFile", ["vim.fault.NotFound", "vim.fault.AlreadyExists", "integrity.fault.FileUploadNotEnoughSpace", "integrity.fault.FileUploadInvalidPackage", "integrity.fault.FileUploadNoSessionMatch", "integrity.fault.FileUploadUnsupportedFileType", "integrity.fault.FileUploadUnsupportedFileLocation", "integrity.fault.FileDownloadFailure", "integrity.fault.HostPatchNotSupportedBundle", ])])
CreateEnumType("integrity.FileUploadManager.FileFunctionalType", "FileUploadManagerFileFunctionalType", "integrity.version.version1", ["Upgrade", "Patch", "StateElement"])
CreateEnumType("integrity.FileUploadManager.OperationType", "FileUploadManagerOperationType", "integrity.version.version1", ["Upload", "Confirm", "UploadAndConfirm", "Cancel"])
CreateDataType("integrity.FileUploadManager.FileUploadSpec", "FileUploadManagerFileUploadSpec", "vmodl.DynamicData", "integrity.version.version1", [("fileFunctionalType", "string", "integrity.version.version1", 0), ("filePath", "string", "integrity.version.version1", 0), ("opType", "string", "integrity.version.version1", 0), ("sessionId", "string", "integrity.version.version1", 0)])
CreateDataType("integrity.FileUploadManager.FileUploadResponse", "FileUploadManagerFileUploadResponse", "vmodl.DynamicData", "integrity.version.version1", [("type", "string", "integrity.version.version1", 0), ("sessionId", "string", "integrity.version.version1", 0), ("details", "anyType", "integrity.version.version1", F_OPTIONAL)])
CreateDataType("integrity.GuestRemediationRollbackOption", "GuestRemediationRollbackOption", "vmodl.DynamicData", "integrity.version.version1", [("createSnapshot", "boolean", "integrity.version.version1", 0), ("takeMemoryDump", "boolean", "integrity.version.version1", 0), ("hoursToKeepSnapshot", "int", "integrity.version.version1", F_OPTIONAL), ("snapshotName", "string", "integrity.version.version1", F_OPTIONAL), ("snapshotDesc", "string", "integrity.version.version1", F_OPTIONAL)])
CreateDataType("integrity.GuestRemediationScheduleOption", "GuestRemediationScheduleOption", "vmodl.DynamicData", "integrity.version.version1", [("powerOpOffline", "string", "integrity.version.version1", 0), ("powerOpOfflineTime", "vmodl.DateTime", "integrity.version.version1", F_OPTIONAL), ("powerOpOnline", "string", "integrity.version.version1", 0), ("powerOpOnlineTime", "vmodl.DateTime", "integrity.version.version1", F_OPTIONAL), ("includeSuspendedVM", "boolean", "integrity.version.version1", 0), ("powerOpSuspended", "string", "integrity.version.version1", 0), ("powerOpSuspendedTime", "vmodl.DateTime", "integrity.version.version1", F_OPTIONAL), ("scheduledTaskName", "string", "integrity.version.version1", F_OPTIONAL), ("scheduledTaskDescription", "string", "integrity.version.version1", F_OPTIONAL), ("upgradeToolsOnNextReboot", "boolean", "integrity.version.version1", F_OPTIONAL)])
CreateEnumType("integrity.GuestRemediationScheduleOption.ActionTime", "GuestRemediationScheduleOptionActionTime", "integrity.version.version1", ["Immediate", "Later", "Notification"])
CreateDataType("integrity.HostRemediationScheduleOption", "HostRemediationScheduleOption", "vmodl.DynamicData", "integrity.version.version1", [("updateHostTime", "vmodl.DateTime", "integrity.version.version1", F_OPTIONAL), ("evacuationTimeout", "int", "integrity.version.version1", F_OPTIONAL), ("failureAction", "string", "integrity.version.version1", 0), ("preRemediationPowerAction", "string", "integrity.version.version1", F_OPTIONAL), ("retryDelay", "int", "integrity.version.version1", F_OPTIONAL), ("numberOfRetries", "int", "integrity.version.version1", F_OPTIONAL), ("scheduledTaskName", "string", "integrity.version.version1", F_OPTIONAL), ("scheduledTaskDescription", "string", "integrity.version.version1", F_OPTIONAL), ("disconnectRemovableDevices", "boolean", "integrity.version.version1", F_OPTIONAL), ("disableDpm", "boolean", "integrity.version.version1", F_OPTIONAL), ("disableHac", "boolean", "integrity.version.version1", F_OPTIONAL), ("disableFt", "boolean", "integrity.version.version1", F_OPTIONAL), ("concurrentRemediationInCluster", "boolean", "integrity.version.version1", F_OPTIONAL), ("allowStatelessRemediation", "boolean", "integrity.version.version1", F_OPTIONAL), ("evacuateOfflineVMs", "boolean", "integrity.version.version1", F_OPTIONAL), ("maxHostsForParallelRemediationInCluster", "int", "integrity.version.version1", F_OPTIONAL), ("enableLoadEsx", "boolean", "integrity.version.version1", F_OPTIONAL), ("enableParallelRemediateOfMMHosts", "boolean", "integrity.version.version8", F_OPTIONAL)])
CreateEnumType("integrity.HostRemediationScheduleOption.FailureAction", "HostRemediationScheduleOptionFailureAction", "integrity.version.version1", ["FailTask", "Retry"])
CreateEnumType("integrity.HostRemediationScheduleOption.PreRemediationPowerAction", "HostRemediationScheduleOptionPreRemediationPowerAction", "integrity.version.version1", ["PowerOffVMs", "SuspendVMs", "DoNotChangeVMsPowerState"])
CreateManagedType("integrity.HostUpgradeOptionManager", "HostUpgradeOptionManager", "vmodl.ManagedObject", "integrity.version.version1", None, None)
CreateDataType("integrity.HostUpgradeOptionManager.Options", "HostUpgradeOptionManagerOptions", "vmodl.DynamicData", "integrity.version.version1", [("ignore3rdPartyModules", "boolean", "integrity.version.version1", F_OPTIONAL)])
CreateDataType("integrity.IntegrityDescription", "IntegrityDescription", "vmodl.DynamicData", "integrity.version.version1", [("reasonCode", "integrity.VumElementDescription[]", "integrity.version.version1", 0), ("complianceStatus", "integrity.VumElementDescription[]", "integrity.version.version1", 0), ("contentType", "integrity.VumElementDescription[]", "integrity.version.version1", 0), ("updateStatus", "integrity.VumElementDescription[]", "integrity.version.version1", 0), ("impactLevel", "integrity.VumElementDescription[]", "integrity.version.version1", 0), ("hostUpdateCategory", "integrity.VumElementDescription[]", "integrity.version.version1", 0), ("guestActionTime", "integrity.VumElementDescription[]", "integrity.version.version1", 0), ("hostFailureAction", "integrity.VumElementDescription[]", "integrity.version.version1", 0), ("preRemediationPowerAction", "integrity.VumElementDescription[]", "integrity.version.version1", 0), ("updateType", "integrity.VumElementDescription[]", "integrity.version.version1", 0), ("updateTargetType", "integrity.VumElementDescription[]", "integrity.version.version1", 0), ("baselineType", "integrity.VumElementDescription[]", "integrity.version.version1", 0), ("baselineAttribute", "integrity.VumElementDescription[]", "integrity.version.version1", 0), ("acceptanceLevel", "integrity.VumElementDescription[]", "integrity.version.version1", 0)])
CreateDataType("integrity.NewUpdateConfigSpec", "NewUpdateConfigSpec", "vmodl.DynamicData", "integrity.version.version1", [("enabled", "boolean", "integrity.version.version1", 0), ("name", "string", "integrity.version.version1", 0), ("description", "string", "integrity.version.version1", 0), ("newUpdateScheduler", "integrity.Scheduler", "integrity.version.version1", F_OPTIONAL), ("useSmartDownload", "boolean", "integrity.version.version1", F_OPTIONAL), ("emailNotificationList", "string", "integrity.version.version1", F_OPTIONAL)])
CreateDataType("integrity.PatchBundleDetail", "PatchBundleDetail", "vmodl.DynamicData", "integrity.version.version1", [("description", "string", "integrity.version.version1", 0), ("updates", "integrity.SoftwareUpdateInfo[]", "integrity.version.version1", F_OPTIONAL)])
CreateDataType("integrity.PatchRecallDetailInfo", "PatchRecallDetailInfo", "vmodl.DynamicData", "integrity.version.version1", [("affectedBaselines", "integrity.BaselineManager.UpdateBaselinesGroup[]", "integrity.version.version1", F_OPTIONAL), ("affectedHosts", "vim.ManagedEntity[]", "integrity.version.version1", F_OPTIONAL), ("recalledIDs", "int[]", "integrity.version.version1", F_OPTIONAL), ("resolutions", "integrity.RecallFixDetail[]", "integrity.version.version1", F_OPTIONAL)])
CreateDataType("integrity.PlatformInfo", "PlatformInfo", "vmodl.DynamicData", "integrity.version.version1", [("family", "string", "integrity.version.version1", 0), ("displayName", "string", "integrity.version.version1", 0), ("version", "string", "integrity.version.version1", 0), ("locale", "string", "integrity.version.version1", 0)])
CreateEnumType("integrity.PlatformInfo.OsFamily", "PlatformInfoOsFamily", "integrity.version.version1", ["NO_OS", "WINDOWS", "LINUX", "ESX", "EESX", "OTHER", "ESXIO_ARM"])
CreateDataType("integrity.RecallFixDetail", "RecallFixDetail", "vmodl.DynamicData", "integrity.version.version1", [("recallID", "int", "integrity.version.version1", F_OPTIONAL), ("recallResolutions", "int[]", "integrity.version.version1", F_OPTIONAL)])
CreateManagedType("integrity.ScheduledTaskManager", "IntegrityScheduledTaskManager", "vmodl.ManagedObject", "integrity.version.version1", None, [("create", "CreateScheduledIntegrityTask", "integrity.version.version1", (("target", "vmodl.ManagedObject", "integrity.version.version1", 0, None),("spec", "vim.scheduler.ScheduledTaskSpec", "integrity.version.version1", 0, None),), (0, "vim.scheduler.ScheduledTask", "vim.scheduler.ScheduledTask"), "ScheduledTask.Create", ["vim.fault.InvalidName", "vim.fault.DuplicateName", "vmodl.fault.InvalidArgument", ]), ("get", "GetScheduledIntegrityTask", "integrity.version.version1", (("task", "vim.scheduler.ScheduledTask", "integrity.version.version1", 0, None),), (0, "vim.scheduler.ScheduledTaskInfo", "vim.scheduler.ScheduledTaskInfo"), "System.View", None), ("getScheduledDownloadTaskInfo", "GetScheduledDownloadTaskInfo", "integrity.version.version1", (), (F_OPTIONAL, "vim.scheduler.ScheduledTaskInfo", "vim.scheduler.ScheduledTaskInfo"), "System.View", None), ("getScheduledNotificationTaskInfo", "GetScheduledNotificationTaskInfo", "integrity.version.version1", (), (F_OPTIONAL, "vim.scheduler.ScheduledTaskInfo", "vim.scheduler.ScheduledTaskInfo"), "System.View", None), ("reconfigure", "ReconfigureScheduledIntegrityTask", "integrity.version.version1", (("task", "vim.scheduler.ScheduledTask", "integrity.version.version1", 0, None),("spec", "vim.scheduler.ScheduledTaskSpec", "integrity.version.version1", 0, None),), (0, "void", "void"), "ScheduledTask.Edit", ["vim.fault.InvalidState", "vim.fault.InvalidName", "vim.fault.DuplicateName", "vmodl.fault.InvalidArgument", ])])
CreateDataType("integrity.Scheduler", "Scheduler", "vmodl.DynamicData", "integrity.version.version1", [("activeTime", "vmodl.DateTime", "integrity.version.version1", F_OPTIONAL), ("expireTime", "vmodl.DateTime", "integrity.version.version1", F_OPTIONAL)])
CreateManagedType("integrity.SessionManager", "IntegritySessionManager", "vmodl.ManagedObject", "integrity.version.version1", [("locale", "string", "integrity.version.version1", 0, "System.Anonymous"), ("messageLocaleList", "string[]", "integrity.version.version1", F_OPTIONAL, "System.Anonymous"), ("defaultLocale", "string", "integrity.version.version1", 0, "System.Anonymous")], [("login", "VciLogin", "integrity.version.version1", (("userName", "string", "integrity.version.version1", 0, None),("sessionId", "string", "integrity.version.version1", 0, None),("locale", "string", "integrity.version.version1", F_OPTIONAL, None),), (0, "integrity.UserSession", "integrity.UserSession"), "System.Anonymous", ["vim.fault.InvalidLogin", "vim.fault.InvalidLocale", "integrity.fault.IncompatibleVc", ]), ("logout", "VciLogout", "integrity.version.version1", (), (0, "void", "void"), "System.View", None), ("sessionIsActive", "VciCheckSessionActive", "integrity.version.version1", (("sessionID", "string", "integrity.version.version1", 0, None),), (0, "boolean", "boolean"), "System.Anonymous", None), ("loginSuperUser", "VciDVSLoginSuperUser", "integrity.version.version1", (("key", "string", "integrity.version.version1", 0, None),("base64SignedCredentials", "string", "integrity.version.version1", 0, None),("locale", "string", "integrity.version.version1", F_OPTIONAL, None),), (0, "integrity.UserSession", "integrity.UserSession"), "System.Anonymous", ["vim.fault.InvalidLogin", "vim.fault.InvalidLocale", ])])
CreateDataType("integrity.SoftwareUpdate", "SoftwareUpdate", "vmodl.DynamicData", "integrity.version.version1", [("info", "integrity.SoftwareUpdateInfo", "integrity.version.version1", 0), ("detail", "integrity.SoftwareUpdateDetail", "integrity.version.version1", 0)])
CreateDataType("integrity.SoftwareUpdateDetail", "SoftwareUpdateDetail", "vmodl.DynamicData", "integrity.version.version1", [("status", "int", "integrity.version.version1", 0), ("idByVendor", "string[]", "integrity.version.version1", F_OPTIONAL), ("detailsUrl", "string", "integrity.version.version1", F_OPTIONAL), ("description", "string", "integrity.version.version1", 0), ("vendor", "string", "integrity.version.version1", F_OPTIONAL), ("installSeparately", "boolean", "integrity.version.version1", 0), ("affectedComponent", "string[]", "integrity.version.version1", F_OPTIONAL), ("binaryPath", "string", "integrity.version.version1", F_OPTIONAL), ("installFlags", "string", "integrity.version.version1", F_OPTIONAL), ("patchSize", "int", "integrity.version.version1", F_OPTIONAL), ("bugtraqId", "string[]", "integrity.version.version1", F_OPTIONAL), ("cveId", "string[]", "integrity.version.version1", F_OPTIONAL)])
CreateDataType("integrity.SoftwareUpdateInfo", "SoftwareUpdateInfo", "vmodl.DynamicData", "integrity.version.version1", [("key", "int", "integrity.version.version1", 0), ("idByVendor", "string", "integrity.version.version1", F_OPTIONAL), ("releaseDate", "vmodl.DateTime", "integrity.version.version1", F_OPTIONAL), ("title", "string", "integrity.version.version1", 0), ("language", "string", "integrity.version.version1", 0), ("updateType", "string", "integrity.version.version1", 0), ("severity", "string", "integrity.version.version1", 0), ("os", "integrity.PlatformInfo[]", "integrity.version.version1", F_OPTIONAL), ("targetType", "string", "integrity.version.version1", 0), ("bundleType", "string", "integrity.version.version1", F_OPTIONAL), ("installationImpact", "string[]", "integrity.version.version1", F_OPTIONAL), ("lastUpdateTime", "vmodl.DateTime", "integrity.version.version1", F_OPTIONAL), ("vendor", "string", "integrity.version.version1", F_OPTIONAL), ("recalled", "boolean", "integrity.version.version1", F_OPTIONAL), ("hostUpdateCategory", "string", "integrity.version.version1", F_OPTIONAL)])
CreateEnumType("integrity.SoftwareUpdateInfo.UpdateType", "SoftwareUpdateInfoUpdateType", "integrity.version.version1", ["Other", "OperatingSystem", "Security"])
CreateEnumType("integrity.SoftwareUpdateInfo.ImpactLevel", "SoftwareUpdateInfoImpactLevel", "integrity.version.version1", ["Low", "Moderate", "Important", "Critical"])
CreateEnumType("integrity.SoftwareUpdateInfo.TargetType", "SoftwareUpdateInfoTargetType", "integrity.version.version1", ["VM", "HOST", "VA"])
CreateEnumType("integrity.SoftwareUpdateInfo.TargetComponent", "SoftwareUpdateInfoTargetComponent", "integrity.version.version1", ["HOST_GENERAL", "HOST_THIRDPARTY", "VM_GENERAL", "VM_TOOLS", "VM_HARDWAREVERSION", "VA_GENERAL"])
CreateEnumType("integrity.SoftwareUpdateInfo.HostUpdateCategory", "SoftwareUpdateInfoHostUpdateCategory", "integrity.version.version1", ["SecurityFix", "BugFix", "Enhancement", "Recall", "RecallFix", "Info", "Misc"])
CreateDataType("integrity.SoftwareUpdateURL", "SoftwareUpdateURL", "vmodl.DynamicData", "integrity.version.version1", [("url", "string", "integrity.version.version1", 0), ("description", "string", "integrity.version.version1", 0), ("systemDefined", "boolean", "integrity.version.version1", 0), ("urlTypes", "string[]", "integrity.version.version1", 0), ("enabled", "boolean", "integrity.version.version1", 0)])
CreateEnumType("integrity.SoftwareUpdateURL.URLType", "SoftwareUpdateURLURLType", "integrity.version.version1", ["VMWindowsPatches", "VMUnixPatches", "ESX3xHostPatches", "ESX4xHostPatches", "ThirdPartyHostPatches", "VAUpgrades", "ThirdPartyVAUpgrades", "IntranetPatchSource", "Unknown"])
CreateManagedType("integrity.StatusCollector", "StatusCollector", "integrity.Disposable", "integrity.version.version1", [("entity", "vim.ManagedEntity", "integrity.version.version1", 0, None)], [("remove", "RemoveStatusCollector", "integrity.version.version1", (), (0, "void", "void"), "VcIntegrity.Updates.com.vmware.vcIntegrity.ViewStatus", None)])
CreateDataType("integrity.URLTestResult", "URLTestResult", "vmodl.DynamicData", "integrity.version.version1", [("url", "string", "integrity.version.version1", 0), ("testResult", "boolean", "integrity.version.version1", 0), ("urlTypes", "string[]", "integrity.version.version1", F_OPTIONAL), ("reason", "vmodl.LocalizableMessage", "integrity.version.version1", F_OPTIONAL)])
CreateDataType("integrity.UpdateBaselineInfo", "UpdateBaselineInfo", "integrity.BaselineInfo", "integrity.version.version1", [("numberOfUpdates", "int", "integrity.version.version1", 0)])
CreateDataType("integrity.UpdateBaselineSpec", "UpdateBaselineSpec", "integrity.BaselineSpec", "integrity.version.version1", [("updates", "integrity.BaselineSoftwareUpdates", "integrity.version.version1", F_OPTIONAL)])
CreateDataType("integrity.UpdateComplianceStatus", "UpdateComplianceStatus", "integrity.BasicComplianceStatus", "integrity.version.version1", None)
CreateDataType("integrity.UpdateComplianceStatusReport", "UpdateComplianceStatusReport", "vmodl.DynamicData", "integrity.version.version1", [("lastScanTime", "vmodl.DateTime", "integrity.version.version1", F_OPTIONAL), ("detailStatuses", "integrity.UpdateComplianceStatus[]", "integrity.version.version1", F_OPTIONAL)])
CreateDataType("integrity.UpgradeBaselineInfo", "UpgradeBaselineInfo", "integrity.BaselineInfo", "integrity.version.version1", None)
CreateDataType("integrity.UpgradeBaselineSpec", "UpgradeBaselineSpec", "integrity.BaselineSpec", "integrity.version.version1", [("upgradeTo", "string", "integrity.version.version1", F_OPTIONAL), ("upgradeToVersion", "string", "integrity.version.version1", 0)])
CreateDataType("integrity.UpgradeComplianceStatus", "UpgradeComplianceStatus", "integrity.BasicComplianceStatus", "integrity.version.version1", [("currentVersion", "string", "integrity.version.version1", F_OPTIONAL)])
CreateDataType("integrity.UpgradeComplianceStatusReport", "UpgradeComplianceStatusReport", "vmodl.DynamicData", "integrity.version.version1", [("lastScanTime", "vmodl.DateTime", "integrity.version.version1", F_OPTIONAL), ("detailStatuses", "integrity.UpgradeComplianceStatus[]", "integrity.version.version1", F_OPTIONAL)])
CreateManagedType("integrity.UpgradeProductManager", "UpgradeProductManager", "vmodl.ManagedObject", "integrity.version.version1", [("availableProduct", "integrity.UpgradeProductManager.UpgradeProduct[]", "integrity.version.version1", F_OPTIONAL, "System.View")], [("queryAvailableProducts", "QueryAvailableProducts", "integrity.version.version1", (("productType", "string", "integrity.version.version1", 0, None),), (0, "integrity.UpgradeProductManager.UpgradeProduct[]", "integrity.UpgradeProductManager.UpgradeProduct[]"), "System.View", ["vim.fault.DatabaseError", "integrity.fault.VcIntegrityFault", "vmodl.fault.InvalidArgument", ]), ("deleteUpgradeProduct", "DeleteUpgradeProduct", "integrity.version.version1", (("key", "string", "integrity.version.version1", 0, None),), (0, "void", "void"), "VcIntegrity.Baseline.com.vmware.vcIntegrity.ManageBaselines", ["vim.fault.DatabaseError", "vim.fault.NotFound", "integrity.fault.BaselinesAttachedToRelease", ])])
CreateEnumType("integrity.UpgradeProductManager.UpgradeProductType", "UpgradeProductManagerUpgradeProductType", "integrity.version.version1", ["Host", "VirtualAppliance", "VirtualMachineHardware", "VirtualMachineTools"])
CreateEnumType("integrity.UpgradeProductManager.AcceptanceLevel", "UpgradeProductManagerAcceptanceLevel", "integrity.version.version1", ["Certified", "Accepted", "Partner", "Community"])
CreateDataType("integrity.UpgradeProductManager.SoftwarePackage", "UpgradeProductManagerSoftwarePackage", "vmodl.DynamicData", "integrity.version.version1", [("name", "string", "integrity.version.version1", F_OPTIONAL), ("vendor", "string", "integrity.version.version1", F_OPTIONAL), ("version", "string", "integrity.version.version1", F_OPTIONAL), ("size", "int", "integrity.version.version1", F_OPTIONAL), ("acceptanceLevel", "string", "integrity.version.version1", F_OPTIONAL), ("dateOfRelease", "vmodl.DateTime", "integrity.version.version1", F_OPTIONAL)])
CreateDataType("integrity.UpgradeProductManager.UpgradeProduct", "UpgradeProductManagerUpgradeProduct", "vmodl.DynamicData", "integrity.version.version1", [("type", "string", "integrity.version.version1", 0), ("key", "string", "integrity.version.version1", 0), ("name", "string", "integrity.version.version1", 0), ("vendor", "string", "integrity.version.version1", F_OPTIONAL), ("edition", "string", "integrity.version.version1", F_OPTIONAL), ("version", "string", "integrity.version.version1", F_OPTIONAL), ("locale", "string", "integrity.version.version1", F_OPTIONAL), ("build", "long", "integrity.version.version1", F_OPTIONAL), ("profileName", "string", "integrity.version.version1", F_OPTIONAL), ("dateOfRelease", "vmodl.DateTime", "integrity.version.version1", F_OPTIONAL), ("digest", "string", "integrity.version.version1", F_OPTIONAL), ("acceptanceLevel", "string", "integrity.version.version1", F_OPTIONAL), ("softwarePackages", "integrity.UpgradeProductManager.SoftwarePackage[]", "integrity.version.version1", F_OPTIONAL), ("family", "string", "integrity.version.version1", F_OPTIONAL), ("path", "string", "integrity.version.version1", F_OPTIONAL), ("upgradeReleaseKey", "string", "integrity.version.version1", F_OPTIONAL)])
CreateManagedType("integrity.UpgradeReleaseManager", "UpgradeReleaseManager", "vmodl.ManagedObject", "integrity.version.version1", [("availableReleases", "integrity.UpgradeReleaseManager.UpgradeRelease[]", "integrity.version.version1", F_OPTIONAL, "System.View")], [("upgradeProductsForRelease", "UpgradeProductsForRelease", "integrity.version.version1", (("key", "string", "integrity.version.version1", 0, None),), (0, "integrity.UpgradeProductManager.UpgradeProduct[]", "integrity.UpgradeProductManager.UpgradeProduct[]"), "System.View", ["vmodl.fault.InvalidArgument", ]), ("getUpgradeRelease", "GetUpgradeRelease", "integrity.version.version1", (("key", "string", "integrity.version.version1", 0, None),), (0, "integrity.UpgradeReleaseManager.UpgradeRelease", "integrity.UpgradeReleaseManager.UpgradeRelease"), "System.View", ["vmodl.fault.InvalidArgument", ]), ("checkAndGet", "CheckAndGet", "integrity.version.version1", (("productKeys", "string[]", "integrity.version.version1", 0, None),), (0, "integrity.UpgradeReleaseManager.UpgradeRelease", "integrity.UpgradeReleaseManager.UpgradeRelease"), "System.View", ["vmodl.fault.InvalidArgument", "vim.fault.NotFound", ]), ("deleteRelease", "DeleteRelease", "integrity.version.version1", (("key", "string", "integrity.version.version1", 0, None),), (0, "void", "void"), "VcIntegrity.Baseline.com.vmware.vcIntegrity.ManageBaselines", ["integrity.fault.BaselinesAttachedToRelease", "vim.fault.NotFound", "vmodl.fault.InvalidArgument", ])])
CreateDataType("integrity.UpgradeReleaseManager.UpgradeRelease", "UpgradeReleaseManagerUpgradeRelease", "vmodl.DynamicData", "integrity.version.version1", [("key", "string", "integrity.version.version1", 0), ("displayName", "string", "integrity.version.version1", 0)])
CreateDataType("integrity.UserSession", "IntegrityUserSession", "vmodl.DynamicData", "integrity.version.version1", [("key", "string", "integrity.version.version1", 0), ("userName", "string", "integrity.version.version1", 0), ("locale", "string", "integrity.version.version1", F_OPTIONAL)])
CreateManagedType("integrity.VUMTaskManager", "VUMTaskManager", "vmodl.ManagedObject", "integrity.version.version1", None, [("getVUMTaskInfo", "getVUMTaskInfo", "integrity.version.version1", (("taskMO", "vmodl.ManagedObject", "integrity.version.version1", 0, None),), (0, "integrity.VUMTaskManager.VUMTaskInfo", "integrity.VUMTaskManager.VUMTaskInfo"), "System.View", ["vmodl.fault.InvalidArgument", "integrity.fault.NoEntities", ])])
CreateDataType("integrity.VUMTaskManager.VUMTaskInfo", "VUMTaskManagerVUMTaskInfo", "vmodl.DynamicData", "integrity.version.version1", [("vcTask", "vim.Task", "integrity.version.version1", 0), ("result", "anyType", "integrity.version.version1", F_OPTIONAL), ("error", "vmodl.MethodFault", "integrity.version.version1", F_OPTIONAL)])
CreateManagedType("integrity.VcIntegrity", "VcIntegrity", "vmodl.ManagedObject", "integrity.version.version1", [("description", "integrity.IntegrityDescription", "integrity.version.version1", 0, "System.View"), ("config", "integrity.ConfigSpec", "integrity.version.version1", 0, "System.Read"), ("newUpdateConfig", "integrity.NewUpdateConfigSpec", "integrity.version.version1", 0, "System.Read"), ("newNotificationConfig", "integrity.NewUpdateConfigSpec", "integrity.version.version1", 0, "System.Read")], [("setConfig", "SetConfig", "integrity.version.version1", (("config", "integrity.ConfigSpec", "integrity.version.version1", 0, None),), (0, "void", "void"), "VcIntegrity.General.com.vmware.vcIntegrity.Configure", None), ("setNewUpdateConfig", "SetNewUpdateConfig", "integrity.version.version1", (("config", "integrity.NewUpdateConfigSpec", "integrity.version.version1", 0, None),), (0, "void", "void"), "VcIntegrity.General.com.vmware.vcIntegrity.Configure", None), ("setNewNotificationConfig", "SetNewNotificationConfig", "integrity.version.version1", (("config", "integrity.NewUpdateConfigSpec", "integrity.version.version1", 0, None),), (0, "void", "void"), "VcIntegrity.General.com.vmware.vcIntegrity.Configure", None), ("retrieveVcIntegrityContent", "RetrieveVcIntegrityContent", "integrity.version.version1", (), (0, "integrity.VcIntegrityContent", "integrity.VcIntegrityContent"), "System.Anonymous", None), ("retrieveVcIntegrityInternalContent", "RetrieveVcIntegrityInternalContent", "integrity.version.version1", (), (0, "integrity.VcIntegrityInternalContent", "integrity.VcIntegrityInternalContent"), "System.Read", None), ("currentTime", "VcIntegrityCurrentTime", "integrity.version.version1", (), (0, "vmodl.DateTime", "vmodl.DateTime"), "System.View", None), ("retrieveScoreBoardData", "RetrieveScoreBoardData", "integrity.version.version1", (), (0, "string", "string"), "System.Read", None), ("testInternetConnection", "TestInternetConnection", "integrity.version.version1", (("proxyinfo", "string", "integrity.version.version1", 0, None),("urls", "string[]", "integrity.version.version1", F_OPTIONAL, None),), (0, "integrity.VcIntegrity.InternetConnectionResult[]", "integrity.VcIntegrity.InternetConnectionResult[]"), "VcIntegrity.General.com.vmware.vcIntegrity.Configure", None), ("retrieveHostIPAddresses", "RetrieveHostIPAddresses", "integrity.version.version1", (), (0, "string[]", "string[]"), "System.Read", None), ("diagnose", "Diagnose", "integrity.version.version1", (), (0, "string", "string"), "System.View", None), ("refreshConfig", "RefreshConfig", "integrity.version.version1", (), (0, "void", "void"), "System.Read", None), ("probe", "Probe", "integrity.version.version1", (), (0, "void", "void"), "System.Read", None), ("eraseDatabase", "EraseDatabase", "integrity.version.version1", (), (0, "void", "void"), "VcIntegrity.General.com.vmware.vcIntegrity.Configure", None)])
CreateDataType("integrity.VcIntegrity.InternetConnectionResult", "VcIntegrityInternetConnectionResult", "vmodl.DynamicData", "integrity.version.version1", [("url", "string", "integrity.version.version1", 0), ("success", "boolean", "integrity.version.version1", 0), ("errMessage", "string", "integrity.version.version1", F_OPTIONAL)])
CreateDataType("integrity.VcIntegrityContent", "VcIntegrityContent", "vmodl.DynamicData", "integrity.version.version1", [("propertyCollector", "vmodl.query.PropertyCollector", "integrity.version.version1", 0), ("baselineManager", "integrity.BaselineManager", "integrity.version.version1", F_OPTIONAL), ("complianceStatusManager", "integrity.ComplianceStatusManager", "integrity.version.version1", F_OPTIONAL), ("sessionManager", "integrity.SessionManager", "integrity.version.version1", F_OPTIONAL), ("scheduledTaskManager", "integrity.ScheduledTaskManager", "integrity.version.version1", F_OPTIONAL), ("updateManager", "integrity.UpdateManager", "integrity.version.version1", F_OPTIONAL), ("about", "vim.AboutInfo", "integrity.version.version1", 0), ("optionManager", "integrity.option.OptionManager", "integrity.version.version1", F_OPTIONAL), ("baselineGroupManager", "integrity.BaselineGroupManager", "integrity.version.version1", F_OPTIONAL), ("upgradeProductManager", "integrity.UpgradeProductManager", "integrity.version.version1", F_OPTIONAL), ("upgradeReleaseManager", "integrity.UpgradeReleaseManager", "integrity.version.version1", F_OPTIONAL), ("virtApplianceManager", "integrity.VirtApplianceManager", "integrity.version.version1", F_OPTIONAL), ("fileUploadManager", "integrity.FileUploadManager", "integrity.version.version1", F_OPTIONAL), ("taskManager", "integrity.VUMTaskManager", "integrity.version.version1", F_OPTIONAL), ("hostUpgradeOptionManager", "integrity.HostUpgradeOptionManager", "integrity.version.version1", F_OPTIONAL), ("eulaManager", "integrity.EulaManager", "integrity.version.version1", F_OPTIONAL)])
CreateDataType("integrity.VcIntegrityInternalContent", "VcIntegrityInternalContent", "vmodl.DynamicData", "integrity.version.version1", [("dvsManager", "integrity.DVSManager", "integrity.version.version1", F_OPTIONAL)])
CreateDataType("integrity.VcIntegrityOption", "VcIntegrityOption", "vmodl.DynamicData", "integrity.version.version1", [("reason", "string", "integrity.version.version1", F_OPTIONAL), ("targetVm", "boolean", "integrity.version.version1", F_OPTIONAL)])
CreateDataType("integrity.VcIntegrityRemediateOption", "VcIntegrityRemediateOption", "integrity.VcIntegrityOption", "integrity.version.version1", [("guestScheduler", "integrity.GuestRemediationScheduleOption", "integrity.version.version1", F_OPTIONAL), ("guestRollback", "integrity.GuestRemediationRollbackOption", "integrity.version.version1", F_OPTIONAL), ("hostScheduler", "integrity.HostRemediationScheduleOption", "integrity.version.version1", F_OPTIONAL), ("hostUpgradeOptions", "integrity.HostUpgradeOptionManager.Options[]", "integrity.version.version1", F_OPTIONAL), ("entityToolsUpgradeOption", "integrity.EntityToolsUpgradeOption[]", "integrity.version.version1", F_OPTIONAL), ("toolsUpgradeOnPowerCycle", "boolean", "integrity.version.version1", F_OPTIONAL), ("checkHostHealthAfterInstallation", "boolean", "integrity.version.version1", F_OPTIONAL)])
CreateDataType("integrity.VcIntegrityScanOption", "VcIntegrityScanOption", "integrity.VcIntegrityOption", "integrity.version.version1", None)
CreateDataType("integrity.VcIntegrityStageOption", "VcIntegrityStageOption", "integrity.VcIntegrityOption", "integrity.version.version1", None)
CreateDataType("integrity.VirtApplianceInfo", "VirtApplianceInfo", "vmodl.DynamicData", "integrity.version.version1", [("vendorUuid", "string", "integrity.version.version1", 0), ("productRid", "string", "integrity.version.version1", 0), ("vendorName", "string", "integrity.version.version1", 0), ("productName", "string", "integrity.version.version1", 0), ("version", "string", "integrity.version.version1", 0), ("versionString", "string", "integrity.version.version1", 0), ("serialNumber", "string", "integrity.version.version1", 0)])
CreateManagedType("integrity.VirtApplianceManager", "VirtApplianceManager", "vmodl.ManagedObject", "integrity.version.version1", [("anyVendorUuid", "string", "integrity.version.version1", 0, "System.View"), ("anyProductRid", "string", "integrity.version.version1", 0, "System.View"), ("availableVAUpgrades", "integrity.va.VAUpgradeInfo[]", "integrity.version.version1", F_OPTIONAL, "System.View")], [("IsVirtualAppliance", "IsVirtualAppliance", "integrity.version.version1", (("entity", "vim.ManagedEntity", "integrity.version.version1", 0, None),), (0, "boolean", "boolean"), "System.Read", None), ("GetVirtualApplianceInfo", "GetVirtualApplianceInfo", "integrity.version.version1", (("entities", "vim.ManagedEntity[]", "integrity.version.version1", 0, None),), (F_OPTIONAL, "integrity.VirtApplianceInfo[]", "integrity.VirtApplianceInfo[]"), "System.Read", None), ("setVirtApplianceInfo", "SetVirtApplianceInfo", "integrity.version.version1", (("vm", "vim.VirtualMachine", "integrity.version.version1", 0, "VcIntegrity.General.com.vmware.vcIntegrity.Configure"),("info", "integrity.VirtApplianceInfo", "integrity.version.version1", F_OPTIONAL, None),), (0, "void", "void"), None, ["vim.fault.NotFound", ])])
CreateDataType("integrity.Vulnerability", "Vulnerability", "vmodl.DynamicData", "integrity.version.version1", None)
CreateDataType("integrity.VumElementDescription", "VumElementDescription", "vmodl.DynamicData", "integrity.version.version1", [("label", "string", "integrity.version.version1", 0), ("summary", "string", "integrity.version.version1", 0), ("key", "string", "integrity.version.version1", 0)])
CreateDataType("integrity.fault.LicenseExpired", "VciLicenseExpired", "vmodl.RuntimeFault", "integrity.version.version1", None)
CreateDataType("integrity.fault.NoLicense", "NoLicense", "vmodl.RuntimeFault", "integrity.version.version1", None)
CreateDataType("integrity.fault.NoVcConnection", "NoVcConnection", "vmodl.RuntimeFault", "integrity.version.version1", [("vcServer", "string", "integrity.version.version1", F_OPTIONAL)])
CreateDataType("integrity.fault.VcIntegrityFault", "VcIntegrityFault", "vmodl.MethodFault", "integrity.version.version1", None)
CreateDataType("integrity.fault.VciDVSFault", "VciDVSFault", "integrity.fault.VcIntegrityFault", "integrity.version.version1", None)
CreateDataType("integrity.fault.VmFtDisabledFault", "VmFtDisabledFault", "integrity.fault.VcIntegrityFault", "integrity.version.version1", [("vm", "string", "integrity.version.version1", 0), ("host", "string", "integrity.version.version1", 0)])
CreateDataType("integrity.fault.VmFtEnabledFault", "VmFtEnabledFault", "integrity.fault.VcIntegrityFault", "integrity.version.version1", [("vm", "string", "integrity.version.version1", 0), ("host", "string", "integrity.version.version1", 0)])
CreateDataType("integrity.fault.VmMigrationFault", "VmMigrationFault", "integrity.fault.VcIntegrityFault", "integrity.version.version1", [("vm", "string", "integrity.version.version1", 0), ("sourceHost", "string", "integrity.version.version1", 0), ("destinationHost", "string", "integrity.version.version1", 0)])
CreateDataType("integrity.fault.VmPowerOrDevicesRestoreFailure", "VmPowerOrDevicesRestoreFailure", "integrity.fault.VcIntegrityFault", "integrity.version.version1", [("cluster", "string", "integrity.version.version1", 0)])
CreateDataType("integrity.fault.VmotionCompatibilityQueryFault", "VmotionCompatibilityQueryFault", "integrity.fault.VcIntegrityFault", "integrity.version.version1", [("vm", "string", "integrity.version.version1", 0), ("destinationHost", "string", "integrity.version.version1", 0)])
CreateDataType("integrity.option.ArrayUpdateSpec", "IntegrityArrayUpdateSpec", "vmodl.DynamicData", "integrity.version.version1", [("operation", "integrity.option.ArrayUpdateSpec.Operation", "integrity.version.version1", 0), ("removeKey", "anyType", "integrity.version.version1", F_OPTIONAL)])
CreateEnumType("integrity.option.ArrayUpdateSpec.Operation", "IntegrityArrayUpdateOperation", "integrity.version.version1", ["add", "remove", "edit"])
CreateDataType("integrity.option.OptionDef", "IntegrityOptionDef", "vmodl.DynamicData", "integrity.version.version1", [("key", "string", "integrity.version.version1", 0), ("optionType", "integrity.option.OptionType", "integrity.version.version1", 0)])
CreateManagedType("integrity.option.OptionManager", "IntegrityOptionManager", "vmodl.ManagedObject", "integrity.version.version1", [("supportedOption", "integrity.option.OptionDef[]", "integrity.version.version1", F_OPTIONAL, "System.View"), ("setting", "integrity.option.OptionValue[]", "integrity.version.version1", F_OPTIONAL, "System.Read"), ("updateURLs", "integrity.SoftwareUpdateURL[]", "integrity.version.version1", F_OPTIONAL, "System.View")], [("queryView", "QueryIntegrityOptions", "integrity.version.version1", (("name", "string[]", "integrity.version.version1", F_OPTIONAL, None),), (F_OPTIONAL, "integrity.option.OptionValue[]", "integrity.option.OptionValue[]"), "System.Read", ["vim.fault.InvalidName", ]), ("updateValue", "UpdateIntegrityOptions", "integrity.version.version1", (("changedValue", "integrity.option.OptionValue[]", "integrity.version.version1", 0, None),), (0, "void", "void"), "VcIntegrity.General.com.vmware.vcIntegrity.Configure", ["vim.fault.InvalidName", ]), ("removeValue", "RemoveIntegrityOptions", "integrity.version.version1", (("valueToRemove", "integrity.option.OptionValue[]", "integrity.version.version1", 0, None),), (0, "void", "void"), "VcIntegrity.General.com.vmware.vcIntegrity.Configure", ["vim.fault.InvalidName", ]), ("setUpdateURLs", "SetUpdateURLs", "integrity.version.version1", (("urlObj", "integrity.SoftwareUpdateURL[]", "integrity.version.version1", 0, None),), (0, "void", "void"), "VcIntegrity.General.com.vmware.vcIntegrity.Configure", ["integrity.fault.OperationNotAllowed", "integrity.fault.ReadOnlyObject", "vmodl.fault.InvalidArgument", ]), ("deleteUpdateURLs", "DeleteUpdateURLs", "integrity.version.version1", (("url", "string[]", "integrity.version.version1", 0, None),), (0, "void", "void"), "VcIntegrity.General.com.vmware.vcIntegrity.Configure", ["integrity.fault.ReadOnlyObject", "vim.fault.InvalidName", "vmodl.fault.InvalidArgument", ]), ("testUpdateURL", "TestUpdateURL", "integrity.version.version1", (("url", "string", "integrity.version.version1", 0, None),("urlType", "string", "integrity.version.version1", 0, None),), (0, "integrity.URLTestResult", "integrity.URLTestResult"), "VcIntegrity.General.com.vmware.vcIntegrity.Configure", ["vmodl.fault.InvalidArgument", ]), ("testUpdateDepotURL", "TestUpdateDepotURL", "integrity.version.version1", (("url", "string", "integrity.version.version1", 0, None),), (0, "integrity.URLTestResult", "integrity.URLTestResult"), "VcIntegrity.General.com.vmware.vcIntegrity.Configure", ["vmodl.fault.InvalidArgument", ]), ("setURLEnabledByType", "SetURLEnabledByType", "integrity.version.version1", (("urlType", "string", "integrity.version.version1", 0, None),("value", "boolean", "integrity.version.version1", 0, None),), (0, "void", "void"), "VcIntegrity.General.com.vmware.vcIntegrity.Configure", ["vmodl.fault.InvalidArgument", "vim.fault.InvalidName", ]), ("setURLEnabledByName", "SetURLEnabledByName", "integrity.version.version1", (("url", "string", "integrity.version.version1", 0, None),("value", "boolean", "integrity.version.version1", 0, None),), (0, "void", "void"), "VcIntegrity.General.com.vmware.vcIntegrity.Configure", ["vim.fault.InvalidName", ])])
CreateDataType("integrity.option.OptionType", "IntegrityOptionType", "vmodl.DynamicData", "integrity.version.version1", [("valueIsReadonly", "boolean", "integrity.version.version1", F_OPTIONAL)])
CreateDataType("integrity.option.OptionValue", "IntegrityOptionValue", "vmodl.DynamicData", "integrity.version.version1", [("key", "string", "integrity.version.version1", 0), ("value", "anyType", "integrity.version.version1", F_OPTIONAL)])
CreateDataType("integrity.option.StringOption", "IntegrityStringOption", "integrity.option.OptionType", "integrity.version.version1", [("defaultValue", "string", "integrity.version.version1", 0), ("validCharacters", "string", "integrity.version.version1", F_OPTIONAL)])
CreateDataType("integrity.va.ProductId", "VaProductId", "vmodl.DynamicData", "integrity.version.version1", [("vendorUuid", "string", "integrity.version.version1", 0), ("productRid", "string", "integrity.version.version1", 0)])
CreateDataType("integrity.va.UpgradeBaselineInfo", "VaUpgradeBaselineInfo", "integrity.BaselineInfo", "integrity.version.version1", None)
CreateDataType("integrity.va.UpgradeBaselineSelector", "VaUpgradeBaselineSelector", "vmodl.DynamicData", "integrity.version.version1", [("productId", "integrity.va.ProductId", "integrity.version.version1", 0), ("action", "string", "integrity.version.version1", 0), ("vendorName", "string", "integrity.version.version1", F_OPTIONAL), ("productName", "string", "integrity.version.version1", F_OPTIONAL), ("version", "string", "integrity.version.version1", F_OPTIONAL), ("typeConstraints", "string[]", "integrity.version.version1", F_OPTIONAL)])
CreateEnumType("integrity.va.UpgradeBaselineSelector.UpgradeAction", "VaUpgradeBaselineSelectorUpgradeAction", "integrity.version.version1", ["DontUpgrade", "Latest", "LatestModerate", "LatestImportant", "LatestCritical", "SpecificVersion"])
CreateDataType("integrity.va.UpgradeBaselineSpec", "VaUpgradeBaselineSpec", "integrity.BaselineSpec", "integrity.version.version1", [("selectors", "integrity.va.UpgradeBaselineSelector[]", "integrity.version.version1", 0)])
CreateDataType("integrity.va.UpgradeProduct", "VaUpgradeProduct", "integrity.UpgradeProductManager.UpgradeProduct", "integrity.version.version1", [("productId", "integrity.va.ProductId", "integrity.version.version1", 0), ("updates", "integrity.SoftwareUpdate[]", "integrity.version.version1", F_OPTIONAL), ("severity", "string", "integrity.version.version1", F_OPTIONAL), ("containsNewSecurityUpdate", "boolean", "integrity.version.version1", F_OPTIONAL), ("releaseDate", "vmodl.DateTime", "integrity.version.version1", F_OPTIONAL)])
CreateDataType("integrity.va.VAChangelog", "VaVAChangelog", "vmodl.DynamicData", "integrity.version.version1", [("description", "string", "integrity.version.version1", 0), ("category", "string", "integrity.version.version1", 0), ("severity", "string", "integrity.version.version1", 0), ("introducedVersion", "string", "integrity.version.version1", F_OPTIONAL), ("referenceType", "string", "integrity.version.version1", 0), ("referenceId", "string", "integrity.version.version1", 0), ("referenceUrl", "string", "integrity.version.version1", F_OPTIONAL), ("affectedVersions", "string", "integrity.version.version1", F_OPTIONAL)])
CreateEnumType("integrity.va.VAChangelog.CategoryType", "VaVAChangelogCategoryType", "integrity.version.version1", ["Feature", "Security", "Fix"])
CreateEnumType("integrity.va.VAChangelog.SeverityType", "VaVAChangelogSeverityType", "integrity.version.version1", ["Low", "Moderate", "Important", "Critical"])
CreateDataType("integrity.va.VAUpgradeInfo", "VaVAUpgradeInfo", "vmodl.DynamicData", "integrity.version.version1", [("key", "int", "integrity.version.version1", 0), ("productId", "integrity.va.ProductId", "integrity.version.version1", 0), ("vendorName", "string", "integrity.version.version1", 0), ("productName", "string", "integrity.version.version1", 0), ("version", "string", "integrity.version.version1", 0), ("versionString", "string", "integrity.version.version1", 0), ("releaseDate", "vmodl.DateTime", "integrity.version.version1", 0), ("summary", "string", "integrity.version.version1", 0), ("contact", "string", "integrity.version.version1", F_OPTIONAL), ("changeLog", "integrity.va.VAChangelog[]", "integrity.version.version1", F_OPTIONAL), ("eulaStatus", "integrity.EulaManager.EulaStatus", "integrity.version.version1", 0)])
CreateDataType("integrity.AfterStartupScheduler", "AfterStartupScheduler", "integrity.Scheduler", "integrity.version.version1", [("minute", "int", "integrity.version.version1", 0)])
CreateManagedType("integrity.BaselineComplianceStatusCollector", "BaselineComplianceStatusCollector", "integrity.StatusCollector", "integrity.version.version1", [("status", "integrity.BaselineComplianceStatus[]", "integrity.version.version1", F_OPTIONAL, None), ("groupStatus", "integrity.BaselineGroupComplianceStatus[]", "integrity.version.version1", F_OPTIONAL, None)], None)
CreateDataType("integrity.ConfigSpec", "ConfigSpec", "vmodl.DynamicData", "integrity.version.version1", [("guestRemediationRollbackOption", "integrity.GuestRemediationRollbackOption", "integrity.version.version1", 0), ("hostRemediationScheduleOption", "integrity.HostRemediationScheduleOption", "integrity.version.version1", 0), ("hostUpgradeOptions", "integrity.HostUpgradeOptionManager.Options[]", "integrity.version.version1", 0)])
CreateManagedType("integrity.DetailedComplianceStatusCollector", "DetailedComplianceStatusCollector", "integrity.StatusCollector", "integrity.version.version1", [("baseline", "int[]", "integrity.version.version1", 0, None)], None)
CreateDataType("integrity.HostUpgradeBaselineInfo", "HostUpgradeBaselineInfo", "integrity.UpgradeBaselineInfo", "integrity.version.version1", None)
CreateDataType("integrity.HostUpgradeBaselineSpec", "HostUpgradeBaselineSpec", "integrity.UpgradeBaselineSpec", "integrity.version.version1", [("upgradeReleaseKey", "string", "integrity.version.version1", 0)])
CreateDataType("integrity.MissingUpdate", "MissingUpdate", "integrity.Vulnerability", "integrity.version.version1", [("reason", "string[]", "integrity.version.version1", F_OPTIONAL), ("update", "integrity.SoftwareUpdateInfo", "integrity.version.version1", 0), ("remediationStatus", "int", "integrity.version.version1", 0)])
CreateEnumType("integrity.MissingUpdate.ReasonCode", "MissingUpdateReasonCode", "integrity.version.version1", ["fileOutOfDate", "regOutOfDate"])
CreateDataType("integrity.NotificationInfo", "NotificationInfo", "integrity.SoftwareUpdateInfo", "integrity.version.version1", [("notificationContent", "string", "integrity.version.version1", F_OPTIONAL), ("isHTML", "boolean", "integrity.version.version1", 0)])
CreateDataType("integrity.OnceScheduler", "OnceScheduler", "integrity.Scheduler", "integrity.version.version1", [("runAt", "vmodl.DateTime", "integrity.version.version1", F_OPTIONAL)])
CreateDataType("integrity.RecurrentScheduler", "RecurrentScheduler", "integrity.Scheduler", "integrity.version.version1", [("interval", "int", "integrity.version.version1", 0)])
CreateDataType("integrity.ServicePackDetail", "ServicePackDetail", "integrity.SoftwareUpdateDetail", "integrity.version.version1", [("spId", "int", "integrity.version.version1", 0)])
CreateManagedType("integrity.UpdateComplianceStatusCollector", "UpdateComplianceStatusCollector", "integrity.DetailedComplianceStatusCollector", "integrity.version.version1", [("status", "integrity.UpdateComplianceStatus[]", "integrity.version.version1", F_OPTIONAL, None), ("statusReport", "integrity.UpdateComplianceStatusReport", "integrity.version.version1", F_OPTIONAL, None)], None)
CreateManagedType("integrity.UpdateManager", "UpdateManager", "vmodl.ManagedObject", "integrity.version.version1", [("supportedUpdateLanguage", "integrity.VumElementDescription[]", "integrity.version.version1", F_OPTIONAL, "System.View"), ("supportedUpdateProduct", "integrity.UpdateManager.UpdateManagerProductDescription[]", "integrity.version.version1", F_OPTIONAL, "System.View"), ("update", "integrity.SoftwareUpdateInfo[]", "integrity.version.version1", F_OPTIONAL, "System.View"), ("hostUpdate", "integrity.SoftwareUpdateInfo[]", "integrity.version.version1", F_OPTIONAL, "System.View"), ("notification", "integrity.NotificationInfo[]", "integrity.version.version1", F_OPTIONAL, "System.View"), ("updateVendors", "integrity.VumElementDescription[]", "integrity.version.version1", F_OPTIONAL, "System.Read"), ("updateBundleTypes", "integrity.VumElementDescription[]", "integrity.version.version1", F_OPTIONAL, "System.Read"), ("updateInstallationImpacts", "integrity.VumElementDescription[]", "integrity.version.version1", F_OPTIONAL, "System.Read")], [("downloadUpdateSignatures", "DownloadUpdateSignatures_Task", "integrity.version.version1", (("language", "string[]", "integrity.version.version1", F_OPTIONAL, None),), (F_OPTIONAL, "vim.Task", "int[]"), "VcIntegrity.General.com.vmware.vcIntegrity.Configure", ["integrity.fault.NoSignatureSiteConnection", "integrity.fault.MetadataDownloadFailure", ]), ("retrieveVAFile", "RetrieveVAFile", "integrity.version.version1", (("relativePath", "string", "integrity.version.version1", 0, None),), (0, "string", "string"), "VcIntegrity.General.com.vmware.vcIntegrity.Configure", ["vim.fault.NotFound", "integrity.fault.FileDownloadFailure", ]), ("checkNotifications", "CheckNotifications_Task", "integrity.version.version1", (("language", "string[]", "integrity.version.version1", F_OPTIONAL, None),), (F_OPTIONAL, "vim.Task", "int[]"), "VcIntegrity.General.com.vmware.vcIntegrity.Configure", ["integrity.fault.NoSignatureSiteConnection", "integrity.fault.MetadataDownloadFailure", ]), ("getPatchRecallDetailInfo", "GetPatchRecallDetailInfo", "integrity.version.version1", (("recallID", "int", "integrity.version.version1", 0, None),), (F_OPTIONAL, "integrity.PatchRecallDetailInfo", "integrity.PatchRecallDetailInfo"), "System.View", None), ("allowLiveVibInstall", "AllowLiveVibInstall", "integrity.version.version1", (("hostMoId", "vim.ManagedEntity", "integrity.version.version1", F_OPTIONAL, None),), (0, "boolean", "boolean"), "System.View", None), ("searchUpdate", "SearchUpdate", "integrity.version.version1", (("spec", "integrity.UpdateManager.SearchSpec", "integrity.version.version1", 0, None),), (F_OPTIONAL, "int[]", "int[]"), "System.Read", ["integrity.fault.TooManyUpdatesFault", ]), ("getSoftwareUpdate", "GetSoftwareUpdate", "integrity.version.version1", (("updateId", "int[]", "integrity.version.version1", 0, None),), (0, "integrity.SoftwareUpdate[]", "integrity.SoftwareUpdate[]"), "System.Read", None), ("getSupportedEsxiVersions", "GetSupportedEsxiVersions", "integrity.version.version1", (), (F_OPTIONAL, "string[]", "string[]"), "System.Read", None), ("deleteUpdatePackage", "DeleteUpdatePackage", "integrity.version.version1", (("updateId", "int", "integrity.version.version1", 0, None),), (0, "void", "void"), "VcIntegrity.General.com.vmware.vcIntegrity.Configure", ["vim.fault.NotFound", ]), ("scan", "Scan_Task", "integrity.version.version1", (("entity", "vim.ManagedEntity[]", "integrity.version.version1", 0, "VcIntegrity.Updates.com.vmware.vcIntegrity.Scan"),("spec", "integrity.UpdateManager.ScanSpec", "integrity.version.version1", 0, None),), (0, "vim.Task", "void"), None, ["vmodl.fault.InvalidArgument", "integrity.fault.ScanFailure", "integrity.fault.NoEntities", "integrity.fault.EnterMaintenanceModeFailure", ]), ("stage", "Stage_Task", "integrity.version.version1", (("entity", "vim.ManagedEntity[]", "integrity.version.version1", 0, "VcIntegrity.Updates.com.vmware.vcIntegrity.Stage"),("leafEntity", "vim.ManagedEntity[]", "integrity.version.version1", F_OPTIONAL, None),("spec", "integrity.UpdateManager.StageSpec", "integrity.version.version1", 0, None),), (0, "vim.Task", "void"), None, ["vmodl.fault.InvalidArgument", "integrity.fault.StageFailure", "integrity.fault.NoEntities", ]), ("remediate", "Remediate_Task", "integrity.version.version1", (("entity", "vim.ManagedEntity[]", "integrity.version.version1", 0, "VcIntegrity.Updates.com.vmware.vcIntegrity.Remediate"),("leafEntity", "vim.ManagedEntity[]", "integrity.version.version1", F_OPTIONAL, None),("spec", "integrity.UpdateManager.RemediationSpec", "integrity.version.version1", 0, None),), (0, "vim.Task", "void"), None, ["vmodl.fault.InvalidArgument", "integrity.fault.RemediateFailure", "integrity.fault.NoEntities", ]), ("configureToolsUpgrade", "ConfigureToolsUpgrade_Task", "integrity.version.version1", (("entity", "vim.ManagedEntity[]", "integrity.version.version1", 0, "VcIntegrity.Updates.com.vmware.vcIntegrity.Remediate"),("leafEntity", "vim.ManagedEntity[]", "integrity.version.version1", F_OPTIONAL, None),("spec", "integrity.UpdateManager.RemediationSpec", "integrity.version.version1", 0, None),), (0, "vim.Task", "void"), None, ["vmodl.fault.InvalidArgument", "integrity.fault.NoEntities", ]), ("configureToolsUpgradeOption", "ConfigureToolsUpgradeOption_Task", "integrity.version.version1", (("entity", "vim.ManagedEntity[]", "integrity.version.version1", 0, "VcIntegrity.Updates.com.vmware.vcIntegrity.Remediate"),("spec", "integrity.UpdateManager.RemediationSpec", "integrity.version.version1", 0, None),), (0, "vim.Task", "void"), None, ["vmodl.fault.InvalidArgument", "integrity.fault.NoEntities", ]), ("remediatePrecheck", "RemediatePrecheck_Task", "integrity.version.version1", (("entity", "vim.ManagedEntity[]", "integrity.version.version1", 0, "VcIntegrity.Updates.com.vmware.vcIntegrity.Remediate"),), (0, "vim.Task", "void"), None, ["vmodl.fault.InvalidArgument", "integrity.fault.NoEntities", ]), ("getRemediatePrecheckSummary", "GetRemediatePrecheckSummary", "integrity.version.version1", (("entity", "vim.ManagedEntity", "integrity.version.version1", 0, "VcIntegrity.Updates.com.vmware.vcIntegrity.ViewStatus"),), (0, "integrity.UpdateManager.PrecheckResultsSummary", "integrity.UpdateManager.PrecheckResultsSummary"), None, ["vmodl.fault.ManagedObjectNotFound", "integrity.fault.NoEntities", ])])
CreateDataType("integrity.UpdateManager.SearchSpec", "UpdateManagerSearchSpec", "vmodl.DynamicData", "integrity.version.version1", [("searchPhrases", "string", "integrity.version.version1", F_OPTIONAL), ("language", "string[]", "integrity.version.version1", F_OPTIONAL), ("updateType", "string[]", "integrity.version.version1", F_OPTIONAL), ("hostUpdateCategory", "string[]", "integrity.version.version1", F_OPTIONAL), ("severity", "string[]", "integrity.version.version1", F_OPTIONAL), ("vendor", "string[]", "integrity.version.version1", F_OPTIONAL), ("product", "string[]", "integrity.version.version1", F_OPTIONAL), ("targetType", "string[]", "integrity.version.version1", F_OPTIONAL), ("startTime", "vmodl.DateTime", "integrity.version.version1", F_OPTIONAL), ("endTime", "vmodl.DateTime", "integrity.version.version1", F_OPTIONAL), ("failOnTooManyUpdates", "boolean", "integrity.version.version1", 0)])
CreateDataType("integrity.UpdateManager.ScanType", "UpdateManagerScanType", "vmodl.DynamicData", "integrity.version.version1", [("type", "string", "integrity.version.version1", 0), ("targetComponent", "string", "integrity.version.version1", 0)])
CreateDataType("integrity.UpdateManager.ScanSpec", "UpdateManagerScanSpec", "vmodl.DynamicData", "integrity.version.version1", [("scanTypes", "integrity.UpdateManager.ScanType[]", "integrity.version.version1", 0), ("baselinegroup", "int", "integrity.version.version1", F_OPTIONAL), ("baselineId", "int[]", "integrity.version.version1", F_OPTIONAL), ("updateId", "int[]", "integrity.version.version1", F_OPTIONAL), ("option", "integrity.VcIntegrityScanOption", "integrity.version.version1", F_OPTIONAL)])
CreateDataType("integrity.UpdateManager.StageSpec", "UpdateManagerStageSpec", "vmodl.DynamicData", "integrity.version.version1", [("baselineGroupUnit", "integrity.UpdateManager.BaselineGroupUnit", "integrity.version.version1", F_OPTIONAL), ("baselineId", "int[]", "integrity.version.version1", F_OPTIONAL), ("excludedUpdateId", "int[]", "integrity.version.version1", F_OPTIONAL), ("option", "integrity.VcIntegrityStageOption", "integrity.version.version1", 0)])
CreateDataType("integrity.UpdateManager.BaselineGroupUnit", "UpdateManagerBaselineGroupUnit", "vmodl.DynamicData", "integrity.version.version1", [("baselinegroup", "int", "integrity.version.version1", 0), ("baselineSubSet", "int[]", "integrity.version.version1", F_OPTIONAL)])
CreateDataType("integrity.UpdateManager.RemediationSpec", "UpdateManagerRemediationSpec", "vmodl.DynamicData", "integrity.version.version1", [("baselineGroupUnit", "integrity.UpdateManager.BaselineGroupUnit", "integrity.version.version1", F_OPTIONAL), ("baselineId", "int[]", "integrity.version.version1", F_OPTIONAL), ("excludedUpdateId", "int[]", "integrity.version.version1", F_OPTIONAL), ("option", "integrity.VcIntegrityRemediateOption", "integrity.version.version1", 0)])
CreateDataType("integrity.UpdateManager.PrecheckResult", "UpdateManagerPrecheckResult", "vmodl.DynamicData", "integrity.version.version1", [("cluster", "string", "integrity.version.version1", 0), ("host", "string", "integrity.version.version1", F_OPTIONAL), ("vm", "string", "integrity.version.version1", F_OPTIONAL), ("problems", "vmodl.LocalizableMessage[]", "integrity.version.version1", 0), ("resolutions", "vmodl.LocalizableMessage[]", "integrity.version.version1", 0)])
CreateDataType("integrity.UpdateManager.PrecheckResults", "UpdateManagerPrecheckResults", "vmodl.DynamicData", "integrity.version.version1", [("results", "integrity.UpdateManager.PrecheckResult[]", "integrity.version.version1", F_OPTIONAL)])
CreateDataType("integrity.UpdateManager.RemediateIssuesSummary", "UpdateManagerRemediateIssuesSummary", "vmodl.DynamicData", "integrity.version.version1", [("noOfClusterIssues", "int", "integrity.version.version1", 0), ("noOfClusters", "int", "integrity.version.version1", 0), ("noOfVMIssues", "int", "integrity.version.version1", 0), ("noOfVMs", "int", "integrity.version.version1", 0), ("noOfHostsWithVMIssues", "int", "integrity.version.version1", 0)])
CreateDataType("integrity.UpdateManager.PrecheckResultsSummary", "UpdateManagerPrecheckResultsSummary", "vmodl.DynamicData", "integrity.version.version1", [("entity", "vim.ManagedEntity", "integrity.version.version1", 0), ("time", "vmodl.DateTime", "integrity.version.version1", F_OPTIONAL), ("blockingIssues", "integrity.UpdateManager.RemediateIssuesSummary", "integrity.version.version1", F_OPTIONAL), ("nonBlockingIssues", "integrity.UpdateManager.RemediateIssuesSummary", "integrity.version.version1", F_OPTIONAL)])
CreateDataType("integrity.UpdateManager.UpdateManagerProductDescription", "UpdateManagerUpdateManagerProductDescription", "integrity.VumElementDescription", "integrity.version.version1", [("targetType", "string", "integrity.version.version1", 0), ("vendor", "string", "integrity.version.version1", 0)])
CreateManagedType("integrity.UpgradeComplianceStatusCollector", "UpgradeComplianceStatusCollector", "integrity.DetailedComplianceStatusCollector", "integrity.version.version1", [("status", "integrity.UpgradeComplianceStatus[]", "integrity.version.version1", F_OPTIONAL, None), ("statusReport", "integrity.UpgradeComplianceStatusReport", "integrity.version.version1", F_OPTIONAL, None)], None)
CreateDataType("integrity.UpgradePackageDetail", "UpgradePackageDetail", "vmodl.DynamicData", "integrity.version.version1", [("release", "integrity.UpgradeReleaseManager.UpgradeRelease", "integrity.version.version1", 0), ("upgrade", "integrity.UpgradeProductManager.UpgradeProduct", "integrity.version.version1", 0)])
CreateManagedType("integrity.VmStatusCollector", "VmStatusCollector", "integrity.BaselineComplianceStatusCollector", "integrity.version.version1", [("virtApplianceInfo", "integrity.VirtApplianceInfo", "integrity.version.version1", F_OPTIONAL, None)], None)
CreateDataType("integrity.fault.BaselinesAttachedToRelease", "BaselinesAttachedToRelease", "integrity.fault.VcIntegrityFault", "integrity.version.version1", None)
CreateDataType("integrity.fault.CheckPXEHostFault", "CheckPXEHostFault", "integrity.fault.VcIntegrityFault", "integrity.version.version1", None)
CreateDataType("integrity.fault.ClusterConfigRestoreFailure", "ClusterConfigRestoreFailure", "integrity.fault.VcIntegrityFault", "integrity.version.version1", [("cluster", "string", "integrity.version.version1", 0)])
CreateDataType("integrity.fault.ConfigInfoFault", "ConfigInfoFault", "integrity.fault.VcIntegrityFault", "integrity.version.version1", [("vm", "string", "integrity.version.version1", 0)])
CreateDataType("integrity.fault.ConflictedBaselines", "ConflictedBaselines", "integrity.fault.VcIntegrityFault", "integrity.version.version1", None)
CreateDataType("integrity.fault.DVSRemediateFailure", "DVSRemediateFailure", "integrity.fault.VciDVSFault", "integrity.version.version1", [("reason", "string", "integrity.version.version1", F_OPTIONAL)])
CreateDataType("integrity.fault.DVSScanFailure", "DVSScanFailure", "integrity.fault.VciDVSFault", "integrity.version.version1", [("reason", "string", "integrity.version.version1", F_OPTIONAL)])
CreateDataType("integrity.fault.DVSStageFailure", "DVSStageFailure", "integrity.fault.VciDVSFault", "integrity.version.version1", [("reason", "string", "integrity.version.version1", F_OPTIONAL)])
CreateDataType("integrity.fault.DVSUpdateDownloadFailure", "DVSUpdateDownloadFailure", "integrity.fault.VciDVSFault", "integrity.version.version1", [("site", "string", "integrity.version.version1", F_OPTIONAL), ("errorCode", "int", "integrity.version.version1", F_OPTIONAL), ("errorDesc", "string", "integrity.version.version1", F_OPTIONAL)])
CreateDataType("integrity.fault.EnterMaintenanceModeFailure", "EnterMaintenanceModeFailure", "integrity.fault.VcIntegrityFault", "integrity.version.version1", None)
CreateDataType("integrity.fault.EsxupdateErrorBundleDownloadFault", "EsxupdateErrorBundleDownloadFault", "integrity.fault.VcIntegrityFault", "integrity.version.version1", None)
CreateDataType("integrity.fault.EsxupdateErrorBundleFormatFault", "EsxupdateErrorBundleFormatFault", "integrity.fault.VcIntegrityFault", "integrity.version.version1", None)
CreateDataType("integrity.fault.EsxupdateErrorConfigFault", "EsxupdateErrorConfigFault", "integrity.fault.VcIntegrityFault", "integrity.version.version1", None)
CreateDataType("integrity.fault.EsxupdateErrorDatabaseFormatFault", "EsxupdateErrorDatabaseFormatFault", "integrity.fault.VcIntegrityFault", "integrity.version.version1", None)
CreateDataType("integrity.fault.EsxupdateErrorDatabaseIOFault", "EsxupdateErrorDatabaseIOFault", "integrity.fault.VcIntegrityFault", "integrity.version.version1", None)
CreateDataType("integrity.fault.EsxupdateErrorDependencyFault", "EsxupdateErrorDependencyFault", "integrity.fault.VcIntegrityFault", "integrity.version.version1", None)
CreateDataType("integrity.fault.EsxupdateErrorFileIOFault", "EsxupdateErrorFileIOFault", "integrity.fault.VcIntegrityFault", "integrity.version.version1", None)
CreateDataType("integrity.fault.EsxupdateErrorInvalidOptionFault", "EsxupdateErrorInvalidOptionFault", "integrity.fault.VcIntegrityFault", "integrity.version.version1", None)
CreateDataType("integrity.fault.EsxupdateErrorLockingFault", "EsxupdateErrorLockingFault", "integrity.fault.VcIntegrityFault", "integrity.version.version1", None)
CreateDataType("integrity.fault.EsxupdateErrorMaintenanceModeFault", "EsxupdateErrorMaintenanceModeFault", "integrity.fault.VcIntegrityFault", "integrity.version.version1", None)
CreateDataType("integrity.fault.EsxupdateErrorMetadataDownloadFault", "EsxupdateErrorMetadataDownloadFault", "integrity.fault.VcIntegrityFault", "integrity.version.version1", None)
CreateDataType("integrity.fault.EsxupdateErrorMetadataFormatFault", "EsxupdateErrorMetadataFormatFault", "integrity.fault.VcIntegrityFault", "integrity.version.version1", None)
CreateDataType("integrity.fault.EsxupdateErrorNoMatchFault", "EsxupdateErrorNoMatchFault", "integrity.fault.VcIntegrityFault", "integrity.version.version1", None)
CreateDataType("integrity.fault.EsxupdateErrorNotRootErrorFault", "EsxupdateErrorNotRootErrorFault", "integrity.fault.VcIntegrityFault", "integrity.version.version1", None)
CreateDataType("integrity.fault.EsxupdateErrorPackageManagerFault", "EsxupdateErrorPackageManagerFault", "integrity.fault.VcIntegrityFault", "integrity.version.version1", None)
CreateDataType("integrity.fault.EsxupdateErrorPostScriptFault", "EsxupdateErrorPostScriptFault", "integrity.fault.VcIntegrityFault", "integrity.version.version1", None)
CreateDataType("integrity.fault.EsxupdateErrorUnhandledExceptionFault", "EsxupdateErrorUnhandledExceptionFault", "integrity.fault.VcIntegrityFault", "integrity.version.version1", None)
CreateDataType("integrity.fault.EsxupdateErrorUnsatisfiedDependenciesFault", "EsxupdateErrorUnsatisfiedDependenciesFault", "integrity.fault.VcIntegrityFault", "integrity.version.version1", None)
CreateDataType("integrity.fault.EsxupdateErrorUnsupportedCommandFault", "EsxupdateErrorUnsupportedCommandFault", "integrity.fault.VcIntegrityFault", "integrity.version.version1", None)
CreateDataType("integrity.fault.EsxupdateErrorVibDownloadFault", "EsxupdateErrorVibDownloadFault", "integrity.fault.VcIntegrityFault", "integrity.version.version1", None)
CreateDataType("integrity.fault.EsxupdateErrorVibFormatFault", "EsxupdateErrorVibFormatFault", "integrity.fault.VcIntegrityFault", "integrity.version.version1", None)
CreateDataType("integrity.fault.EsxupdateErrorVibIOFault", "EsxupdateErrorVibIOFault", "integrity.fault.VcIntegrityFault", "integrity.version.version1", None)
CreateDataType("integrity.fault.EsxupdateErrorVibSigDigestFault", "EsxupdateErrorVibSigDigestFault", "integrity.fault.VcIntegrityFault", "integrity.version.version1", None)
CreateDataType("integrity.fault.EsxupdateErrorVibSigFormatFault", "EsxupdateErrorVibSigFormatFault", "integrity.fault.VcIntegrityFault", "integrity.version.version1", None)
CreateDataType("integrity.fault.EsxupdateErrorVibSigInvalidFault", "EsxupdateErrorVibSigInvalidFault", "integrity.fault.VcIntegrityFault", "integrity.version.version1", None)
CreateDataType("integrity.fault.EsxupdateErrorVibSigMissingFault", "EsxupdateErrorVibSigMissingFault", "integrity.fault.VcIntegrityFault", "integrity.version.version1", None)
CreateDataType("integrity.fault.EsxupdateErrorVibSigVersionFault", "EsxupdateErrorVibSigVersionFault", "integrity.fault.VcIntegrityFault", "integrity.version.version1", None)
CreateDataType("integrity.fault.EsxupdateErrorVisorSetupFault", "EsxupdateErrorVisorSetupFault", "integrity.fault.VcIntegrityFault", "integrity.version.version1", None)
CreateDataType("integrity.fault.FileDownloadFailure", "FileDownloadFailure", "integrity.fault.VcIntegrityFault", "integrity.version.version1", [("filePath", "string", "integrity.version.version1", 0)])
CreateDataType("integrity.fault.FileUploadInvalidPackage", "FileUploadInvalidPackage", "integrity.fault.VcIntegrityFault", "integrity.version.version1", None)
CreateDataType("integrity.fault.FileUploadNoSessionMatch", "FileUploadNoSessionMatch", "integrity.fault.VcIntegrityFault", "integrity.version.version1", None)
CreateDataType("integrity.fault.FileUploadNotEnoughSpace", "FileUploadNotEnoughSpace", "integrity.fault.VcIntegrityFault", "integrity.version.version1", None)
CreateDataType("integrity.fault.FileUploadUnsupportedFileLocation", "FileUploadUnsupportedFileLocation", "integrity.fault.VcIntegrityFault", "integrity.version.version1", None)
CreateDataType("integrity.fault.FileUploadUnsupportedFileType", "FileUploadUnsupportedFileType", "integrity.fault.VcIntegrityFault", "integrity.version.version1", None)
CreateDataType("integrity.fault.GAInstallFailure", "GAInstallFailure", "integrity.fault.VcIntegrityFault", "integrity.version.version1", [("entity", "vim.ManagedEntity", "integrity.version.version1", F_OPTIONAL)])
CreateDataType("integrity.fault.GuestInfoFault", "GuestInfoFault", "integrity.fault.VcIntegrityFault", "integrity.version.version1", [("vm", "string", "integrity.version.version1", 0)])
CreateDataType("integrity.fault.HostCommunicationFault", "HostCommunicationFault", "integrity.fault.VcIntegrityFault", "integrity.version.version1", [("host", "vim.ManagedEntity", "integrity.version.version1", 0)])
CreateDataType("integrity.fault.HostGetInfoFailure", "HostGetInfoFailure", "integrity.fault.VcIntegrityFault", "integrity.version.version1", None)
CreateDataType("integrity.fault.HostPatchConflictDependenciesFailure", "HostPatchConflictDependenciesFailure", "integrity.fault.VcIntegrityFault", "integrity.version.version1", None)
CreateDataType("integrity.fault.HostPatchConflictPackagesFailure", "HostPatchConflictPackagesFailure", "integrity.fault.VcIntegrityFault", "integrity.version.version1", [("reason", "string", "integrity.version.version1", F_OPTIONAL)])
CreateDataType("integrity.fault.HostPatchConflictPatchesFailure", "HostPatchConflictPatchesFailure", "integrity.fault.VcIntegrityFault", "integrity.version.version1", [("reason", "string", "integrity.version.version1", F_OPTIONAL)])
CreateDataType("integrity.fault.HostPatchConflictVibsFailure", "HostPatchConflictVibsFailure", "integrity.fault.VcIntegrityFault", "integrity.version.version1", [("reason", "string", "integrity.version.version1", F_OPTIONAL)])
CreateDataType("integrity.fault.HostPatchCycleDetectedFailure", "HostPatchCycleDetectedFailure", "integrity.fault.VcIntegrityFault", "integrity.version.version1", [("cycle", "string", "integrity.version.version1", F_OPTIONAL)])
CreateDataType("integrity.fault.HostPatchDnsResolveFailure", "HostPatchDnsResolveFailure", "integrity.fault.VcIntegrityFault", "integrity.version.version1", [("reason", "string", "integrity.version.version1", F_OPTIONAL)])
CreateDataType("integrity.fault.HostPatchESXUpdateFailure", "HostPatchESXUpdateFailure", "integrity.fault.VcIntegrityFault", "integrity.version.version1", [("errorCodes", "string", "integrity.version.version1", F_OPTIONAL)])
CreateDataType("integrity.fault.HostPatchEsxFileDownloadFailure", "HostPatchEsxFileDownloadFailure", "integrity.fault.VcIntegrityFault", "integrity.version.version1", None)
CreateDataType("integrity.fault.HostPatchInputRecalledFailure", "HostPatchInputRecalledFailure", "integrity.fault.VcIntegrityFault", "integrity.version.version1", [("reason", "string", "integrity.version.version1", F_OPTIONAL)])
CreateDataType("integrity.fault.HostPatchInvalidBundle", "HostPatchInvalidBundle", "integrity.fault.VcIntegrityFault", "integrity.version.version1", None)
CreateDataType("integrity.fault.HostPatchInvalidVendorCode", "HostPatchInvalidVendorCode", "integrity.fault.VcIntegrityFault", "integrity.version.version1", [("vendor", "string", "integrity.version.version1", F_OPTIONAL)])
CreateDataType("integrity.fault.HostPatchMetadataCorruptFailure", "HostPatchMetadataCorruptFailure", "integrity.fault.VcIntegrityFault", "integrity.version.version1", None)
CreateDataType("integrity.fault.HostPatchMetadataNotFoundFailure", "HostPatchMetadataNotFoundFailure", "integrity.fault.VcIntegrityFault", "integrity.version.version1", None)
CreateDataType("integrity.fault.HostPatchNoBootTime", "HostPatchNoBootTime", "integrity.fault.VcIntegrityFault", "integrity.version.version1", [("host", "string", "integrity.version.version1", F_OPTIONAL)])
CreateDataType("integrity.fault.HostPatchNotConnectedFailure", "HostPatchNotConnectedFailure", "integrity.fault.VcIntegrityFault", "integrity.version.version1", None)
CreateDataType("integrity.fault.HostPatchNotHostEntityFailure", "HostPatchNotHostEntityFailure", "integrity.fault.VcIntegrityFault", "integrity.version.version1", None)
CreateDataType("integrity.fault.HostPatchNotInstallableFailure", "HostPatchNotInstallableFailure", "integrity.fault.VcIntegrityFault", "integrity.version.version1", [("patches", "string", "integrity.version.version1", F_OPTIONAL)])
CreateDataType("integrity.fault.HostPatchNotSupportedBundle", "HostPatchNotSupportedBundle", "integrity.fault.VcIntegrityFault", "integrity.version.version1", None)
CreateDataType("integrity.fault.HostPatchNotSupportedHostVersionFailure", "HostPatchNotSupportedHostVersionFailure", "integrity.fault.VcIntegrityFault", "integrity.version.version1", None)
CreateDataType("integrity.fault.HostPatchNullRefFailure", "HostPatchNullRefFailure", "integrity.fault.VcIntegrityFault", "integrity.version.version1", None)
CreateDataType("integrity.fault.HostPatchOutdatedMetadataImport", "HostPatchOutdatedMetadataImport", "integrity.fault.VcIntegrityFault", "integrity.version.version1", None)
CreateDataType("integrity.fault.HostPatchPowerStateFailure", "HostPatchPowerStateFailure", "integrity.fault.VcIntegrityFault", "integrity.version.version1", None)
CreateDataType("integrity.fault.HostPatchPrerequisiteRecalledFailure", "HostPatchPrerequisiteRecalledFailure", "integrity.fault.VcIntegrityFault", "integrity.version.version1", [("reason", "string", "integrity.version.version1", F_OPTIONAL)])
CreateDataType("integrity.fault.HostPatchRebootReconnectFailure", "HostPatchRebootReconnectFailure", "integrity.fault.VcIntegrityFault", "integrity.version.version1", None)
CreateDataType("integrity.fault.HostPatchTaskInProgressFailure", "HostPatchTaskInProgressFailure", "integrity.fault.VcIntegrityFault", "integrity.version.version1", None)
CreateDataType("integrity.fault.HostPatchTaskTimedOutFailure", "HostPatchTaskTimedOutFailure", "integrity.fault.VcIntegrityFault", "integrity.version.version1", None)
CreateDataType("integrity.fault.HostPatchUpgradeTaskTimedOutFailure", "HostPatchUpgradeTaskTimedOutFailure", "integrity.fault.HostPatchTaskTimedOutFailure", "integrity.version.version1", None)
CreateDataType("integrity.fault.HostPatchVibChecksumFailure", "HostPatchVibChecksumFailure", "integrity.fault.VcIntegrityFault", "integrity.version.version1", [("vibs", "string", "integrity.version.version1", 0)])
CreateDataType("integrity.fault.HostPatchVibDownloadFailure", "HostPatchVibDownloadFailure", "integrity.fault.VcIntegrityFault", "integrity.version.version1", [("vibs", "string", "integrity.version.version1", 0)])
CreateDataType("integrity.fault.HostPatchVibIdNotFoundFailure", "HostPatchVibIdNotFoundFailure", "integrity.fault.VcIntegrityFault", "integrity.version.version1", [("vibs", "string", "integrity.version.version1", 0)])
CreateDataType("integrity.fault.HostPatchVsanHealthCheckFailureAfterExitMM", "HostPatchVsanHealthCheckFailureAfterExitMM", "integrity.fault.VcIntegrityFault", "integrity.version.version1", [("healthCheckStatus", "string", "integrity.version.version1", F_OPTIONAL)])
CreateDataType("integrity.fault.HostPatchVsanHealthCheckFailureBeforeExitMM", "HostPatchVsanHealthCheckFailureBeforeExitMM", "integrity.fault.VcIntegrityFault", "integrity.version.version1", [("healthCheckStatus", "string", "integrity.version.version1", F_OPTIONAL)])
CreateDataType("integrity.fault.HostUpgradeChecksumFailure", "HostUpgradeChecksumFailure", "integrity.fault.VcIntegrityFault", "integrity.version.version1", None)
CreateDataType("integrity.fault.HostUpgradeConflict", "HostUpgradeConflict", "integrity.fault.VcIntegrityFault", "integrity.version.version1", [("host", "string", "integrity.version.version1", F_OPTIONAL), ("version", "string", "integrity.version.version1", F_OPTIONAL)])
CreateDataType("integrity.fault.HostUpgradeConflictPackagesFailure", "HostUpgradeConflictPackagesFailure", "integrity.fault.VcIntegrityFault", "integrity.version.version1", [("reason", "string", "integrity.version.version1", F_OPTIONAL)])
CreateDataType("integrity.fault.HostUpgradeConflictVibsFailure", "HostUpgradeConflictVibsFailure", "integrity.fault.VcIntegrityFault", "integrity.version.version1", [("reason", "string", "integrity.version.version1", F_OPTIONAL)])
CreateDataType("integrity.fault.HostUpgradeCorruptPackage", "HostUpgradeCorruptPackage", "integrity.fault.VcIntegrityFault", "integrity.version.version1", None)
CreateDataType("integrity.fault.HostUpgradeDuplicatePackage", "HostUpgradeDuplicatePackage", "integrity.fault.VcIntegrityFault", "integrity.version.version1", None)
CreateDataType("integrity.fault.HostUpgradeIncorrectPackage", "HostUpgradeIncorrectPackage", "integrity.fault.VcIntegrityFault", "integrity.version.version1", None)
CreateDataType("integrity.fault.HostUpgradeInvalidPackage", "HostUpgradeInvalidPackage", "integrity.fault.VcIntegrityFault", "integrity.version.version1", None)
CreateDataType("integrity.fault.HostUpgradeLicenseFault", "HostUpgradeLicenseFault", "integrity.fault.VcIntegrityFault", "integrity.version.version1", None)
CreateDataType("integrity.fault.HostUpgradeMissingPackage", "HostUpgradeMissingPackage", "integrity.fault.VcIntegrityFault", "integrity.version.version1", [("host", "string", "integrity.version.version1", F_OPTIONAL), ("version", "string", "integrity.version.version1", F_OPTIONAL)])
CreateDataType("integrity.fault.HostUpgradeNfcCopyFailure", "HostUpgradeNfcCopyFailure", "integrity.fault.VcIntegrityFault", "integrity.version.version1", [("hostName", "string", "integrity.version.version1", F_OPTIONAL)])
CreateDataType("integrity.fault.HostUpgradeNotEnoughSpace", "HostUpgradeNotEnoughSpace", "integrity.fault.VcIntegrityFault", "integrity.version.version1", None)
CreateDataType("integrity.fault.HostUpgradeUnableToPersistPackage", "HostUpgradeUnableToPersistPackage", "integrity.fault.VcIntegrityFault", "integrity.version.version1", None)
CreateDataType("integrity.fault.HostUpgradeUnsupported", "HostUpgradeUnsupported", "integrity.fault.VcIntegrityFault", "integrity.version.version1", [("host", "string", "integrity.version.version1", F_OPTIONAL)])
CreateDataType("integrity.fault.HostUpgradeUnsupportedRelease", "HostUpgradeUnsupportedRelease", "integrity.fault.VcIntegrityFault", "integrity.version.version1", None)
CreateDataType("integrity.fault.IgnoreErrorInChainFault", "IgnoreErrorInChainFault", "integrity.fault.VcIntegrityFault", "integrity.version.version1", [("errorCode", "int", "integrity.version.version1", 0)])
CreateDataType("integrity.fault.IncompatibleTools", "IncompatibleTools", "integrity.fault.VcIntegrityFault", "integrity.version.version1", [("installedVersion", "int", "integrity.version.version1", F_OPTIONAL), ("requiredVersion", "int", "integrity.version.version1", F_OPTIONAL)])
CreateDataType("integrity.fault.IncompatibleUMDSFault", "IncompatibleUMDSFault", "integrity.fault.VcIntegrityFault", "integrity.version.version1", [("folder", "string", "integrity.version.version1", F_OPTIONAL)])
CreateDataType("integrity.fault.IncompatibleVc", "IncompatibleVc", "integrity.fault.VcIntegrityFault", "integrity.version.version1", None)
CreateDataType("integrity.fault.InvalidHostUpdateLevel", "InvalidHostUpdateLevel", "integrity.fault.VcIntegrityFault", "integrity.version.version1", [("host", "string", "integrity.version.version1", F_OPTIONAL)])
CreateDataType("integrity.fault.InvalidObjectName", "InvalidObjectName", "integrity.fault.VcIntegrityFault", "integrity.version.version1", [("name", "string", "integrity.version.version1", 0), ("entity", "vim.ManagedEntity", "integrity.version.version1", F_OPTIONAL)])
CreateDataType("integrity.fault.LockFailure", "LockFailure", "integrity.fault.VcIntegrityFault", "integrity.version.version1", None)
CreateDataType("integrity.fault.MetadataDownloadFailure", "MetadataDownloadFailure", "integrity.fault.VcIntegrityFault", "integrity.version.version1", [("reason", "string", "integrity.version.version1", F_OPTIONAL)])
CreateDataType("integrity.fault.MmodeDisallowedFault", "MmodeDisallowedFault", "integrity.fault.VcIntegrityFault", "integrity.version.version1", [("host", "string", "integrity.version.version1", F_OPTIONAL)])
CreateDataType("integrity.fault.NoEntities", "NoEntities", "integrity.fault.VcIntegrityFault", "integrity.version.version1", None)
CreateDataType("integrity.fault.NoSignatureSiteConnection", "NoSignatureSiteConnection", "integrity.fault.VcIntegrityFault", "integrity.version.version1", [("site", "string", "integrity.version.version1", F_OPTIONAL)])
CreateDataType("integrity.fault.NotApplicableEulaState", "NotApplicableEulaState", "integrity.fault.VcIntegrityFault", "integrity.version.version1", None)
CreateDataType("integrity.fault.OperationNotAllowed", "OperationNotAllowed", "integrity.fault.VcIntegrityFault", "integrity.version.version1", [("errorDesc", "string", "integrity.version.version1", F_OPTIONAL)])
CreateDataType("integrity.fault.PowerStateRestoreFault", "PowerStateRestoreFault", "integrity.fault.VcIntegrityFault", "integrity.version.version1", [("vm", "string", "integrity.version.version1", 0)])
CreateDataType("integrity.fault.ReadOnlyObject", "ReadOnlyObject", "integrity.fault.VcIntegrityFault", "integrity.version.version1", [("obj", "string", "integrity.version.version1", F_OPTIONAL)])
CreateDataType("integrity.fault.RemediateFailure", "RemediateFailure", "integrity.fault.VcIntegrityFault", "integrity.version.version1", [("reason", "string", "integrity.version.version1", F_OPTIONAL)])
CreateDataType("integrity.fault.RemovableDevicesAttachedFailure", "RemovableDevicesAttachedFailure", "integrity.fault.VcIntegrityFault", "integrity.version.version1", [("vms", "string", "integrity.version.version1", F_OPTIONAL)])
CreateDataType("integrity.fault.ScanFailure", "ScanFailure", "integrity.fault.VcIntegrityFault", "integrity.version.version1", [("reason", "string", "integrity.version.version1", F_OPTIONAL)])
CreateDataType("integrity.fault.SigUpdateNoDiskSpace", "SigUpdateNoDiskSpace", "integrity.fault.VcIntegrityFault", "integrity.version.version1", None)
CreateDataType("integrity.fault.SpecialVmOnHost", "SpecialVmOnHost", "integrity.fault.IgnoreErrorInChainFault", "integrity.version.version1", [("vm", "string", "integrity.version.version1", F_OPTIONAL), ("host", "string", "integrity.version.version1", F_OPTIONAL)])
CreateDataType("integrity.fault.StageFailure", "StageFailure", "integrity.fault.VcIntegrityFault", "integrity.version.version1", [("reason", "string", "integrity.version.version1", F_OPTIONAL)])
CreateDataType("integrity.fault.StaleScheduledTaskFault", "StaleScheduledTaskFault", "integrity.fault.VcIntegrityFault", "integrity.version.version1", None)
CreateDataType("integrity.fault.SysprepAccessFailure", "SysprepAccessFailure", "integrity.fault.VcIntegrityFault", "integrity.version.version1", [("vm", "string", "integrity.version.version1", 0)])
CreateDataType("integrity.fault.TooManyBaselinegroups", "TooManyBaselinegroups", "integrity.fault.VcIntegrityFault", "integrity.version.version1", None)
CreateDataType("integrity.fault.TooManyBaselines", "TooManyBaselines", "integrity.fault.VcIntegrityFault", "integrity.version.version1", None)
CreateDataType("integrity.fault.TooManyUpdatesFault", "TooManyUpdatesFault", "integrity.fault.VcIntegrityFault", "integrity.version.version1", [("TotalUpdateCount", "int", "integrity.version.version1", 0)])
CreateDataType("integrity.fault.ToolsAutoUpgradeUnsupported", "ToolsAutoUpgradeUnsupported", "integrity.fault.VcIntegrityFault", "integrity.version.version1", None)
CreateDataType("integrity.fault.ToolsNotRunning", "ToolsNotRunning", "integrity.fault.VcIntegrityFault", "integrity.version.version1", None)
CreateDataType("integrity.fault.UnsupportedHostRemediateSpecialVM", "UnsupportedHostRemediateSpecialVM", "integrity.fault.VcIntegrityFault", "integrity.version.version1", [("entity", "vim.ManagedEntity", "integrity.version.version1", F_OPTIONAL), ("vm", "vim.ManagedEntity", "integrity.version.version1", F_OPTIONAL)])
CreateDataType("integrity.fault.UnsupportedPXEHost", "UnsupportedPXEHost", "integrity.fault.VcIntegrityFault", "integrity.version.version1", None)
CreateDataType("integrity.fault.UnsupportedSpecialVM", "UnsupportedSpecialVM", "integrity.fault.VcIntegrityFault", "integrity.version.version1", [("entity", "vim.ManagedEntity", "integrity.version.version1", F_OPTIONAL)])
CreateDataType("integrity.fault.VAAutoUpdateTimedoutFailure", "VAAutoUpdateTimedoutFailure", "integrity.fault.VcIntegrityFault", "integrity.version.version1", None)
CreateDataType("integrity.fault.VAPostInstallScriptError", "VAPostInstallScriptError", "integrity.fault.RemediateFailure", "integrity.version.version1", [("errorCode", "int", "integrity.version.version1", 0)])
CreateDataType("integrity.fault.VAPostInstallScriptTimedoutError", "VAPostInstallScriptTimedoutError", "integrity.fault.VcIntegrityFault", "integrity.version.version1", None)
CreateDataType("integrity.fault.VAPostInstallVixError", "VAPostInstallVixError", "integrity.fault.RemediateFailure", "integrity.version.version1", None)
CreateDataType("integrity.fault.VAPreInstallScriptError", "VAPreInstallScriptError", "integrity.fault.RemediateFailure", "integrity.version.version1", [("errorCode", "int", "integrity.version.version1", 0)])
CreateDataType("integrity.fault.VAPreInstallScriptTimedoutError", "VAPreInstallScriptTimedoutError", "integrity.fault.VcIntegrityFault", "integrity.version.version1", None)
CreateDataType("integrity.fault.VAPreInstallVixError", "VAPreInstallVixError", "integrity.fault.RemediateFailure", "integrity.version.version1", None)
CreateDataType("integrity.fault.VARemediateEulaNotAcceptedFault", "VARemediateEulaNotAcceptedFault", "integrity.fault.RemediateFailure", "integrity.version.version1", [("vendor", "string", "integrity.version.version1", 0), ("product", "string", "integrity.version.version1", 0), ("targetVersion", "string", "integrity.version.version1", 0)])
CreateDataType("integrity.fault.VARemediateSnapshotError", "VARemediateSnapshotError", "integrity.fault.RemediateFailure", "integrity.version.version1", None)
CreateDataType("integrity.fault.VARemediateUnsupportedUpgrade", "VARemediateUnsupportedUpgrade", "integrity.fault.RemediateFailure", "integrity.version.version1", None)
CreateDataType("integrity.fault.VCVARemediationFault", "VCVARemediationFault", "integrity.fault.RemediateFailure", "integrity.version.version1", None)
CreateDataType("integrity.fault.VMHWUpgradeToolsNotInstalled", "VMHWUpgradeToolsNotInstalled", "integrity.fault.RemediateFailure", "integrity.version.version1", None)
CreateDataType("integrity.fault.VMHWUpgradeToolsNotLatest", "VMHWUpgradeToolsNotLatest", "integrity.fault.RemediateFailure", "integrity.version.version1", None)
CreateDataType("integrity.fault.VMHWUpgradeToolsUnknown", "VMHWUpgradeToolsUnknown", "integrity.fault.RemediateFailure", "integrity.version.version1", None)
CreateDataType("integrity.fault.VMHWUpgradeToolsUnmanaged", "VMHWUpgradeToolsUnmanaged", "integrity.fault.RemediateFailure", "integrity.version.version1", None)
CreateDataType("integrity.fault.VMHardwareRemediationFault", "VMHardwareRemediationFault", "integrity.fault.RemediateFailure", "integrity.version.version1", [("vm", "string", "integrity.version.version1", 0)])
CreateDataType("integrity.fault.VMHardwareScanFault", "VMHardwareScanFault", "integrity.fault.ScanFailure", "integrity.version.version1", [("vm", "string", "integrity.version.version1", 0)])
CreateDataType("integrity.fault.VMToolsRemediationFault", "VMToolsRemediationFault", "integrity.fault.RemediateFailure", "integrity.version.version1", [("vm", "string", "integrity.version.version1", 0)])
CreateDataType("integrity.fault.VMToolsRemediationSetPolicyFault", "VMToolsRemediationSetPolicyFault", "integrity.fault.VcIntegrityFault", "integrity.version.version1", [("vm", "string", "integrity.version.version1", 0)])
CreateDataType("integrity.fault.VMToolsScanFault", "VMToolsScanFault", "integrity.fault.ScanFailure", "integrity.version.version1", [("vm", "string", "integrity.version.version1", 0)])
CreateDataType("integrity.fault.VMToolsUpgradedButRebootNotInitiated", "VMToolsUpgradedButRebootNotInitiated", "integrity.fault.VMToolsRemediationFault", "integrity.version.version1", None)
CreateDataType("integrity.option.BoolOption", "IntegrityBoolOption", "integrity.option.OptionType", "integrity.version.version1", [("supported", "boolean", "integrity.version.version1", 0), ("defaultValue", "boolean", "integrity.version.version1", 0)])
CreateDataType("integrity.option.ChoiceOption", "IntegrityChoiceOption", "integrity.option.OptionType", "integrity.version.version1", [("choiceInfo", "integrity.VumElementDescription[]", "integrity.version.version1", 0), ("defaultIndex", "int", "integrity.version.version1", F_OPTIONAL)])
CreateDataType("integrity.option.FloatOption", "IntegrityFloatOption", "integrity.option.OptionType", "integrity.version.version1", [("min", "float", "integrity.version.version1", 0), ("max", "float", "integrity.version.version1", 0), ("defaultValue", "float", "integrity.version.version1", 0)])
CreateDataType("integrity.option.IntOption", "IntegrityIntOption", "integrity.option.OptionType", "integrity.version.version1", [("min", "int", "integrity.version.version1", 0), ("max", "int", "integrity.version.version1", 0), ("defaultValue", "int", "integrity.version.version1", 0)])
CreateDataType("integrity.option.LongOption", "IntegrityLongOption", "integrity.option.OptionType", "integrity.version.version1", [("min", "long", "integrity.version.version1", 0), ("max", "long", "integrity.version.version1", 0), ("defaultValue", "long", "integrity.version.version1", 0)])
CreateDataType("integrity.BaselineSoftwareUpdates", "BaselineSoftwareUpdates", "vmodl.DynamicData", "integrity.version.version1", [("query", "integrity.UpdateManager.SearchSpec", "integrity.version.version1", F_OPTIONAL), ("updateId", "int[]", "integrity.version.version1", F_OPTIONAL), ("excludedUpdateId", "int[]", "integrity.version.version1", F_OPTIONAL)])
CreateDataType("integrity.HourlyScheduler", "HourlyScheduler", "integrity.RecurrentScheduler", "integrity.version.version1", [("minute", "int", "integrity.version.version1", 0)])
CreateDataType("integrity.fault.ClusterRemediationPrecheckFailure", "ClusterRemediationPrecheckFailure", "integrity.fault.RemediateFailure", "integrity.version.version1", [("host", "string", "integrity.version.version1", F_OPTIONAL)])
CreateDataType("integrity.fault.HostFWUpdateFailure", "HostFWUpdateFailure", "integrity.fault.RemediateFailure", "integrity.version.version1", None)
CreateDataType("integrity.fault.HostInMModeFault", "HostInMModeFault", "integrity.fault.RemediateFailure", "integrity.version.version1", None)
CreateDataType("integrity.fault.HostPatchEnterMmodeFailure", "HostPatchEnterMmodeFailure", "integrity.fault.RemediateFailure", "integrity.version.version1", None)
CreateDataType("integrity.fault.HostPatchExitMmodeFailure", "HostPatchExitMmodeFailure", "integrity.fault.RemediateFailure", "integrity.version.version1", None)
CreateDataType("integrity.fault.HostPatchPxeRebootSkipFailure", "HostPatchPxeRebootSkipFailure", "integrity.fault.RemediateFailure", "integrity.version.version1", None)
CreateDataType("integrity.fault.HostPatchRebootFailure", "HostPatchRebootFailure", "integrity.fault.RemediateFailure", "integrity.version.version1", None)
CreateDataType("integrity.fault.HostPatchReconnectFailure", "HostPatchReconnectFailure", "integrity.fault.RemediateFailure", "integrity.version.version1", None)
CreateDataType("integrity.fault.HostPatchRestoreVmFailure", "HostPatchRestoreVmFailure", "integrity.fault.RemediateFailure", "integrity.version.version1", None)
CreateDataType("integrity.fault.HostUpgradeBootTimeUnsetFailure", "HostUpgradeBootTimeUnsetFailure", "integrity.fault.RemediateFailure", "integrity.version.version1", None)
CreateDataType("integrity.fault.HostUpgradeComponentFailure", "HostUpgradeComponentFailure", "integrity.fault.RemediateFailure", "integrity.version.version1", None)
CreateDataType("integrity.fault.HostUpgradeDeployAgentFailure", "HostUpgradeDeployAgentFailure", "integrity.fault.RemediateFailure", "integrity.version.version1", None)
CreateDataType("integrity.fault.HostUpgradeGrubUpdateFailure", "HostUpgradeGrubUpdateFailure", "integrity.fault.RemediateFailure", "integrity.version.version1", None)
CreateDataType("integrity.fault.HostUpgradeInaccessibleDatastore", "HostUpgradeInaccessibleDatastore", "integrity.fault.RemediateFailure", "integrity.version.version1", None)
CreateDataType("integrity.fault.HostUpgradeIncompatibleHardware", "HostUpgradeIncompatibleHardware", "integrity.fault.RemediateFailure", "integrity.version.version1", [("hostName", "string", "integrity.version.version1", F_OPTIONAL)])
CreateDataType("integrity.fault.HostUpgradeIncompatibleSoftwareConfig", "HostUpgradeIncompatibleSoftwareConfig", "integrity.fault.RemediateFailure", "integrity.version.version1", [("hostName", "string", "integrity.version.version1", F_OPTIONAL)])
CreateDataType("integrity.fault.HostUpgradeNoRolledBack", "HostUpgradeNoRolledBack", "integrity.fault.RemediateFailure", "integrity.version.version1", None)
CreateDataType("integrity.fault.HostUpgradeNoSpaceOnDatastore", "HostUpgradeNoSpaceOnDatastore", "integrity.fault.RemediateFailure", "integrity.version.version1", [("requiredSpace", "int", "integrity.version.version1", F_OPTIONAL)])
CreateDataType("integrity.fault.HostUpgradeRebootFailure", "HostUpgradeRebootFailure", "integrity.fault.RemediateFailure", "integrity.version.version1", None)
CreateDataType("integrity.fault.HostUpgradeRolledBack", "HostUpgradeRolledBack", "integrity.fault.RemediateFailure", "integrity.version.version1", None)
CreateDataType("integrity.fault.HostUpgradeRunScriptFailure", "HostUpgradeRunScriptFailure", "integrity.fault.RemediateFailure", "integrity.version.version1", None)
CreateDataType("integrity.fault.HostUpgradeStageFailure", "HostUpgradeStageFailure", "integrity.fault.RemediateFailure", "integrity.version.version1", None)
CreateDataType("integrity.fault.HostUpgradeTimeout", "HostUpgradeTimeout", "integrity.fault.RemediateFailure", "integrity.version.version1", None)
CreateDataType("integrity.fault.HostUpgradeUnexpectedHostVersion", "HostUpgradeUnexpectedHostVersion", "integrity.fault.RemediateFailure", "integrity.version.version1", None)
CreateDataType("integrity.fault.HostUpgradeUnsuitableDatastores", "HostUpgradeUnsuitableDatastores", "integrity.fault.RemediateFailure", "integrity.version.version1", None)
CreateDataType("integrity.fault.HostUpgradeUnsupportedDatastore", "HostUpgradeUnsupportedDatastore", "integrity.fault.RemediateFailure", "integrity.version.version1", None)
CreateDataType("integrity.fault.IncompatibleBaselineFault", "IncompatibleBaselineFault", "integrity.fault.RemediateFailure", "integrity.version.version1", [("vm", "string", "integrity.version.version1", 0)])
CreateDataType("integrity.fault.MultipleBaselinesAttached", "MultipleBaselinesAttached", "integrity.fault.RemediateFailure", "integrity.version.version1", None)
CreateDataType("integrity.fault.VMToolsNotInstalledOrUnmanagedFault", "VMToolsNotInstalledOrUnmanagedFault", "integrity.fault.VMToolsRemediationFault", "integrity.version.version1", None)
CreateDataType("integrity.DailyScheduler", "DailyScheduler", "integrity.HourlyScheduler", "integrity.version.version1", [("hour", "int", "integrity.version.version1", 0)])
CreateDataType("integrity.MonthlyScheduler", "MonthlyScheduler", "integrity.DailyScheduler", "integrity.version.version1", None)
CreateDataType("integrity.WeeklyScheduler", "WeeklyScheduler", "integrity.DailyScheduler", "integrity.version.version1", [("sunday", "boolean", "integrity.version.version1", 0), ("monday", "boolean", "integrity.version.version1", 0), ("tuesday", "boolean", "integrity.version.version1", 0), ("wednesday", "boolean", "integrity.version.version1", 0), ("thursday", "boolean", "integrity.version.version1", 0), ("friday", "boolean", "integrity.version.version1", 0), ("saturday", "boolean", "integrity.version.version1", 0)])
CreateDataType("integrity.MonthlyByDayScheduler", "MonthlyByDayScheduler", "integrity.MonthlyScheduler", "integrity.version.version1", [("day", "int", "integrity.version.version1", 0)])
CreateDataType("integrity.MonthlyByWeekdayScheduler", "MonthlyByWeekdayScheduler", "integrity.MonthlyScheduler", "integrity.version.version1", [("offset", "integrity.MonthlyByWeekdayScheduler.WeekOfMonth", "integrity.version.version1", 0), ("weekday", "integrity.MonthlyByWeekdayScheduler.DayOfWeek", "integrity.version.version1", 0)])
CreateEnumType("integrity.MonthlyByWeekdayScheduler.DayOfWeek", "MonthlyByWeekdaySchedulerDayOfWeek", "integrity.version.version1", ["sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday"])
CreateEnumType("integrity.MonthlyByWeekdayScheduler.WeekOfMonth", "MonthlyByWeekdaySchedulerWeekOfMonth", "integrity.version.version1", ["first", "second", "third", "fourth", "last"])
