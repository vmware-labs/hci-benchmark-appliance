# ******* WARNING - AUTO GENERATED CODE - DO NOT EDIT *******
from .VmomiSupport import CreateDataType, CreateManagedType
from .VmomiSupport import CreateEnumType
from .VmomiSupport import AddVersion, AddVersionParent
from .VmomiSupport import AddBreakingChangesInfo
from .VmomiSupport import F_LINK, F_LINKABLE
from .VmomiSupport import F_OPTIONAL, F_SECRET
from .VmomiSupport import newestVersions, ltsVersions
from .VmomiSupport import dottedVersions, oldestVersions

AddVersion("test.version.version5", "", "5", 0, "test2")
AddVersion("vmodl.query.version.version4", "", "", 0, "vim25")
AddVersion("test.version.version4", "test2", "4", 0, "test2")
AddVersion("test.version.version3", "", "3", 0, "test2")
AddVersion("vmodl.query.version.version3", "", "", 0, "vim25")
AddVersion("test.version.version2", "", "", 1, "test2")
AddVersion("vmodl.query.version.version2", "", "", 0, "vim25")
AddVersion("vmodl.query.version.version1", "", "", 0, "vim25")
AddVersion("test.version.version1", "test", "", 0, "test2")
AddVersion("vmodl.version.version0", "", "", 0, "vim25")
AddVersion("vmodl.version.version1", "", "", 0, "vim25")
AddVersion("vmodl.version.version2", "", "", 0, "vim25")
AddVersion("test.version.version6", "", "6", 0, "test2")
AddVersionParent("test.version.version5", "test.version.version5")
AddVersionParent("test.version.version5", "test.version.version4")
AddVersionParent("test.version.version5", "test.version.version3")
AddVersionParent("test.version.version5", "vmodl.query.version.version3")
AddVersionParent("test.version.version5", "test.version.version2")
AddVersionParent("test.version.version5", "vmodl.query.version.version2")
AddVersionParent("test.version.version5", "vmodl.query.version.version1")
AddVersionParent("test.version.version5", "test.version.version1")
AddVersionParent("test.version.version5", "vmodl.version.version0")
AddVersionParent("test.version.version5", "vmodl.version.version1")
AddVersionParent("vmodl.query.version.version4", "vmodl.query.version.version4")
AddVersionParent("vmodl.query.version.version4", "vmodl.query.version.version3")
AddVersionParent("vmodl.query.version.version4", "vmodl.query.version.version2")
AddVersionParent("vmodl.query.version.version4", "vmodl.query.version.version1")
AddVersionParent("vmodl.query.version.version4", "vmodl.version.version0")
AddVersionParent("vmodl.query.version.version4", "vmodl.version.version1")
AddVersionParent("vmodl.query.version.version4", "vmodl.version.version2")
AddVersionParent("test.version.version4", "test.version.version4")
AddVersionParent("test.version.version4", "test.version.version3")
AddVersionParent("test.version.version4", "vmodl.query.version.version3")
AddVersionParent("test.version.version4", "test.version.version2")
AddVersionParent("test.version.version4", "vmodl.query.version.version2")
AddVersionParent("test.version.version4", "vmodl.query.version.version1")
AddVersionParent("test.version.version4", "test.version.version1")
AddVersionParent("test.version.version4", "vmodl.version.version0")
AddVersionParent("test.version.version4", "vmodl.version.version1")
AddVersionParent("test.version.version3", "test.version.version3")
AddVersionParent("test.version.version3", "vmodl.query.version.version3")
AddVersionParent("test.version.version3", "test.version.version2")
AddVersionParent("test.version.version3", "vmodl.query.version.version2")
AddVersionParent("test.version.version3", "vmodl.query.version.version1")
AddVersionParent("test.version.version3", "test.version.version1")
AddVersionParent("test.version.version3", "vmodl.version.version0")
AddVersionParent("test.version.version3", "vmodl.version.version1")
AddVersionParent("vmodl.query.version.version3", "vmodl.query.version.version3")
AddVersionParent("vmodl.query.version.version3", "vmodl.query.version.version2")
AddVersionParent("vmodl.query.version.version3", "vmodl.query.version.version1")
AddVersionParent("vmodl.query.version.version3", "vmodl.version.version0")
AddVersionParent("vmodl.query.version.version3", "vmodl.version.version1")
AddVersionParent("test.version.version2", "vmodl.query.version.version3")
AddVersionParent("test.version.version2", "test.version.version2")
AddVersionParent("test.version.version2", "vmodl.query.version.version2")
AddVersionParent("test.version.version2", "vmodl.query.version.version1")
AddVersionParent("test.version.version2", "test.version.version1")
AddVersionParent("test.version.version2", "vmodl.version.version0")
AddVersionParent("test.version.version2", "vmodl.version.version1")
AddVersionParent("vmodl.query.version.version2", "vmodl.query.version.version2")
AddVersionParent("vmodl.query.version.version2", "vmodl.query.version.version1")
AddVersionParent("vmodl.query.version.version2", "vmodl.version.version0")
AddVersionParent("vmodl.query.version.version2", "vmodl.version.version1")
AddVersionParent("vmodl.query.version.version1", "vmodl.query.version.version1")
AddVersionParent("vmodl.query.version.version1", "vmodl.version.version0")
AddVersionParent("test.version.version1", "vmodl.query.version.version3")
AddVersionParent("test.version.version1", "vmodl.query.version.version2")
AddVersionParent("test.version.version1", "vmodl.query.version.version1")
AddVersionParent("test.version.version1", "test.version.version1")
AddVersionParent("test.version.version1", "vmodl.version.version0")
AddVersionParent("test.version.version1", "vmodl.version.version1")
AddVersionParent("vmodl.version.version0", "vmodl.version.version0")
AddVersionParent("vmodl.version.version1", "vmodl.version.version0")
AddVersionParent("vmodl.version.version1", "vmodl.version.version1")
AddVersionParent("vmodl.version.version2", "vmodl.version.version0")
AddVersionParent("vmodl.version.version2", "vmodl.version.version1")
AddVersionParent("vmodl.version.version2", "vmodl.version.version2")
AddVersionParent("test.version.version6", "test.version.version5")
AddVersionParent("test.version.version6", "vmodl.query.version.version4")
AddVersionParent("test.version.version6", "test.version.version4")
AddVersionParent("test.version.version6", "test.version.version3")
AddVersionParent("test.version.version6", "vmodl.query.version.version3")
AddVersionParent("test.version.version6", "test.version.version2")
AddVersionParent("test.version.version6", "vmodl.query.version.version2")
AddVersionParent("test.version.version6", "vmodl.query.version.version1")
AddVersionParent("test.version.version6", "test.version.version1")
AddVersionParent("test.version.version6", "vmodl.version.version0")
AddVersionParent("test.version.version6", "vmodl.version.version1")
AddVersionParent("test.version.version6", "vmodl.version.version2")
AddVersionParent("test.version.version6", "test.version.version6")

newestVersions.Add("test.version.version6")
ltsVersions.Add("test.version.version6")
dottedVersions.Add("test.version.version6")
oldestVersions.Add("test.version.version1")

CreateDataType("test.AboutInfo", "TestAboutInfo", "vmodl.DynamicData", "test.version.version1", [("name", "string", "test.version.version1", 0), ("fullName", "string", "test.version.version1", 0), ("type", "string", "test.version.version1", 0), ("version", "string", "test.version.version1", 0), ("build", "string", "test.version.version1", 0)])
CreateDataType("test.AggregatorFault", "AggregatorFault", "vmodl.MethodFault", "test.version.version1", [("methodFaultList", "vmodl.MethodFault[]", "test.version.version1", F_OPTIONAL), ("runtimeFaultList", "vmodl.MethodFault[]", "test.version.version1", F_OPTIONAL), ("dataObjectList", "vmodl.DataObject[]", "test.version.version1", F_OPTIONAL)])
CreateManagedType("test.AnyFolder", "AnyFolder", "vmodl.ManagedObject", "test.version.version1", [("parent", "test.AnyFolder", "test.version.version1", F_OPTIONAL, None), ("child", "test.AnyFolder[]", "test.version.version1", F_OPTIONAL, None), ("name", "string", "test.version.version1", 0, None), ("effectiveRole", "int", "test.version.version1", 0, None)], [("change", "ChangeFolder", "test.version.version1", (("newParent", "test.AnyFolder", "test.version.version1", F_OPTIONAL, None),("newName", "string", "test.version.version1", F_OPTIONAL, None),), (0, "void", "void"), None, None), ("destroy", "DestroyFolder", "test.version.version1", (), (0, "void", "void"), None, None), ("login", "DummyLogin", "test.version.version1", (), (0, "void", "void"), None, None)])
CreateDataType("test.ArrayFieldExample", "ArrayFieldExample", "vmodl.DynamicData", "test.version.version1", [("array", "int[]", "test.version.version1", 0), ("optionalArray", "int[]", "test.version.version1", F_OPTIONAL)])
CreateDataType("test.ArrayIterField", "ArrayIterField", "vmodl.DynamicData", "test.version.version1", [("number", "int[]", "test.version.version1", F_OPTIONAL)])
CreateDataType("test.BarDataObject", "BarDataObject", "vmodl.DynamicData", "test.version.version1", [("booleanProperty", "boolean", "test.version.version1", 0), ("intProperty", "int", "test.version.version1", 0), ("floatProperty", "float", "test.version.version1", 0), ("doubleProperty", "double", "test.version.version1", 0), ("booleanArray", "boolean[]", "test.version.version1", 0), ("intArray", "int[]", "test.version.version1", 0), ("floatArray", "float[]", "test.version.version1", 0), ("doubleArray", "double[]", "test.version.version1", 0)])
CreateDataType("test.Base", "Base", "vmodl.DynamicData", "test.version.version1", [("intField", "int", "test.version.version1", 0), ("faultField", "vmodl.MethodFault", "test.version.version1", F_OPTIONAL), ("anyField", "anyType", "test.version.version1", F_OPTIONAL), ("key", "string", "test.version.version1", F_OPTIONAL)])
CreateDataType("test.CloneTestFault", "CloneTestFault", "vmodl.RuntimeFault", "test.version.version1", [("fubar", "string", "test.version.version1", 0)])
CreateManagedType("test.CollectionTests", "CollectionTests", "vmodl.ManagedObject", "test.version.version6", None, [("sendList", "SendList", "test.version.version6", (("string", "string[]", "test.version.version6", F_OPTIONAL, None),), (0, "void", "void"), "System.View", None), ("retrieveSet", "RetrieveSet", "test.version.version6", (("data", "test.CollectionTests.Data", "test.version.version6", F_OPTIONAL, None),), (0, "vmodl.URI[]", "vmodl.URI[]"), "System.View", None)])
CreateDataType("test.CollectionTests.Unkeyed", "CollectionTestsUnkeyed", "vmodl.DynamicData", "test.version.version1", None)
CreateDataType("test.CollectionTests.Keyed", "CollectionTestsKeyed", "vmodl.DynamicData", "test.version.version1", [("key", "string", "test.version.version1", 0)])
CreateDataType("test.CollectionTests.Data", "CollectionTestsData", "vmodl.DynamicData", "test.version.version1", [("plainStringArray", "string[]", "test.version.version1", 0), ("stringList", "string[]", "test.version.version1", 0), ("stringSet", "string[]", "test.version.version1", 0), ("plainIntArray", "int[]", "test.version.version1", 0), ("intList", "int[]", "test.version.version1", 0), ("intSet", "int[]", "test.version.version1", 0), ("plainUriArray", "vmodl.URI[]", "test.version.version1", 0), ("uriList", "vmodl.URI[]", "test.version.version1", 0), ("uriSet", "vmodl.URI[]", "test.version.version1", 0), ("plainUnkeyedArray", "test.CollectionTests.Unkeyed[]", "test.version.version1", 0), ("unkeyedList", "test.CollectionTests.Unkeyed[]", "test.version.version1", 0), ("unkeyedSet", "test.CollectionTests.Unkeyed[]", "test.version.version1", 0), ("plainKeyedArray", "test.CollectionTests.Keyed[]", "test.version.version1", 0), ("keyedList", "test.CollectionTests.Keyed[]", "test.version.version1", 0), ("keyedMap", "test.CollectionTests.Keyed[]", "test.version.version1", 0)])
CreateManagedType("test.Container", "Container", "vmodl.ManagedObject", "test.version.version1", [("byteField", "byte", "test.version.version1", 0, None)], None)
CreateDataType("test.Container.Nested", "ContainerNested", "vmodl.DynamicData", "test.version.version1", [("shortField", "short", "test.version.version1", 0)])
CreateManagedType("test.Container.NestedManaged", "ContainerNestedManaged", "vmodl.ManagedObject", "test.version.version1", [("longField", "long", "test.version.version1", 0, None)], None)
CreateDataType("test.DataIterFault", "DataIterFault", "vmodl.MethodFault", "test.version.version1", None)
CreateDataType("test.DataIterField", "DataIterField", "vmodl.DynamicData", "test.version.version1", [("obj", "test.DataIterObject[]", "test.version.version1", F_OPTIONAL)])
CreateDataType("test.DataIterObject", "DataIterObject", "vmodl.DynamicData", "test.version.version1", None)
CreateDataType("test.Dynamo", "Dynamo", "vmodl.DynamicData", "test.version.version1", [("stringField", "string", "test.version.version1", 0)])
CreateDataType("test.FancyData", "FancyData", "vmodl.DynamicData", "test.version.version1", [("linkableItem", "test.Item", "test.version.version1", F_LINKABLE | F_OPTIONAL), ("linkableItemArray", "test.Item[]", "test.version.version1", F_LINKABLE | F_OPTIONAL), ("nestedItem", "test.NestedItem", "test.version.version1", F_OPTIONAL), ("nestedLinks", "test.NestedLinks", "test.version.version1", F_OPTIONAL), ("nestedNested", "test.NestedNested", "test.version.version1", F_OPTIONAL), ("itemLink", "test.Item", "test.version.version1", F_LINK | F_OPTIONAL), ("itemLinkArray", "test.Item[]", "test.version.version1", F_LINK | F_OPTIONAL), ("nestedArray", "test.NestedArrayItem[]", "test.version.version1", F_OPTIONAL), ("secretField", "string", "test.version.version1", F_OPTIONAL | F_SECRET)])
CreateManagedType("test.FancyManaged", "FancyManaged", "vmodl.ManagedObject", "test.version.version1", [("fancy", "test.FancyData", "test.version.version1", 0, None)], None)
CreateDataType("test.FaultParam", "FaultParam", "vmodl.MethodFault", "test.version.version1", [("foo", "string", "test.version.version1", 0), ("bar", "int", "test.version.version1", F_OPTIONAL)])
CreateDataType("test.FaultParamTwo", "FaultParamTwo", "vmodl.MethodFault", "test.version.version1", [("duo", "test.Dynamo", "test.version.version1", F_OPTIONAL)])
CreateDataType("test.GrabBag", "GrabBag", "vmodl.DynamicData", "test.version.version1", [("key", "string", "test.version.version1", 0), ("intValue", "int", "test.version.version1", 0), ("intArray", "int[]", "test.version.version1", 0), ("floatValue", "float", "test.version.version1", 0), ("floatArray", "float[]", "test.version.version1", 0), ("stringValue", "string", "test.version.version1", 0), ("stringArray", "string[]", "test.version.version1", 0), ("typenameValue", "vmodl.TypeName", "test.version.version1", 0), ("typenameArray", "vmodl.TypeName[]", "test.version.version1", 0), ("ppathValue", "vmodl.PropertyPath", "test.version.version1", 0), ("ppathArray", "vmodl.PropertyPath[]", "test.version.version1", 0), ("enumValue", "test.GrabBag.GrabBagEnum", "test.version.version1", 0), ("enumArray", "test.GrabBag.GrabBagEnum[]", "test.version.version1", 0), ("dateTimeValue", "vmodl.DateTime", "test.version.version1", 0), ("dateTimeArray", "vmodl.DateTime[]", "test.version.version1", 0), ("nested", "test.GrabBag", "test.version.version1", F_OPTIONAL), ("nestedArray", "test.GrabBag[]", "test.version.version1", F_OPTIONAL), ("linked", "test.GrabBag", "test.version.version1", F_LINKABLE | F_OPTIONAL), ("linkedTwo", "test.GrabBag", "test.version.version1", F_LINKABLE | F_OPTIONAL), ("linkedArray", "test.GrabBag[]", "test.version.version1", F_LINK | F_OPTIONAL), ("unkeyedArray", "test.GrabBag.Unkeyed[]", "test.version.version1", F_OPTIONAL), ("optionalInt", "int", "test.version.version1", F_OPTIONAL)])
CreateEnumType("test.GrabBag.GrabBagEnum", "GrabBagGrabBagEnum", "test.version.version1", ["A", "B", "C"])
CreateDataType("test.GrabBag.Unkeyed", "GrabBagUnkeyed", "vmodl.DynamicData", "test.version.version1", [("nokey", "string", "test.version.version1", F_OPTIONAL)])
CreateDataType("test.HasStringArray", "HasStringArray", "vmodl.DynamicData", "test.version.version1", [("strings", "string[]", "test.version.version1", F_OPTIONAL)])
CreateManagedType("test.HostSystem", "TestHostSystem", "vmodl.ManagedObject", "test.version.version1", [("listSummary", "test.ListSummary", "test.version.version1", 0, None)], None)
CreateDataType("test.HugeFault", "HugeFault", "vmodl.MethodFault", "test.version.version1", [("data", "byte[]", "test.version.version1", F_OPTIONAL)])
CreateDataType("test.InsaneFieldName", "InsaneFieldName", "vmodl.DynamicData", "test.version.version1", [("abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz", "int", "test.version.version1", 0)])
CreateDataType("test.IntKeyData", "IntKeyData", "vmodl.DynamicData", "test.version.version1", [("key", "int", "test.version.version1", 0), ("val", "string", "test.version.version1", 0), ("nkSkd", "test.StringKeyData", "test.version.version1", F_OPTIONAL), ("nkIkd", "test.IntKeyData", "test.version.version1", F_OPTIONAL), ("nkNkd", "test.NoKeyData", "test.version.version1", F_OPTIONAL), ("nkSkda", "test.StringKeyData[]", "test.version.version1", F_OPTIONAL), ("nkIkda", "test.IntKeyData[]", "test.version.version1", F_OPTIONAL), ("nkNkda", "test.NoKeyData[]", "test.version.version1", F_OPTIONAL), ("nkSa", "string[]", "test.version.version1", F_OPTIONAL), ("nkIa", "int[]", "test.version.version1", F_OPTIONAL)])
CreateDataType("test.InternalData", "InternalData", "vmodl.DynamicData", "test.version.version1", [("foo", "int", "test.version.version1", 0)])
CreateDataType("test.InternalData.PublicNestedData", "InternalDataPublicNestedData", "vmodl.DynamicData", "test.version.version1", [("baz", "boolean", "test.version.version1", 0)])
CreateManagedType("test.InternalManaged", "InternalManaged", "vmodl.ManagedObject", "test.version.version1", [("foo", "int", "test.version.version1", 0, None)], [("bar", "Bar", "test.version.version1", (), (0, "void", "void"), None, None)])
CreateDataType("test.Item", "Item", "vmodl.DynamicData", "test.version.version1", [("key", "string", "test.version.version1", 0), ("value", "float", "test.version.version1", 0)])
CreateDataType("test.Limits", "Limits", "vmodl.DynamicData", "test.version.version1", [("data", "string", "test.version.version1", F_OPTIONAL), ("numbers", "int[]", "test.version.version1", F_OPTIONAL), ("rec", "test.Recursive", "test.version.version1", F_OPTIONAL)])
CreateDataType("test.LinkUtil", "LinkUtil", "vmodl.DynamicData", "test.version.version1", [("emptyNonOptProp", "test.Item", "test.version.version1", 0), ("link", "test.LinkUtil.Linkable", "test.version.version1", F_LINK), ("links", "test.LinkUtil.Linkable[]", "test.version.version1", F_LINK | F_OPTIONAL), ("linkables", "test.LinkUtil.Linkable[]", "test.version.version1", F_LINKABLE | F_OPTIONAL), ("wrong", "test.LinkUtil.Wrong", "test.version.version1", F_LINKABLE | F_OPTIONAL)])
CreateDataType("test.LinkUtil.Linkable", "LinkUtilLinkable", "vmodl.DynamicData", "test.version.version1", [("key", "string", "test.version.version1", F_OPTIONAL)])
CreateDataType("test.LinkUtil.Wrong", "LinkUtilWrong", "vmodl.DynamicData", "test.version.version1", [("key", "string", "test.version.version1", 0)])
CreateDataType("test.ListSummary", "ListSummary", "vmodl.DynamicData", "test.version.version1", [("host", "test.HostSystem", "test.version.version1", F_OPTIONAL), ("nonOptionalMoRef", "test.HostSystem", "test.version.version1", 0), ("maintenanceMode", "boolean", "test.version.version1", 0), ("hostname", "string", "test.version.version1", 0), ("port", "int", "test.version.version1", 0), ("numRunningVMs", "int", "test.version.version1", 0), ("hardware", "test.SystemHardware", "test.version.version1", 0), ("vmware", "test.AboutInfo", "test.version.version1", F_OPTIONAL), ("products", "test.AboutInfo[]", "test.version.version1", 0), ("optionalDoArray", "test.AboutInfo[]", "test.version.version1", F_OPTIONAL), ("users", "string[]", "test.version.version1", 0), ("optionalStrArray", "string[]", "test.version.version1", F_OPTIONAL), ("hostList", "test.HostSystem[]", "test.version.version1", 0), ("optionalMoRefArray", "test.HostSystem[]", "test.version.version1", F_OPTIONAL), ("overallCpuLoad", "int", "test.version.version1", 0), ("overallMemoryUtilization", "int", "test.version.version1", 0), ("overallStatus", "test.ListSummary.Status", "test.version.version1", 0), ("optionalBool", "boolean", "test.version.version1", F_OPTIONAL), ("optionalEnum", "test.ListSummary.Status", "test.version.version1", F_OPTIONAL), ("optionalString", "string", "test.version.version1", F_OPTIONAL), ("optionalInt", "int", "test.version.version1", F_OPTIONAL), ("optionalAny", "anyType", "test.version.version1", F_OPTIONAL), ("optionalAnyArray", "anyType[]", "test.version.version1", F_OPTIONAL), ("nonOptionalAny", "anyType", "test.version.version1", 0), ("nonOptionalAnyArray", "anyType[]", "test.version.version1", 0)])
CreateEnumType("test.ListSummary.Status", "ListSummaryStatus", "test.version.version1", ["gray", "green", "yellow", "red"])
CreateDataType("test.MorKeyData", "MorKeyData", "vmodl.DynamicData", "test.version.version1", [("key", "test.AnyFolder", "test.version.version1", 0), ("val", "int", "test.version.version1", 0)])
CreateDataType("test.MoveTestObject", "MoveTestObject", "vmodl.DynamicData", "test.version.version1", [("base", "test.MoveTestObject.Base", "test.version.version1", 0)])
CreateDataType("test.MoveTestObject.Base", "MoveTestObjectBase", "vmodl.DynamicData", "test.version.version1", None)
CreateDataType("test.MoveTestObject.Derived", "MoveTestObjectDerived", "test.MoveTestObject.Base", "test.version.version1", None)
CreateDataType("test.MyTypeName", "MyTypeName", "vmodl.DynamicData", "test.version.version1", [("unused", "int", "test.version.version1", 0)])
CreateDataType("test.NestableFolderReferences", "NestableFolderReferences", "vmodl.DynamicData", "test.version.version1", [("single", "test.AnyFolder", "test.version.version1", F_OPTIONAL), ("multi", "test.AnyFolder[]", "test.version.version1", F_OPTIONAL), ("left", "test.NestableFolderReferences", "test.version.version1", F_OPTIONAL), ("right", "test.NestableFolderReferences", "test.version.version1", F_OPTIONAL)])
CreateDataType("test.NestedArrayItem", "NestedArrayItem", "vmodl.DynamicData", "test.version.version1", [("key", "string", "test.version.version1", 0), ("items", "test.Item[]", "test.version.version1", F_OPTIONAL)])
CreateManagedType("test.NestedEdgeFolder", "NestedEdgeFolder", "test.AnyFolder", "test.version.version1", [("nested", "test.NestableFolderReferences", "test.version.version1", F_OPTIONAL, None)], None)
CreateDataType("test.NestedItem", "NestedItem", "vmodl.DynamicData", "test.version.version1", [("item1", "test.Item", "test.version.version1", F_LINKABLE | F_OPTIONAL), ("item2", "test.Item", "test.version.version1", F_LINKABLE | F_OPTIONAL)])
CreateDataType("test.NestedLinks", "NestedLinks", "vmodl.DynamicData", "test.version.version1", [("item1", "test.Item", "test.version.version1", F_LINK | F_OPTIONAL), ("item2", "test.Item", "test.version.version1", F_LINK | F_OPTIONAL)])
CreateDataType("test.NestedNested", "NestedNested", "vmodl.DynamicData", "test.version.version1", [("items", "test.NestedItem", "test.version.version1", F_OPTIONAL), ("links", "test.NestedLinks", "test.version.version1", F_OPTIONAL)])
CreateDataType("test.NoKeyData", "NoKeyData", "vmodl.DynamicData", "test.version.version1", [("val", "string", "test.version.version1", 0), ("nkSkd", "test.StringKeyData", "test.version.version1", F_OPTIONAL), ("nkIkd", "test.IntKeyData", "test.version.version1", F_OPTIONAL), ("nkNkd", "test.NoKeyData", "test.version.version1", F_OPTIONAL), ("nkSkda", "test.StringKeyData[]", "test.version.version1", F_OPTIONAL), ("nkIkda", "test.IntKeyData[]", "test.version.version1", F_OPTIONAL), ("nkNkda", "test.NoKeyData[]", "test.version.version1", F_OPTIONAL), ("nkSa", "string[]", "test.version.version1", F_OPTIONAL), ("nkIa", "int[]", "test.version.version1", F_OPTIONAL), ("nkMkda", "test.MorKeyData[]", "test.version.version1", F_OPTIONAL)])
CreateDataType("test.NoKeyDataEx", "NoKeyDataEx", "test.NoKeyData", "test.version.version1", [("bex", "boolean", "test.version.version1", 0)])
CreateManagedType("test.NodeManager", "NodeManager", "vmodl.ManagedObject", "test.version.version1", [("rootNode", "test.TestNode", "test.version.version1", 0, "System.View")], [("login", "Login", "test.version.version1", (("user", "string", "test.version.version1", 0, None),), (0, "void", "void"), "System.Anonymous", None), ("modifyNode", "ModifyNode", "test.version.version1", (("node", "test.TestNode", "test.version.version1", 0, "Test.IndirectMutate"),), (0, "void", "void"), None, None), ("messWithNodes", "MessWithNodes", "test.version.version1", (("node1", "test.TestNode", "test.version.version1", 0, None),("node2", "test.TestNode", "test.version.version1", F_OPTIONAL, None),("flag", "boolean", "test.version.version1", 0, None),("nodeList", "test.TestNode[]", "test.version.version1", 0, "Test.IndirectMutate"),), (0, "void", "void"), None, None), ("dataObjectCheck", "DataObjectCheck", "test.version.version1", (("options", "test.NodeOptions", "test.version.version1", 0, None),), (0, "void", "void"), "System.Anonymous", None), ("createSessionNode", "CreateSessionNode", "test.version.version1", (), (0, "test.TestNode", "test.TestNode"), "System.View", None)])
CreateDataType("test.NodeOptions", "NodeOptions", "vmodl.DynamicData", "test.version.version1", [("stringValue", "string", "test.version.version1", F_OPTIONAL), ("node", "test.TestNode", "test.version.version1", F_OPTIONAL)])
CreateDataType("test.OptionalStringKeyData", "OptionalStringKeyData", "vmodl.DynamicData", "test.version.version1", [("key", "string", "test.version.version1", F_OPTIONAL), ("val", "int", "test.version.version1", 0)])
CreateDataType("test.PeekSwapTestObject", "PeekSwapTestObject", "vmodl.DynamicData", "test.version.version1", [("booleanProperty", "boolean", "test.version.version1", 0), ("byteProperty", "byte", "test.version.version1", 0), ("shortProperty", "short", "test.version.version1", 0), ("intProperty", "int", "test.version.version1", 0), ("longProperty", "long", "test.version.version1", 0), ("floatProperty", "float", "test.version.version1", 0), ("doubleProperty", "double", "test.version.version1", 0), ("stringProperty", "string", "test.version.version1", 0), ("dateTimeProperty", "vmodl.DateTime", "test.version.version1", 0), ("typeNameProperty", "vmodl.TypeName", "test.version.version1", 0), ("methodNameProperty", "vmodl.MethodName", "test.version.version1", 0), ("propertyPathProperty", "vmodl.PropertyPath", "test.version.version1", 0), ("uriProperty", "vmodl.URI", "test.version.version1", 0), ("binaryProperty", "vmodl.Binary", "test.version.version1", 0), ("optionalBooleanProperty", "boolean", "test.version.version1", F_OPTIONAL), ("optionalByteProperty", "byte", "test.version.version1", F_OPTIONAL), ("optionalShortProperty", "short", "test.version.version1", F_OPTIONAL), ("optionalIntProperty", "int", "test.version.version1", F_OPTIONAL), ("optionalLongProperty", "long", "test.version.version1", F_OPTIONAL), ("optionalFloatProperty", "float", "test.version.version1", F_OPTIONAL), ("optionalDoubleProperty", "double", "test.version.version1", F_OPTIONAL), ("optionalStringProperty", "string", "test.version.version1", F_OPTIONAL), ("optionalDateTimeProperty", "vmodl.DateTime", "test.version.version1", F_OPTIONAL), ("optionalTypeNameProperty", "vmodl.TypeName", "test.version.version1", F_OPTIONAL), ("optionalMethodNameProperty", "vmodl.MethodName", "test.version.version1", F_OPTIONAL), ("optionalPropertyPathProperty", "vmodl.PropertyPath", "test.version.version1", F_OPTIONAL), ("optionalUriProperty", "vmodl.URI", "test.version.version1", F_OPTIONAL), ("optionalBinaryProperty", "vmodl.Binary", "test.version.version1", F_OPTIONAL), ("booleanArrayProperty", "boolean[]", "test.version.version1", 0), ("byteArrayProperty", "byte[]", "test.version.version1", 0), ("shortArrayProperty", "short[]", "test.version.version1", 0), ("intArrayProperty", "int[]", "test.version.version1", 0), ("longArrayProperty", "long[]", "test.version.version1", 0), ("floatArrayProperty", "float[]", "test.version.version1", 0), ("doubleArrayProperty", "double[]", "test.version.version1", 0), ("stringArrayProperty", "string[]", "test.version.version1", 0), ("dateTimeArrayProperty", "vmodl.DateTime[]", "test.version.version1", 0), ("typeNameArrayProperty", "vmodl.TypeName[]", "test.version.version1", 0), ("methodNameArrayProperty", "vmodl.MethodName[]", "test.version.version1", 0), ("propertyPathArrayProperty", "vmodl.PropertyPath[]", "test.version.version1", 0), ("uriArrayProperty", "vmodl.URI[]", "test.version.version1", 0), ("binaryArrayProperty", "vmodl.Binary[]", "test.version.version1", 0), ("dataObjectProperty", "test.PeekSwapTestObject.Foo", "test.version.version1", 0), ("dataObjectArrayProperty", "test.PeekSwapTestObject.Foo[]", "test.version.version1", 0), ("anyProperty", "anyType", "test.version.version1", 0), ("anyArrayProperty", "anyType[]", "test.version.version1", 0), ("enumProperty", "test.PeekSwapTestObject.Baz", "test.version.version1", 0), ("optionalEnumProperty", "test.PeekSwapTestObject.Baz", "test.version.version1", F_OPTIONAL), ("enumArrayProperty", "test.PeekSwapTestObject.Baz[]", "test.version.version1", 0)])
CreateDataType("test.PeekSwapTestObject.Foo", "PeekSwapTestObjectFoo", "vmodl.DynamicData", "test.version.version1", [("data", "int", "test.version.version1", 0)])
CreateDataType("test.PeekSwapTestObject.Bar", "PeekSwapTestObjectBar", "vmodl.DynamicData", "test.version.version1", [("data", "string", "test.version.version1", 0)])
CreateEnumType("test.PeekSwapTestObject.Baz", "PeekSwapTestObjectBaz", "test.version.version1", ["ONE", "TWO", "THREE"])
CreateDataType("test.PersonalityInfo", "PersonalityInfo", "test.AboutInfo", "test.version.version1", [("personalityName", "string", "test.version.version1", 0)])
CreateManagedType("test.PropertyOnlyObj", "PropertyOnlyObj", "vmodl.ManagedObject", "test.version.version1", [("bag", "test.GrabBag", "test.version.version1", 0, None)], None)
CreateManagedType("test.PublicButSecret", "PublicButSecret", "vmodl.ManagedObject", "test.version.version1", None, [("notInWsdl", "NotInWsdl", "test.version.version1", (), (0, "void", "void"), None, None), ("inWsdl", "InWsdl", "test.version.version1", (), (0, "void", "void"), None, None)])
CreateDataType("test.PublicButSecret.InternalNestedData", "PublicButSecretInternalNestedData", "vmodl.DynamicData", "test.version.version1", [("foo", "int", "test.version.version1", 0)])
CreateDataType("test.Recursive", "Recursive", "vmodl.DynamicData", "test.version.version1", [("child", "test.Recursive", "test.version.version1", F_OPTIONAL)])
CreateEnumType("test.Seasons", "Seasons", "test.version.version1", ["WINTER", "SPRING", "SUMMER", "FALL"])
CreateManagedType("test.ShapeExFolder", "ShapeExFolder", "test.AnyFolder", "test.version.version1", [("intKeyData", "test.IntKeyData", "test.version.version1", F_OPTIONAL, None), ("intKeyDataArray", "test.IntKeyData[]", "test.version.version1", F_OPTIONAL, None), ("morKeyData", "test.MorKeyData", "test.version.version1", F_OPTIONAL, None), ("morKeyDataArray", "test.MorKeyData[]", "test.version.version1", F_OPTIONAL, None)], None)
CreateManagedType("test.ShapeFolder", "ShapeFolder", "test.AnyFolder", "test.version.version1", [("sampleShapes", "string[]", "test.version.version1", F_OPTIONAL, None), ("sampleIds", "int[]", "test.version.version1", F_OPTIONAL, None), ("nested", "test.NoKeyData", "test.version.version1", F_OPTIONAL, None), ("nestedArray", "test.StringKeyData[]", "test.version.version1", F_OPTIONAL, None), ("optKeyArray", "test.OptionalStringKeyData[]", "test.version.version1", F_OPTIONAL, None), ("noKeyArray", "test.NoKeyData[]", "test.version.version1", F_OPTIONAL, None)], [("mutateShapes", "MutateShapes", "test.version.version1", (("mutation", "test.ShapeFolder.MutateType", "test.version.version1", 0, None),), (0, "void", "void"), None, None), ("mutateSampleIds", "MutateSampleIds", "test.version.version1", (("mutation", "test.ShapeFolder.MutateType", "test.version.version1", 0, None),), (0, "void", "void"), None, None), ("mutateNested", "MutateNested", "test.version.version1", (("mutation", "test.ShapeFolder.MutateType", "test.version.version1", 0, None),), (0, "void", "void"), None, None), ("mutateNestedArray", "MutateNestedArray", "test.version.version1", (("mutation", "test.ShapeFolder.MutateType", "test.version.version1", 0, None),), (0, "void", "void"), None, None), ("mutateNoKeyArray", "MutateNoKeyArray", "test.version.version1", (("mutation", "test.ShapeFolder.MutateType", "test.version.version1", 0, None),), (0, "void", "void"), None, None)])
CreateEnumType("test.ShapeFolder.MutateType", "ShapeFolderMutateType", "test.version.version1", ["add", "remove", "assign"])
CreateDataType("test.StringKeyData", "StringKeyData", "vmodl.DynamicData", "test.version.version1", [("key", "string", "test.version.version1", 0), ("val", "int", "test.version.version1", 0), ("skSkd", "test.StringKeyData", "test.version.version1", F_OPTIONAL), ("skIkd", "test.IntKeyData", "test.version.version1", F_OPTIONAL), ("skNkd", "test.NoKeyData", "test.version.version1", F_OPTIONAL), ("skSkda", "test.StringKeyData[]", "test.version.version1", F_OPTIONAL), ("skIkda", "test.IntKeyData[]", "test.version.version1", F_OPTIONAL), ("skNkda", "test.NoKeyData[]", "test.version.version1", F_OPTIONAL), ("skSa", "string[]", "test.version.version1", F_OPTIONAL), ("skIa", "int[]", "test.version.version1", F_OPTIONAL)])
CreateDataType("test.SystemHardware", "SystemHardware", "vmodl.DynamicData", "test.version.version1", [("vendor", "string", "test.version.version1", 0), ("model", "string", "test.version.version1", 0), ("uuid", "string", "test.version.version1", 0), ("memorySizeMb", "int", "test.version.version1", 0), ("cpuMhz", "int", "test.version.version1", 0), ("cpuCount", "int", "test.version.version1", 0), ("logicalCpuCount", "int", "test.version.version1", 0), ("numNics", "int", "test.version.version1", 0), ("numHBAs", "int", "test.version.version1", 0)])
CreateDataType("test.Task", "Task", "vmodl.DynamicData", "test.version.version1", None)
CreateDataType("test.TestFault", "TestFault", "vmodl.MethodFault", "test.version.version1", [("magicNumber", "int", "test.version.version1", 0)])
CreateDataType("test.TestFormatObjectFlags", "TestFormatObjectFlags", "vmodl.DynamicData", "test.version.version1", [("testHexIntFlag", "int", "test.version.version1", 0), ("testHideTypesFlag", "test.Task", "test.version.version1", 0), ("testSecretFlag", "string", "test.version.version1", F_SECRET)])
CreateManagedType("test.TestNode", "TestNode", "vmodl.ManagedObject", "test.version.version1", [("name", "string", "test.version.version1", 0, "System.View"), ("privateInfo", "string", "test.version.version1", 0, None), ("publicInfo", "string", "test.version.version1", 0, "System.Anonymous"), ("parent", "test.TestNode", "test.version.version1", F_OPTIONAL, None), ("children", "test.TestNode[]", "test.version.version1", F_OPTIONAL, "System.View")], [("mutate", "Mutate", "test.version.version1", (), (0, "void", "void"), "Test.ObjectMutate", None)])
CreateManagedType("test.TestObject", "TestObject", "vmodl.ManagedObject", "test.version.version1", [("any", "anyType", "test.version.version1", F_OPTIONAL, None), ("anyV6", "anyType", "test.version.version6", 0, None), ("base", "test.Base", "test.version.version1", 0, None), ("self", "test.TestObject", "test.version.version1", 0, None), ("propertyPath", "vmodl.PropertyPath", "test.version.version1", 0, None), ("typeName", "vmodl.TypeName", "test.version.version1", 0, None), ("versionedTypeName", "vmodl.TypeName", "test.version.version1", 0, None), ("versionedTypeNameArray", "vmodl.TypeName[]", "test.version.version1", 0, None), ("versionedMethodName", "vmodl.MethodName", "test.version.version1", 0, None), ("versionedMethodNameArray", "vmodl.MethodName[]", "test.version.version1", 0, None), ("uri", "vmodl.URI", "test.version.version6", 0, None), ("binary", "vmodl.Binary", "test.version.version6", 0, None), ("nested", "test.Container.Nested", "test.version.version1", 0, None), ("nestedManaged", "test.Container.NestedManaged", "test.version.version1", 0, None), ("linker", "test.TestObject.Linker", "test.version.version1", F_OPTIONAL, None), ("dynamo", "test.Dynamo", "test.version.version1", F_OPTIONAL, None), ("insaneFieldName", "test.InsaneFieldName", "test.version.version1", 0, None)], [("makeArray", "MakeArray", "test.version.version1", (("val", "test.TestObject.TestEnum", "test.version.version1", 0, None),("length", "int", "test.version.version1", 0, None),), (F_OPTIONAL, "test.TestObject.TestEnum[]", "test.TestObject.TestEnum[]"), None, None), ("mode", "Mode", "test.version.version1", (("samples", "test.TestObject.TestEnum[]", "test.version.version1", F_OPTIONAL, None),), (0, "test.TestObject.TestEnum", "test.TestObject.TestEnum"), None, None), ("updateAny", "UpdateAny", "test.version.version1", (("val", "anyType", "test.version.version1", F_OPTIONAL, None),), (0, "void", "void"), None, None), ("updateAnyV6", "UpdateAnyV6", "test.version.version6", (("val", "anyType", "test.version.version6", 0, None),), (0, "void", "void"), None, None), ("updateBase", "UpdateBase", "test.version.version1", (("val", "test.Base", "test.version.version1", 0, None),), (0, "void", "void"), None, None), ("makeSelfArray", "MakeSelfArray", "test.version.version1", (("length", "int", "test.version.version1", 0, None),), (F_OPTIONAL, "test.TestObject[]", "test.TestObject[]"), None, ["vmodl.fault.InvalidRequest", ]), ("expectSelfArray", "ExpectSelfArray", "test.version.version1", (("testObjects", "vmodl.ManagedObject[]", "test.version.version1", 0, None),), (0, "void", "void"), None, ["vmodl.fault.InvalidRequest", ]), ("expectSelf", "ExpectSelf", "test.version.version1", (("testObject", "vmodl.ManagedObject", "test.version.version1", 0, None),), (0, "void", "void"), None, ["vmodl.fault.InvalidRequest", ]), ("badHoodoo", "BadHoodoo", "test.version.version1", (), (0, "void", "void"), None, ["test.TestFault", ]), ("passFault", "PassFault", "test.version.version1", (("faultOne", "vmodl.MethodFault", "test.version.version1", 0, None),("faultTwo", "vmodl.MethodFault", "test.version.version1", 0, None),), (0, "vmodl.MethodFault", "vmodl.MethodFault"), None, None), ("updateNested", "UpdateNested", "test.version.version1", (("val", "test.Container.Nested", "test.version.version1", 0, None),), (0, "void", "void"), None, None), ("latch", "Latch", "test.version.version1", (("val", "string", "test.version.version1", F_OPTIONAL, None),), (F_OPTIONAL, "string", "string"), None, None), ("nullReturn", "NullReturn", "test.version.version1", (("val", "anyType", "test.version.version1", 0, None),), (0, "anyType", "anyType"), None, None), ("emptyReturn", "EmptyReturn", "test.version.version1", (), (0, "int[]", "int[]"), None, None), ("updateLinker", "UpdateLinker", "test.version.version1", (("linker", "test.TestObject.Linker", "test.version.version1", 0, None),), (0, "void", "void"), None, None), ("updateDynamo", "UpdateDynamo", "test.version.version1", (("dynamo", "test.Dynamo", "test.version.version1", 0, None),), (0, "void", "void"), None, None), ("taskMethod", "TaskMethod_Task", "test.version.version1", (), (0, "test.Task", "void"), None, None), ("nonTaskMethod", "NonTaskMethod", "test.version.version1", (), (0, "void", "void"), None, None), ("testEventAnnotation", "TestEventAnnotation", "test.version.version1", (), (0, "void", "void"), None, ["test.TestFault", "vmodl.fault.InvalidRequest", ]), ("internalMethod", "InternalMethod", "test.version.version1", (), (0, "void", "void"), None, None), ("bug161795", "Bug161795", "test.version.version1", (), (0, "void", "void"), None, ["test.AggregatorFault", ]), ("throwHugeFault", "ThrowHugeFault", "test.version.version1", (), (0, "void", "void"), None, ["test.HugeFault", ]), ("retrieveVersionedDataObject", "RetrieveVersionedDataObject", "test.version.version1", (), (0, "test.Version1DataObject", "test.Version1DataObject"), None, None), ("retrieveVersionedProperties", "RetrieveVersionedProperties", "test.version.version1", (), (0, "test.VersionedProperties", "test.VersionedProperties"), None, None), ("waitAWhile", "WaitAWhile", "test.version.version1", (("microseconds", "long", "test.version.version1", 0, None),), (0, "void", "void"), None, None), ("testPublicVersionedMoRef", "TestPublicVersionedMoRef", "test.version.version4", (("moRef", "test.HostSystem", "test.version.version4", 0, None),), (0, "void", "void"), None, ["test.TestFault", ]), ("testInternalVersionedMoRef", "TestInternalVersionedMoRef", "test.version.version4", (("moRef", "test.HostSystem", "test.version.version4", 0, None),), (0, "void", "void"), None, ["test.TestFault", ]), ("RetrieveSessionUserBinding", "RetrieveSessionUserBinding", "test.version.version1", (), (0, "test.Version1DataObject", "test.Version1DataObject"), None, None), ("ExpectSOAPHeaders", "ExpectSOAPHeaders", "test.version.version1", (("value1", "string", "test.version.version1", 0, None),("value2", "string", "test.version.version1", 0, None),), (0, "boolean", "boolean"), None, None)])
CreateEnumType("test.TestObject.TestEnum", "TestObjectTestEnum", "test.version.version1", ["A", "B", "C"])
CreateDataType("test.TestObject.Linker", "TestObjectLinker", "vmodl.DynamicData", "test.version.version1", [("preLink", "test.Base", "test.version.version1", F_LINK | F_OPTIONAL), ("array", "test.Base[]", "test.version.version1", F_LINKABLE | F_OPTIONAL), ("postLink", "test.Base", "test.version.version1", F_LINK | F_OPTIONAL), ("arrayLink", "test.Base[]", "test.version.version1", F_LINK | F_OPTIONAL), ("arrayLaterLink", "test.Base[]", "test.version.version1", F_LINK | F_OPTIONAL), ("yin", "test.TestObject.Linker.Yin", "test.version.version1", F_LINKABLE), ("yang", "test.TestObject.Linker.Yang", "test.version.version1", F_LINKABLE), ("laterArray", "test.Base[]", "test.version.version1", F_LINKABLE | F_OPTIONAL)])
CreateDataType("test.TestObject.Linker.Yin", "TestObjectLinkerYin", "vmodl.DynamicData", "test.version.version1", [("yang", "test.TestObject.Linker.Yang", "test.version.version1", F_LINK | F_OPTIONAL), ("key", "string", "test.version.version1", 0)])
CreateDataType("test.TestObject.Linker.Yang", "TestObjectLinkerYang", "vmodl.DynamicData", "test.version.version1", [("yin", "test.TestObject.Linker.Yin", "test.version.version1", F_LINK | F_OPTIONAL), ("key", "string", "test.version.version1", 0)])
CreateEnumType("test.TestObject.Constants", "TestObjectConstants", "test.version.version1", ["foo", "bar", "baz"])
CreateDataType("test.TestRuntimeFault", "TestRuntimeFault", "vmodl.RuntimeFault", "test.version.version1", [("magicNumber", "int", "test.version.version1", 0)])
CreateManagedType("test.TwinTestObject", "TwinTestObject", "vmodl.ManagedObject", "test.version.version1", [("typeName", "vmodl.TypeName", "test.version.version1", 0, None)], None)
CreateDataType("test.UpdatesServiceContents", "UpdatesServiceContents", "vmodl.DynamicData", "test.version.version1", [("propertyCollector", "vmodl.query.PropertyCollector", "test.version.version1", 0), ("root", "test.AnyFolder", "test.version.version1", 0)])
CreateManagedType("test.UpdatesServiceInstance", "UpdatesServiceInstance", "vmodl.ManagedObject", "test.version.version1", [("tick", "long", "test.version.version1", 0, None)], [("retrieveContents", "RetrieveUpdatesServiceContents", "test.version.version1", (), (0, "test.UpdatesServiceContents", "test.UpdatesServiceContents"), None, None), ("createShapeFolder", "CreateShapeFolder", "test.version.version1", (("parent", "test.AnyFolder", "test.version.version1", 0, None),("name", "string", "test.version.version1", 0, None),), (0, "test.ShapeFolder", "test.ShapeFolder"), None, None), ("stop", "Stop", "test.version.version1", (), (0, "void", "void"), None, None), ("getCollectorUpdates", "GetCollectorUpdates", "test.version.version1", (("vfilter", "test.VersionedFilter[]", "test.version.version1", 0, None),("wait", "boolean", "test.version.version1", 0, None),), (0, "anyType", "anyType"), None, None), ("updateEffectiveRoles", "UpdateEffectiveRoles", "test.version.version1", (), (0, "void", "void"), None, None)])
CreateManagedType("test.Vdt", "Vdt", "vmodl.ManagedObject", "test.version.version1", None, [("trace", "Trace", "test.version.version1", (("i", "int", "test.version.version1", 0, None),), (0, "void", "void"), None, None)])
CreateDataType("test.Version1DataObject", "Version1DataObject", "vmodl.DynamicData", "test.version.version1", [("prop1", "string", "test.version.version1", F_OPTIONAL)])
CreateDataType("test.Version2DataObject", "Version2DataObject", "test.Version1DataObject", "test.version.version2", [("prop2", "string", "test.version.version2", F_OPTIONAL)])
CreateDataType("test.Version3DataObject", "Version3DataObject", "test.Version2DataObject", "test.version.version3", [("prop3", "string", "test.version.version3", F_OPTIONAL)])
CreateManagedType("test.Version3ManagedObject", "Version3ManagedObject", "vmodl.ManagedObject", "test.version.version3", None, None)
CreateDataType("test.VersionedFilter", "VersionedFilter", "vmodl.DynamicData", "test.version.version1", [("version", "string", "test.version.version1", 0), ("filter", "vmodl.ManagedObject", "test.version.version1", 0)])
CreateDataType("test.VersionedProperties", "VersionedProperties", "vmodl.DynamicData", "test.version.version1", [("version1Prop", "string", "test.version.version1", F_OPTIONAL), ("version2Prop", "string", "test.version.version2", F_OPTIONAL), ("version3Prop", "string", "test.version.version3", F_OPTIONAL), ("version4MoRefPub", "test.HostSystem", "test.version.version4", F_OPTIONAL), ("version4MoRefArrayPub", "test.HostSystem[]", "test.version.version4", F_OPTIONAL), ("version5MoRefPub", "test.HostSystem", "test.version.version5", F_OPTIONAL)])
CreateManagedType("test.WsSecurityObject", "WsSecurityObject", "vmodl.ManagedObject", "test.version.version1", None, [("Login", "WsSecurityLogin", "test.version.version1", (), (0, "boolean", "boolean"), None, None)])
CreateDataType("test.WsSecurityObject.AuthenticationFault", "WsSecurityObjectAuthenticationFault", "vmodl.MethodFault", "test.version.version1", None)
CreateDataType("test.fooDataObject", "FooDataObject", "vmodl.DynamicData", "test.version.version1", [("enumProperty", "test.Seasons", "test.version.version1", 0), ("booleanProperty", "boolean", "test.version.version1", 0), ("byteProperty", "byte", "test.version.version1", F_OPTIONAL), ("shortProperty", "short", "test.version.version1", F_OPTIONAL), ("intProperty", "int", "test.version.version1", 0), ("floatProperty", "float", "test.version.version1", 0), ("doubleProperty", "double", "test.version.version1", 0), ("dateTimeProperty", "vmodl.DateTime", "test.version.version1", 0), ("host", "test.HostSystem", "test.version.version1", 0)])
CreateDataType("test.i18nTestDataObject", "I18nTestDataObject", "test.fooDataObject", "test.version.version1", [("strMine", "string", "test.version.version1", 0), ("longField", "long", "test.version.version1", 0), ("localizableStringProperty", "string", "test.version.version1", 0)])
CreateDataType("test.vim.AboutInfo", "AboutInfo", "vmodl.DynamicData", "test.version.version1", [("name", "string", "test.version.version1", 0), ("fullName", "string", "test.version.version1", 0), ("vendor", "string", "test.version.version1", 0), ("version", "string", "test.version.version1", 0), ("build", "string", "test.version.version1", 0), ("localeVersion", "string", "test.version.version1", F_OPTIONAL), ("localeBuild", "string", "test.version.version1", F_OPTIONAL), ("osType", "string", "test.version.version1", 0), ("productLineId", "string", "test.version.version1", 0), ("apiType", "string", "test.version.version1", 0), ("apiVersion", "string", "test.version.version1", 0), ("instanceUuid", "string", "test.version.version5", F_OPTIONAL), ("licenseProductName", "string", "test.version.version5", F_OPTIONAL), ("licenseProductVersion", "string", "test.version.version5", F_OPTIONAL)])
CreateManagedType("test.vim.Datastore", "Datastore", "vmodl.ManagedObject", "test.version.version1", None, None)
CreateEnumType("test.vim.Datastore.Accessible", "DatastoreAccessible", "test.version.version5", ["True", "False"])
CreateDataType("test.vim.Datastore.Summary", "DatastoreSummary", "vmodl.DynamicData", "test.version.version1", [("datastore", "test.vim.Datastore", "test.version.version1", F_OPTIONAL), ("name", "string", "test.version.version1", 0), ("url", "string", "test.version.version1", 0), ("capacity", "long", "test.version.version1", 0), ("freeSpace", "long", "test.version.version1", 0), ("uncommitted", "long", "test.version.version5", F_OPTIONAL), ("accessible", "boolean", "test.version.version1", 0), ("multipleHostAccess", "boolean", "test.version.version1", F_OPTIONAL), ("type", "string", "test.version.version1", 0)])
CreateDataType("test.vim.Datastore.Info", "DatastoreInfo", "vmodl.DynamicData", "test.version.version1", [("name", "string", "test.version.version1", 0), ("url", "string", "test.version.version1", 0), ("freeSpace", "long", "test.version.version1", 0), ("maxFileSize", "long", "test.version.version1", 0), ("drsUnfairnessThreshold", "int", "test.version.version5", F_OPTIONAL), ("timestamp", "vmodl.DateTime", "test.version.version5", F_OPTIONAL)])
CreateDataType("test.vim.Datastore.Capability", "DatastoreCapability", "vmodl.DynamicData", "test.version.version1", [("directoryHierarchySupported", "boolean", "test.version.version1", 0), ("rawDiskMappingsSupported", "boolean", "test.version.version1", 0), ("perFileThinProvisioningSupported", "boolean", "test.version.version1", 0)])
CreateDataType("test.vim.Datastore.HostMount", "DatastoreHostMount", "vmodl.DynamicData", "test.version.version1", [("key", "test.vim.HostSystem", "test.version.version1", 0), ("mountInfo", "test.vim.host.MountInfo", "test.version.version1", 0)])
CreateDataType("test.vim.Description", "Description", "vmodl.DynamicData", "test.version.version1", [("label", "string", "test.version.version1", 0), ("summary", "string", "test.version.version1", 0)])
CreateDataType("test.vim.ElementDescription", "ElementDescription", "test.vim.Description", "test.version.version1", [("key", "string", "test.version.version1", 0)])
CreateManagedType("test.vim.HostSystem", "HostSystem", "vmodl.ManagedObject", "test.version.version1", [("config", "test.vim.host.ConfigInfo", "test.version.version1", F_OPTIONAL, None)], None)
CreateDataType("test.vim.InheritablePolicy", "InheritablePolicy", "vmodl.DynamicData", "test.version.version5", [("inherited", "boolean", "test.version.version5", 0)])
CreateDataType("test.vim.KeyValue", "KeyValue", "vmodl.DynamicData", "test.version.version2", [("key", "string", "test.version.version2", 0), ("value", "string", "test.version.version2", 0)])
CreateDataType("test.vim.LongPolicy", "LongPolicy", "test.vim.InheritablePolicy", "test.version.version5", [("value", "long", "test.version.version5", F_OPTIONAL)])
CreateManagedType("test.vim.ManagedEntity", "ManagedEntity", "vmodl.ManagedObject", "test.version.version1", None, None)
CreateEnumType("test.vim.ManagedEntity.Status", "ManagedEntityStatus", "test.version.version1", ["gray", "green", "yellow", "red"])
CreateDataType("test.vim.ManagedEntity.Foo", "ManagedEntityFoo", "vmodl.DynamicData", "test.version.version1", [("bar", "int", "test.version.version1", 0)])
CreateManagedType("test.vim.Network", "Network", "vmodl.ManagedObject", "test.version.version1", None, None)
CreateDataType("test.vim.NumericRange", "NumericRange", "vmodl.DynamicData", "test.version.version5", [("start", "int", "test.version.version5", 0), ("end", "int", "test.version.version5", 0)])
CreateDataType("test.vim.ResourceAllocationInfo", "ResourceAllocationInfo", "vmodl.DynamicData", "test.version.version1", [("reservation", "long", "test.version.version1", F_OPTIONAL), ("expandableReservation", "boolean", "test.version.version1", F_OPTIONAL), ("limit", "long", "test.version.version1", F_OPTIONAL), ("shares", "test.vim.SharesInfo", "test.version.version1", F_OPTIONAL), ("overheadLimit", "long", "test.version.version2", F_OPTIONAL)])
CreateDataType("test.vim.ResourceConfigSpec", "ResourceConfigSpec", "vmodl.DynamicData", "test.version.version1", [("entity", "test.vim.ManagedEntity", "test.version.version1", F_OPTIONAL), ("changeVersion", "string", "test.version.version1", F_OPTIONAL), ("lastModified", "vmodl.DateTime", "test.version.version1", F_OPTIONAL), ("cpuAllocation", "test.vim.ResourceAllocationInfo", "test.version.version1", 0), ("memoryAllocation", "test.vim.ResourceAllocationInfo", "test.version.version1", 0), ("storageIOAllocation", "test.vim.StorageIOAllocationInfo[]", "test.version.version5", F_OPTIONAL), ("networkBandwidthAllocation", "test.vim.NetworkBandwidthAllocationInfo[]", "test.version.version5", F_OPTIONAL)])
CreateDataType("test.vim.SharesInfo", "SharesInfo", "vmodl.DynamicData", "test.version.version1", [("shares", "int", "test.version.version1", 0), ("level", "test.vim.SharesInfo.Level", "test.version.version1", 0)])
CreateEnumType("test.vim.SharesInfo.Level", "SharesLevel", "test.version.version1", ["low", "normal", "high", "custom"])
CreateDataType("test.vim.StorageIOAllocationInfo", "StorageIOAllocationInfo", "test.vim.ResourceAllocationInfo", "test.version.version5", [("datastore", "test.vim.Datastore", "test.version.version5", 0)])
CreateManagedType("test.vim.VirtualMachine", "VirtualMachine", "vmodl.ManagedObject", "test.version.version1", [("guest", "test.vim.vm.GuestInfo", "test.version.version1", F_OPTIONAL, None), ("config", "test.vim.vm.ConfigInfo", "test.version.version1", F_OPTIONAL, None)], None)
CreateEnumType("test.vim.VirtualMachine.PowerState", "VirtualMachinePowerState", "test.version.version1", ["poweredOff", "poweredOn", "suspended"])
CreateEnumType("test.vim.VirtualMachine.ConnectionState", "VirtualMachineConnectionState", "test.version.version1", ["connected", "disconnected", "orphaned", "inaccessible", "invalid"])
CreateDataType("test.vim.VirtualMachine.MksTicket", "VirtualMachineMksTicket", "vmodl.DynamicData", "test.version.version1", [("ticket", "string", "test.version.version1", F_SECRET), ("cfgFile", "string", "test.version.version1", 0), ("host", "string", "test.version.version1", F_OPTIONAL), ("port", "int", "test.version.version1", F_OPTIONAL), ("sslThumbprint", "string", "test.version.version2", F_OPTIONAL)])
CreateEnumType("test.vim.VirtualMachine.FaultToleranceState", "VirtualMachineFaultToleranceState", "test.version.version5", ["notConfigured", "disabled", "enabled", "needSecondary", "starting", "running"])
CreateEnumType("test.vim.VirtualMachine.RecordReplayState", "VirtualMachineRecordReplayState", "test.version.version5", ["recording", "replaying", "inactive"])
CreateEnumType("test.vim.VirtualMachine.NeedSecondaryReason", "VirtualMachineNeedSecondaryReason", "test.version.version5", ["initializing", "divergence", "lostConnection", "partialHardwareFailure", "userAction", "other"])
CreateDataType("test.vim.VirtualMachine.DisplayTopology", "VirtualMachineDisplayTopology", "vmodl.DynamicData", "test.version.version4", [("x", "int", "test.version.version4", 0), ("y", "int", "test.version.version4", 0), ("width", "int", "test.version.version4", 0), ("height", "int", "test.version.version4", 0)])
CreateDataType("test.vim.VirtualMachine.DiskChangeInfo", "DiskChangeInfo", "vmodl.DynamicData", "test.version.version5", [("startOffset", "long", "test.version.version5", 0), ("length", "long", "test.version.version5", 0), ("changedArea", "test.vim.VirtualMachine.DiskChangeInfo.DiskChangeExtent[]", "test.version.version5", F_OPTIONAL)])
CreateDataType("test.vim.VirtualMachine.DiskChangeInfo.DiskChangeExtent", "DiskChangeExtent", "vmodl.DynamicData", "test.version.version5", [("start", "long", "test.version.version5", 0), ("length", "long", "test.version.version5", 0)])
CreateDataType("test.vim.dvs.DistributedVirtualPort", "DistributedVirtualPort", "vmodl.DynamicData", "test.version.version5", [("key", "string", "test.version.version5", 0), ("config", "test.vim.dvs.DistributedVirtualPort.ConfigInfo", "test.version.version5", 0), ("dvsUuid", "string", "test.version.version5", 0), ("portgroupKey", "string", "test.version.version5", F_OPTIONAL), ("proxyHost", "test.vim.HostSystem", "test.version.version5", F_OPTIONAL), ("connectee", "test.vim.dvs.PortConnectee", "test.version.version5", F_OPTIONAL), ("conflict", "boolean", "test.version.version5", 0), ("conflictPortKey", "string", "test.version.version5", F_OPTIONAL), ("state", "test.vim.dvs.DistributedVirtualPort.State", "test.version.version5", F_OPTIONAL), ("connectionCookie", "int", "test.version.version5", F_OPTIONAL), ("lastStatusChange", "vmodl.DateTime", "test.version.version5", 0)])
CreateDataType("test.vim.dvs.DistributedVirtualPort.OverlayParameter", "DVPortOverlayParameter", "vmodl.DynamicData", "test.version.version5", [("overlayInstanceKey", "string", "test.version.version5", 0), ("value", "int", "test.version.version5", 0)])
CreateDataType("test.vim.dvs.DistributedVirtualPort.ConfigSpec", "DVPortConfigSpec", "vmodl.DynamicData", "test.version.version5", [("operation", "string", "test.version.version5", 0), ("key", "string", "test.version.version5", F_OPTIONAL), ("name", "string", "test.version.version5", F_OPTIONAL), ("scope", "test.vim.ManagedEntity[]", "test.version.version5", F_OPTIONAL), ("description", "string", "test.version.version5", F_OPTIONAL), ("setting", "test.vim.dvs.DistributedVirtualPort.Setting", "test.version.version5", F_OPTIONAL), ("configVersion", "string", "test.version.version5", F_OPTIONAL)])
CreateDataType("test.vim.dvs.DistributedVirtualPort.ConfigInfo", "DVPortConfigInfo", "vmodl.DynamicData", "test.version.version5", [("name", "string", "test.version.version5", F_OPTIONAL), ("scope", "test.vim.ManagedEntity[]", "test.version.version5", F_OPTIONAL), ("description", "string", "test.version.version5", F_OPTIONAL), ("setting", "test.vim.dvs.DistributedVirtualPort.Setting", "test.version.version5", F_OPTIONAL), ("configVersion", "string", "test.version.version5", 0)])
CreateDataType("test.vim.dvs.DistributedVirtualPort.TrafficShapingPolicy", "DVSTrafficShapingPolicy", "test.vim.InheritablePolicy", "test.version.version5", [("enabled", "test.vim.BoolPolicy", "test.version.version5", F_OPTIONAL), ("averageBandwidth", "test.vim.LongPolicy", "test.version.version5", F_OPTIONAL), ("peakBandwidth", "test.vim.LongPolicy", "test.version.version5", F_OPTIONAL), ("burstSize", "test.vim.LongPolicy", "test.version.version5", F_OPTIONAL)])
CreateDataType("test.vim.dvs.DistributedVirtualPort.VendorSpecificConfig", "DVSVendorSpecificConfig", "test.vim.InheritablePolicy", "test.version.version5", [("keyValue", "test.vim.dvs.KeyedOpaqueBlob[]", "test.version.version5", F_OPTIONAL)])
CreateDataType("test.vim.dvs.DistributedVirtualPort.OverlayParameterPolicy", "DVSoverlayParameterPolicy", "test.vim.InheritablePolicy", "test.version.version5", [("keyValue", "test.vim.dvs.DistributedVirtualPort.OverlayParameter[]", "test.version.version5", F_OPTIONAL)])
CreateDataType("test.vim.dvs.DistributedVirtualPort.Setting", "DVPortSetting", "vmodl.DynamicData", "test.version.version5", [("blocked", "test.vim.BoolPolicy", "test.version.version5", F_OPTIONAL), ("inShapingPolicy", "test.vim.dvs.DistributedVirtualPort.TrafficShapingPolicy", "test.version.version5", F_OPTIONAL), ("outShapingPolicy", "test.vim.dvs.DistributedVirtualPort.TrafficShapingPolicy", "test.version.version5", F_OPTIONAL), ("overlayParameter", "test.vim.dvs.DistributedVirtualPort.OverlayParameterPolicy", "test.version.version5", F_OPTIONAL), ("vendorSpecificConfig", "test.vim.dvs.DistributedVirtualPort.VendorSpecificConfig", "test.version.version5", F_OPTIONAL)])
CreateDataType("test.vim.dvs.DistributedVirtualPort.RuntimeInfo", "DVPortStatus", "vmodl.DynamicData", "test.version.version5", [("linkUp", "boolean", "test.version.version5", 0), ("blocked", "boolean", "test.version.version5", 0), ("vlanIds", "test.vim.NumericRange[]", "test.version.version5", F_OPTIONAL), ("trunkingMode", "boolean", "test.version.version5", F_OPTIONAL), ("mtu", "int", "test.version.version5", F_OPTIONAL), ("linkPeer", "string", "test.version.version5", F_OPTIONAL), ("macAddress", "string", "test.version.version5", F_OPTIONAL)])
CreateDataType("test.vim.dvs.DistributedVirtualPort.State", "DVPortState", "vmodl.DynamicData", "test.version.version5", [("runtimeInfo", "test.vim.dvs.DistributedVirtualPort.RuntimeInfo", "test.version.version5", F_OPTIONAL), ("stats", "test.vim.dvs.PortStatistics", "test.version.version5", 0), ("vendorSpecificState", "test.vim.dvs.KeyedOpaqueBlob[]", "test.version.version5", F_OPTIONAL)])
CreateManagedType("test.vim.dvs.DistributedVirtualPortgroup", "DistributedVirtualPortgroup", "test.vim.Network", "test.version.version5", None, None)
CreateEnumType("test.vim.dvs.DistributedVirtualPortgroup.PortgroupType", "DistributedVirtualPortgroupPortgroupType", "test.version.version5", ["earlyBinding", "lateBinding", "ephemeral"])
CreateDataType("test.vim.dvs.DistributedVirtualPortgroup.PortgroupPolicy", "DVPortgroupPolicy", "vmodl.DynamicData", "test.version.version5", [("blockOverrideAllowed", "boolean", "test.version.version5", 0), ("shapingOverrideAllowed", "boolean", "test.version.version5", 0), ("vendorConfigOverrideAllowed", "boolean", "test.version.version5", 0), ("livePortMovingAllowed", "boolean", "test.version.version5", 0), ("portConfigResetAtDisconnect", "boolean", "test.version.version5", 0)])
CreateEnumType("test.vim.dvs.DistributedVirtualPortgroup.MetaTagName", "DistributedVirtualPortgroupMetaTagName", "test.version.version5", ["dvsName", "portgroupName", "portIndex"])
CreateDataType("test.vim.dvs.DistributedVirtualPortgroup.ConfigSpec", "DVPortgroupConfigSpec", "vmodl.DynamicData", "test.version.version5", [("configVersion", "string", "test.version.version5", F_OPTIONAL), ("name", "string", "test.version.version5", F_OPTIONAL), ("numPorts", "int", "test.version.version5", F_OPTIONAL), ("portNameFormat", "string", "test.version.version5", F_OPTIONAL), ("defaultPortConfig", "test.vim.dvs.DistributedVirtualPort.Setting", "test.version.version5", F_OPTIONAL), ("description", "string", "test.version.version5", F_OPTIONAL), ("type", "string", "test.version.version5", F_OPTIONAL), ("scope", "test.vim.ManagedEntity[]", "test.version.version5", F_OPTIONAL), ("policy", "test.vim.dvs.DistributedVirtualPortgroup.PortgroupPolicy", "test.version.version5", F_OPTIONAL), ("vendorSpecificConfig", "test.vim.dvs.KeyedOpaqueBlob[]", "test.version.version5", F_OPTIONAL)])
CreateDataType("test.vim.dvs.DistributedVirtualPortgroup.ConfigInfo", "DVPortgroupConfigInfo", "vmodl.DynamicData", "test.version.version5", [("key", "string", "test.version.version5", 0), ("name", "string", "test.version.version5", 0), ("numPorts", "int", "test.version.version5", 0), ("distributedVirtualSwitch", "test.vim.DistributedVirtualSwitch", "test.version.version5", F_OPTIONAL), ("defaultPortConfig", "test.vim.dvs.DistributedVirtualPort.Setting", "test.version.version5", F_OPTIONAL), ("description", "string", "test.version.version5", F_OPTIONAL), ("type", "string", "test.version.version5", 0), ("policy", "test.vim.dvs.DistributedVirtualPortgroup.PortgroupPolicy", "test.version.version5", 0), ("portNameFormat", "string", "test.version.version5", F_OPTIONAL), ("scope", "test.vim.ManagedEntity[]", "test.version.version5", F_OPTIONAL), ("vendorSpecificConfig", "test.vim.dvs.KeyedOpaqueBlob[]", "test.version.version5", F_OPTIONAL), ("configVersion", "string", "test.version.version5", F_OPTIONAL)])
CreateDataType("test.vim.dvs.HostMember", "DistributedVirtualSwitchHostMember", "vmodl.DynamicData", "test.version.version5", [("config", "test.vim.dvs.HostMember.ConfigInfo", "test.version.version5", 0), ("productInfo", "test.vim.dvs.ProductSpec", "test.version.version5", F_OPTIONAL), ("uplinkPortKey", "string[]", "test.version.version5", F_OPTIONAL), ("status", "string", "test.version.version5", 0)])
CreateEnumType("test.vim.dvs.HostMember.HostComponentState", "DistributedVirtualSwitchHostMemberHostComponentState", "test.version.version5", ["up", "pending", "outOfSync", "warning", "disconnected", "down"])
CreateDataType("test.vim.dvs.HostMember.ConfigSpec", "DistributedVirtualSwitchHostMemberConfigSpec", "vmodl.DynamicData", "test.version.version5", [("operation", "string", "test.version.version5", 0), ("host", "test.vim.HostSystem", "test.version.version5", 0), ("backing", "test.vim.dvs.HostMember.Backing", "test.version.version5", F_OPTIONAL), ("maxProxySwitchPorts", "int", "test.version.version5", F_OPTIONAL), ("vendorSpecificConfig", "test.vim.dvs.KeyedOpaqueBlob[]", "test.version.version5", F_OPTIONAL)])
CreateDataType("test.vim.dvs.HostMember.PnicSpec", "DistributedVirtualSwitchHostMemberPnicSpec", "vmodl.DynamicData", "test.version.version5", [("pnicDevice", "string", "test.version.version5", 0), ("uplinkPortKey", "string", "test.version.version5", F_OPTIONAL), ("uplinkPortgroupKey", "string", "test.version.version5", F_OPTIONAL), ("connectionCookie", "int", "test.version.version5", F_OPTIONAL)])
CreateDataType("test.vim.dvs.HostMember.Backing", "DistributedVirtualSwitchHostMemberBacking", "vmodl.DynamicData", "test.version.version5", None)
CreateDataType("test.vim.dvs.HostMember.PnicBacking", "DistributedVirtualSwitchHostMemberPnicBacking", "test.vim.dvs.HostMember.Backing", "test.version.version5", [("pnicSpec", "test.vim.dvs.HostMember.PnicSpec[]", "test.version.version5", F_OPTIONAL)])
CreateDataType("test.vim.dvs.HostMember.ConfigInfo", "DistributedVirtualSwitchHostMemberConfigInfo", "vmodl.DynamicData", "test.version.version5", [("host", "test.vim.HostSystem", "test.version.version5", F_OPTIONAL), ("maxProxySwitchPorts", "int", "test.version.version5", 0), ("vendorSpecificConfig", "test.vim.dvs.KeyedOpaqueBlob[]", "test.version.version5", F_OPTIONAL), ("backing", "test.vim.dvs.HostMember.Backing", "test.version.version5", 0)])
CreateDataType("test.vim.dvs.HostProductSpec", "DistributedVirtualSwitchHostProductSpec", "vmodl.DynamicData", "test.version.version5", [("productLineId", "string", "test.version.version5", F_OPTIONAL), ("version", "string", "test.version.version5", F_OPTIONAL)])
CreateDataType("test.vim.dvs.KeyedOpaqueBlob", "DistributedVirtualSwitchKeyedOpaqueBlob", "vmodl.DynamicData", "test.version.version5", [("key", "string", "test.version.version5", 0), ("opaqueData", "string", "test.version.version5", 0)])
CreateDataType("test.vim.dvs.PortConnectee", "DistributedVirtualSwitchPortConnectee", "vmodl.DynamicData", "test.version.version5", [("connectedEntity", "test.vim.ManagedEntity", "test.version.version5", F_OPTIONAL), ("nicKey", "string", "test.version.version5", F_OPTIONAL), ("type", "string", "test.version.version5", F_OPTIONAL), ("addressHint", "string", "test.version.version5", F_OPTIONAL)])
CreateEnumType("test.vim.dvs.PortConnectee.ConnecteeType", "DistributedVirtualSwitchPortConnecteeConnecteeType", "test.version.version5", ["pnic", "vmVnic", "hostConsoleVnic", "hostVmkVnic"])
CreateDataType("test.vim.dvs.PortConnection", "DistributedVirtualSwitchPortConnection", "vmodl.DynamicData", "test.version.version5", [("switchUuid", "string", "test.version.version5", 0), ("portgroupKey", "string", "test.version.version5", F_OPTIONAL), ("portKey", "string", "test.version.version5", F_OPTIONAL), ("connectionCookie", "int", "test.version.version5", F_OPTIONAL)])
CreateDataType("test.vim.dvs.PortStatistics", "DistributedVirtualSwitchPortStatistics", "vmodl.DynamicData", "test.version.version5", [("packetsInMulticast", "long", "test.version.version5", 0), ("packetsOutMulticast", "long", "test.version.version5", 0), ("bytesInMulticast", "long", "test.version.version5", 0), ("bytesOutMulticast", "long", "test.version.version5", 0), ("packetsInUnicast", "long", "test.version.version5", 0), ("packetsOutUnicast", "long", "test.version.version5", 0), ("bytesInUnicast", "long", "test.version.version5", 0), ("bytesOutUnicast", "long", "test.version.version5", 0), ("packetsInBroadcast", "long", "test.version.version5", 0), ("packetsOutBroadcast", "long", "test.version.version5", 0), ("bytesInBroadcast", "long", "test.version.version5", 0), ("bytesOutBroadcast", "long", "test.version.version5", 0), ("packetsInDropped", "long", "test.version.version5", 0), ("packetsOutDropped", "long", "test.version.version5", 0), ("packetsInException", "long", "test.version.version5", 0), ("packetsOutException", "long", "test.version.version5", 0)])
CreateDataType("test.vim.dvs.ProductSpec", "DistributedVirtualSwitchProductSpec", "vmodl.DynamicData", "test.version.version5", [("name", "string", "test.version.version5", F_OPTIONAL), ("vendor", "string", "test.version.version5", F_OPTIONAL), ("version", "string", "test.version.version5", F_OPTIONAL), ("build", "string", "test.version.version5", F_OPTIONAL), ("forwardingClass", "string", "test.version.version5", F_OPTIONAL), ("bundleId", "string", "test.version.version5", F_OPTIONAL), ("bundleUrl", "string", "test.version.version5", F_OPTIONAL)])
CreateManagedType("test.vim.host.AutoStartManager", "HostAutoStartManager", "vmodl.ManagedObject", "test.version.version1", None, None)
CreateEnumType("test.vim.host.AutoStartManager.Action", "AutoStartAction", "test.version.version1", ["none", "systemDefault", "powerOn", "powerOff", "guestShutdown", "suspend"])
CreateDataType("test.vim.host.AutoStartManager.SystemDefaults", "AutoStartDefaults", "vmodl.DynamicData", "test.version.version1", [("enabled", "boolean", "test.version.version1", F_OPTIONAL), ("startDelay", "int", "test.version.version1", F_OPTIONAL), ("stopDelay", "int", "test.version.version1", F_OPTIONAL), ("waitForHeartbeat", "boolean", "test.version.version1", F_OPTIONAL), ("stopAction", "string", "test.version.version1", F_OPTIONAL)])
CreateDataType("test.vim.host.AutoStartManager.AutoPowerInfo", "AutoStartPowerInfo", "vmodl.DynamicData", "test.version.version1", [("key", "test.vim.VirtualMachine", "test.version.version1", 0), ("startOrder", "int", "test.version.version1", 0), ("startDelay", "int", "test.version.version1", 0), ("waitForHeartbeat", "test.vim.host.AutoStartManager.AutoPowerInfo.WaitHeartbeatSetting", "test.version.version1", 0), ("startAction", "string", "test.version.version1", 0), ("stopDelay", "int", "test.version.version1", 0), ("stopAction", "string", "test.version.version1", 0)])
CreateEnumType("test.vim.host.AutoStartManager.AutoPowerInfo.WaitHeartbeatSetting", "AutoStartWaitHeartbeatSetting", "test.version.version1", ["yes", "no", "systemDefault"])
CreateDataType("test.vim.host.AutoStartManager.Config", "HostAutoStartManagerConfig", "vmodl.DynamicData", "test.version.version1", [("defaults", "test.vim.host.AutoStartManager.SystemDefaults", "test.version.version1", F_OPTIONAL), ("powerInfo", "test.vim.host.AutoStartManager.AutoPowerInfo[]", "test.version.version1", F_OPTIONAL)])
CreateDataType("test.vim.host.CpuIdInfo", "HostCpuIdInfo", "vmodl.DynamicData", "test.version.version1", [("level", "int", "test.version.version1", 0), ("vendor", "string", "test.version.version1", F_OPTIONAL), ("eax", "string", "test.version.version1", F_OPTIONAL), ("ebx", "string", "test.version.version1", F_OPTIONAL), ("ecx", "string", "test.version.version1", F_OPTIONAL), ("edx", "string", "test.version.version1", F_OPTIONAL)])
CreateManagedType("test.vim.host.CpuSchedulerSystem", "HostCpuSchedulerSystem", "vmodl.ManagedObject", "test.version.version1", None, None)
CreateDataType("test.vim.host.CpuSchedulerSystem.HyperThreadScheduleInfo", "HostHyperThreadScheduleInfo", "vmodl.DynamicData", "test.version.version1", [("available", "boolean", "test.version.version1", 0), ("active", "boolean", "test.version.version1", 0), ("config", "boolean", "test.version.version1", 0)])
CreateManagedType("test.vim.host.DatastoreSystem", "HostDatastoreSystem", "vmodl.ManagedObject", "test.version.version1", None, None)
CreateDataType("test.vim.host.DatastoreSystem.Capabilities", "HostDatastoreSystemCapabilities", "vmodl.DynamicData", "test.version.version2", [("nfsMountCreationRequired", "boolean", "test.version.version2", 0), ("nfsMountCreationSupported", "boolean", "test.version.version2", 0), ("localDatastoreSupported", "boolean", "test.version.version2", 0), ("vmfsExtentExpansionSupported", "boolean", "test.version.version5", 0)])
CreateManagedType("test.vim.host.DateTimeSystem", "HostDateTimeSystem", "vmodl.ManagedObject", "test.version.version2", None, None)
CreateDataType("test.vim.host.DateTimeSystem.TimeZone", "HostDateTimeSystemTimeZone", "vmodl.DynamicData", "test.version.version2", [("key", "string", "test.version.version2", 0), ("name", "string", "test.version.version2", 0), ("description", "string", "test.version.version2", 0), ("gmtOffset", "int", "test.version.version2", 0)])
CreateDataType("test.vim.host.Device", "HostDevice", "vmodl.DynamicData", "test.version.version1", [("deviceName", "string", "test.version.version1", 0), ("deviceType", "string", "test.version.version1", 0)])
CreateDataType("test.vim.host.DhcpService", "HostDhcpService", "vmodl.DynamicData", "test.version.version2", [("key", "string", "test.version.version2", 0), ("spec", "test.vim.host.DhcpService.Specification", "test.version.version2", 0)])
CreateDataType("test.vim.host.DhcpService.Specification", "HostDhcpServiceSpec", "vmodl.DynamicData", "test.version.version2", [("virtualSwitch", "string", "test.version.version2", 0), ("defaultLeaseDuration", "int", "test.version.version2", 0), ("leaseBeginIp", "string", "test.version.version2", 0), ("leaseEndIp", "string", "test.version.version2", 0), ("maxLeaseDuration", "int", "test.version.version2", 0), ("unlimitedLease", "boolean", "test.version.version2", 0), ("ipSubnetAddr", "string", "test.version.version2", 0), ("ipSubnetMask", "string", "test.version.version2", 0)])
CreateDataType("test.vim.host.DhcpService.Config", "HostDhcpServiceConfig", "vmodl.DynamicData", "test.version.version2", [("changeOperation", "string", "test.version.version2", F_OPTIONAL), ("key", "string", "test.version.version2", 0), ("spec", "test.vim.host.DhcpService.Specification", "test.version.version2", 0)])
CreateManagedType("test.vim.host.DiagnosticSystem", "HostDiagnosticSystem", "vmodl.ManagedObject", "test.version.version1", None, None)
CreateDataType("test.vim.host.DiskDimensions", "HostDiskDimensions", "vmodl.DynamicData", "test.version.version1", None)
CreateDataType("test.vim.host.DiskDimensions.Chs", "HostDiskDimensionsChs", "vmodl.DynamicData", "test.version.version1", [("cylinder", "long", "test.version.version1", 0), ("head", "int", "test.version.version1", 0), ("sector", "int", "test.version.version1", 0)])
CreateDataType("test.vim.host.DiskDimensions.Lba", "HostDiskDimensionsLba", "vmodl.DynamicData", "test.version.version1", [("blockSize", "int", "test.version.version1", 0), ("block", "long", "test.version.version1", 0)])
CreateDataType("test.vim.host.DiskPartitionInfo", "HostDiskPartitionInfo", "vmodl.DynamicData", "test.version.version1", [("deviceName", "string", "test.version.version1", 0), ("spec", "test.vim.host.DiskPartitionInfo.Specification", "test.version.version1", 0), ("layout", "test.vim.host.DiskPartitionInfo.Layout", "test.version.version1", 0)])
CreateEnumType("test.vim.host.DiskPartitionInfo.Type", "HostDiskPartitionInfoType", "test.version.version1", ["none", "vmfs", "linuxNative", "linuxSwap", "extended", "ntfs", "vmkDiagnostic"])
CreateDataType("test.vim.host.DiskPartitionInfo.Partition", "HostDiskPartitionAttributes", "vmodl.DynamicData", "test.version.version1", [("partition", "int", "test.version.version1", 0), ("startSector", "long", "test.version.version1", 0), ("endSector", "long", "test.version.version1", 0), ("type", "string", "test.version.version1", 0), ("logical", "boolean", "test.version.version1", 0), ("attributes", "byte", "test.version.version1", 0)])
CreateDataType("test.vim.host.DiskPartitionInfo.BlockRange", "HostDiskPartitionBlockRange", "vmodl.DynamicData", "test.version.version1", [("partition", "int", "test.version.version1", F_OPTIONAL), ("type", "string", "test.version.version1", 0), ("start", "test.vim.host.DiskDimensions.Lba", "test.version.version1", 0), ("end", "test.vim.host.DiskDimensions.Lba", "test.version.version1", 0)])
CreateDataType("test.vim.host.DiskPartitionInfo.Specification", "HostDiskPartitionSpec", "vmodl.DynamicData", "test.version.version1", [("chs", "test.vim.host.DiskDimensions.Chs", "test.version.version1", F_OPTIONAL), ("totalSectors", "long", "test.version.version1", F_OPTIONAL), ("partition", "test.vim.host.DiskPartitionInfo.Partition[]", "test.version.version1", F_OPTIONAL)])
CreateDataType("test.vim.host.DiskPartitionInfo.Layout", "HostDiskPartitionLayout", "vmodl.DynamicData", "test.version.version1", [("total", "test.vim.host.DiskDimensions.Lba", "test.version.version1", F_OPTIONAL), ("partition", "test.vim.host.DiskPartitionInfo.BlockRange[]", "test.version.version1", 0)])
CreateDataType("test.vim.host.DnsConfig", "HostDnsConfig", "vmodl.DynamicData", "test.version.version1", [("dhcp", "boolean", "test.version.version1", 0), ("virtualNicDevice", "string", "test.version.version1", F_OPTIONAL), ("hostName", "string", "test.version.version1", 0), ("domainName", "string", "test.version.version1", 0), ("address", "string[]", "test.version.version1", F_OPTIONAL), ("searchDomain", "string[]", "test.version.version1", F_OPTIONAL)])
CreateDataType("test.vim.host.FileSystemMountInfo", "HostFileSystemMountInfo", "vmodl.DynamicData", "test.version.version1", [("mountInfo", "test.vim.host.MountInfo", "test.version.version1", 0), ("volume", "test.vim.host.FileSystemVolume", "test.version.version1", 0)])
CreateDataType("test.vim.host.FileSystemVolume", "HostFileSystemVolume", "vmodl.DynamicData", "test.version.version1", [("type", "string", "test.version.version1", 0), ("name", "string", "test.version.version1", 0), ("capacity", "long", "test.version.version1", 0)])
CreateDataType("test.vim.host.FileSystemVolumeInfo", "HostFileSystemVolumeInfo", "vmodl.DynamicData", "test.version.version1", [("volumeTypeList", "string[]", "test.version.version1", F_OPTIONAL), ("mountInfo", "test.vim.host.FileSystemMountInfo[]", "test.version.version1", F_OPTIONAL)])
CreateDataType("test.vim.host.FirewallInfo", "HostFirewallInfo", "vmodl.DynamicData", "test.version.version1", [("defaultPolicy", "test.vim.host.FirewallInfo.DefaultPolicy", "test.version.version1", 0), ("ruleset", "test.vim.host.Ruleset[]", "test.version.version1", F_OPTIONAL)])
CreateDataType("test.vim.host.FirewallInfo.DefaultPolicy", "HostFirewallDefaultPolicy", "vmodl.DynamicData", "test.version.version1", [("incomingBlocked", "boolean", "test.version.version1", F_OPTIONAL), ("outgoingBlocked", "boolean", "test.version.version1", F_OPTIONAL)])
CreateDataType("test.vim.host.FlagInfo", "HostFlagInfo", "vmodl.DynamicData", "test.version.version2", [("backgroundSnapshotsEnabled", "boolean", "test.version.version2", F_OPTIONAL)])
CreateDataType("test.vim.host.ForceMountedInfo", "HostForceMountedInfo", "vmodl.DynamicData", "test.version.version5", [("persist", "boolean", "test.version.version5", 0), ("mounted", "boolean", "test.version.version5", 0)])
CreateDataType("test.vim.host.HostBusAdapter", "HostHostBusAdapter", "vmodl.DynamicData", "test.version.version1", [("key", "string", "test.version.version1", F_OPTIONAL), ("device", "string", "test.version.version1", 0), ("bus", "int", "test.version.version1", 0), ("status", "string", "test.version.version1", 0), ("model", "string", "test.version.version1", 0), ("driver", "string", "test.version.version1", F_OPTIONAL), ("pci", "string", "test.version.version1", F_OPTIONAL)])
CreateDataType("test.vim.host.HostProxySwitch", "HostProxySwitch", "vmodl.DynamicData", "test.version.version5", [("dvsUuid", "string", "test.version.version5", 0), ("dvsName", "string", "test.version.version5", 0), ("key", "string", "test.version.version5", 0), ("numPorts", "int", "test.version.version5", 0), ("numPortsAvailable", "int", "test.version.version5", 0), ("uplinkPort", "test.vim.KeyValue[]", "test.version.version5", F_OPTIONAL), ("mtu", "int", "test.version.version5", F_OPTIONAL), ("pnic", "test.vim.host.PhysicalNic[]", "test.version.version5", F_LINK | F_OPTIONAL), ("spec", "test.vim.host.HostProxySwitch.Specification", "test.version.version5", 0)])
CreateDataType("test.vim.host.HostProxySwitch.Specification", "HostProxySwitchSpec", "vmodl.DynamicData", "test.version.version5", [("backing", "test.vim.dvs.HostMember.Backing", "test.version.version5", F_OPTIONAL)])
CreateDataType("test.vim.host.HostProxySwitch.Config", "HostProxySwitchConfig", "vmodl.DynamicData", "test.version.version5", [("changeOperation", "string", "test.version.version5", F_OPTIONAL), ("uuid", "string", "test.version.version5", 0), ("spec", "test.vim.host.HostProxySwitch.Specification", "test.version.version5", F_OPTIONAL)])
CreateDataType("test.vim.host.IpConfig", "HostIpConfig", "vmodl.DynamicData", "test.version.version1", [("dhcp", "boolean", "test.version.version1", 0), ("ipAddress", "string", "test.version.version1", F_OPTIONAL), ("subnetMask", "string", "test.version.version1", F_OPTIONAL), ("ipV6Config", "test.vim.host.IpConfig.IpV6AddressConfiguration", "test.version.version5", F_OPTIONAL)])
CreateEnumType("test.vim.host.IpConfig.IpV6AddressConfigType", "HostIpConfigIpV6AddressConfigType", "test.version.version5", ["other", "manual", "dhcp", "linklayer", "random"])
CreateEnumType("test.vim.host.IpConfig.IpV6AddressStatus", "HostIpConfigIpV6AddressStatus", "test.version.version5", ["preferred", "deprecated", "invalid", "inaccessible", "unknown", "tentative", "duplicate"])
CreateDataType("test.vim.host.IpConfig.IpV6Address", "HostIpConfigIpV6Address", "vmodl.DynamicData", "test.version.version5", [("ipAddress", "string", "test.version.version5", 0), ("prefixLength", "int", "test.version.version5", 0), ("origin", "string", "test.version.version5", F_OPTIONAL), ("dadState", "string", "test.version.version5", F_OPTIONAL), ("lifetime", "vmodl.DateTime", "test.version.version5", F_OPTIONAL), ("operation", "string", "test.version.version5", F_OPTIONAL)])
CreateDataType("test.vim.host.IpConfig.IpV6AddressConfiguration", "HostIpConfigIpV6AddressConfiguration", "vmodl.DynamicData", "test.version.version5", [("ipV6Address", "test.vim.host.IpConfig.IpV6Address[]", "test.version.version5", F_OPTIONAL), ("autoConfigurationEnabled", "boolean", "test.version.version5", F_OPTIONAL), ("dhcpV6Enabled", "boolean", "test.version.version5", F_OPTIONAL)])
CreateDataType("test.vim.host.IpRouteConfig", "HostIpRouteConfig", "vmodl.DynamicData", "test.version.version1", [("defaultGateway", "string", "test.version.version1", F_OPTIONAL), ("gatewayDevice", "string", "test.version.version1", F_OPTIONAL), ("ipV6DefaultGateway", "string", "test.version.version5", F_OPTIONAL), ("ipV6GatewayDevice", "string", "test.version.version5", F_OPTIONAL)])
CreateDataType("test.vim.host.IpRouteEntry", "HostIpRouteEntry", "vmodl.DynamicData", "test.version.version5", [("network", "string", "test.version.version5", 0), ("prefixLength", "int", "test.version.version5", 0), ("gateway", "string", "test.version.version5", 0)])
CreateDataType("test.vim.host.IpRouteTableInfo", "HostIpRouteTableInfo", "vmodl.DynamicData", "test.version.version5", [("ipRoute", "test.vim.host.IpRouteEntry[]", "test.version.version5", F_OPTIONAL), ("ipv6Route", "test.vim.host.IpRouteEntry[]", "test.version.version5", F_OPTIONAL)])
CreateDataType("test.vim.host.IpSecConfig", "HostIpSecConfig", "vmodl.DynamicData", "test.version.version5", [("ipSecPolicy", "test.vim.host.IpSecConfig.IpSecPolicy[]", "test.version.version5", F_OPTIONAL), ("securityAssociation", "test.vim.host.IpSecConfig.SecurityAssociationConfig[]", "test.version.version5", F_OPTIONAL)])
CreateEnumType("test.vim.host.IpSecConfig.UpperLayerProtocolType", "HostIpSecConfigUpperLayerProtocolType", "test.version.version5", ["tcp", "udp", "icmp"])
CreateEnumType("test.vim.host.IpSecConfig.IpSecSAMode", "HostIpSecConfigIpSecSAMode", "test.version.version5", ["transport", "tunnel"])
CreateEnumType("test.vim.host.IpSecConfig.EncryptionAlgorithm", "HostIpSecConfigEncryptionAlgorithm", "test.version.version5", ["aes128cbc", "des3cbc"])
CreateEnumType("test.vim.host.IpSecConfig.IntegrityAlgorithm", "HostIpSecConfigIntegrityAlgorithm", "test.version.version5", ["sha1"])
CreateDataType("test.vim.host.IpSecConfig.EncryptionMethod", "HostIpSecConfigEncryptionMethod", "vmodl.DynamicData", "test.version.version5", [("algorithm", "string", "test.version.version5", 0), ("keyingMaterial", "string", "test.version.version5", 0), ("initialVector", "string", "test.version.version5", 0)])
CreateDataType("test.vim.host.IpSecConfig.IntegrityMethod", "HostIpSecConfigIntegrityMethod", "vmodl.DynamicData", "test.version.version5", [("algorithm", "string", "test.version.version5", 0), ("keyBlob", "string", "test.version.version5", 0)])
CreateDataType("test.vim.host.IpSecConfig.PortRange", "HostIpSecConfigPortRange", "vmodl.DynamicData", "test.version.version5", [("start", "int", "test.version.version5", 0), ("end", "int", "test.version.version5", F_OPTIONAL)])
CreateDataType("test.vim.host.IpSecConfig.EndPoint", "HostIpSecConfigEndPoint", "vmodl.DynamicData", "test.version.version5", [("ipAddress", "string", "test.version.version5", F_OPTIONAL), ("subnetMask", "int", "test.version.version5", F_OPTIONAL), ("portRange", "test.vim.host.IpSecConfig.PortRange", "test.version.version5", 0)])
CreateEnumType("test.vim.host.IpSecConfig.SAKeyingType", "HostIpSecConfigSAKeyingType", "test.version.version5", ["manual", "ike"])
CreateDataType("test.vim.host.IpSecConfig.SecurityAssociationConfig", "HostIpSecConfigSecurityAssociationConfig", "vmodl.DynamicData", "test.version.version5", [("spi", "int", "test.version.version5", 0), ("name", "string", "test.version.version5", 0), ("mode", "string", "test.version.version5", 0), ("encryptionSetting", "test.vim.host.IpSecConfig.EncryptionMethod", "test.version.version5", 0), ("integritySetting", "test.vim.host.IpSecConfig.IntegrityMethod", "test.version.version5", 0), ("tunnelSourceAddress", "string", "test.version.version5", F_OPTIONAL), ("tunnelDestinationAddress", "string", "test.version.version5", F_OPTIONAL), ("saLifeTimeData", "int", "test.version.version5", F_OPTIONAL), ("saLifeTimeMins", "int", "test.version.version5", F_OPTIONAL), ("keyingType", "string", "test.version.version5", 0), ("preSharedKey", "string", "test.version.version5", F_OPTIONAL)])
CreateDataType("test.vim.host.IpSecConfig.IpSecPolicy", "HostIpSecConfigIpSecPolicy", "vmodl.DynamicData", "test.version.version5", [("priority", "int", "test.version.version5", 0), ("securityAssociationName", "string", "test.version.version5", 0), ("sourceEndPoint", "test.vim.host.IpSecConfig.EndPoint", "test.version.version5", 0), ("destinationEndPoint", "test.vim.host.IpSecConfig.EndPoint", "test.version.version5", 0), ("upperLayerProtocol", "string[]", "test.version.version5", F_OPTIONAL)])
CreateDataType("test.vim.host.IpmiInfo", "HostIpmiInfo", "vmodl.DynamicData", "test.version.version5", [("bmcIpAddress", "string", "test.version.version5", F_OPTIONAL), ("bmcMacAddress", "string", "test.version.version5", F_OPTIONAL), ("login", "string", "test.version.version5", F_OPTIONAL), ("password", "string", "test.version.version5", F_OPTIONAL | F_SECRET)])
CreateDataType("test.vim.host.LinkDiscoveryProtocolConfig", "LinkDiscoveryProtocolConfig", "vmodl.DynamicData", "test.version.version5", [("protocol", "string", "test.version.version5", 0), ("operation", "string", "test.version.version5", 0)])
CreateEnumType("test.vim.host.LinkDiscoveryProtocolConfig.ProtocolType", "LinkDiscoveryProtocolConfigProtocolType", "test.version.version5", ["cdp", "lldp"])
CreateEnumType("test.vim.host.LinkDiscoveryProtocolConfig.OperationType", "LinkDiscoveryProtocolConfigOperationType", "test.version.version5", ["none", "listen", "advertise", "both"])
CreateDataType("test.vim.host.LocalDatastoreInfo", "LocalDatastoreInfo", "test.vim.Datastore.Info", "test.version.version1", [("path", "string", "test.version.version1", F_OPTIONAL)])
CreateDataType("test.vim.host.LocalFileSystemVolume", "HostLocalFileSystemVolume", "test.vim.host.FileSystemVolume", "test.version.version1", [("device", "string", "test.version.version1", 0)])
CreateDataType("test.vim.host.LocalFileSystemVolume.Specification", "HostLocalFileSystemVolumeSpec", "vmodl.DynamicData", "test.version.version1", [("device", "string", "test.version.version1", 0), ("localPath", "string", "test.version.version1", 0)])
CreateManagedType("test.vim.host.MemoryManagerSystem", "HostMemorySystem", "vmodl.ManagedObject", "test.version.version1", None, None)
CreateDataType("test.vim.host.MemoryManagerSystem.ServiceConsoleReservationInfo", "ServiceConsoleReservationInfo", "vmodl.DynamicData", "test.version.version1", [("serviceConsoleReservedCfg", "long", "test.version.version1", 0), ("serviceConsoleReserved", "long", "test.version.version1", 0), ("unreserved", "long", "test.version.version1", 0)])
CreateDataType("test.vim.host.MemoryManagerSystem.VirtualMachineReservationInfo", "VirtualMachineMemoryReservationInfo", "vmodl.DynamicData", "test.version.version2", [("virtualMachineMin", "long", "test.version.version2", 0), ("virtualMachineMax", "long", "test.version.version2", 0), ("virtualMachineReserved", "long", "test.version.version2", 0), ("allocationPolicy", "string", "test.version.version2", 0)])
CreateEnumType("test.vim.host.MemoryManagerSystem.VirtualMachineReservationInfo.AllocationPolicy", "VirtualMachineMemoryAllocationPolicy", "test.version.version2", ["swapNone", "swapSome", "swapMost"])
CreateDataType("test.vim.host.MemoryManagerSystem.VirtualMachineReservationSpec", "VirtualMachineMemoryReservationSpec", "vmodl.DynamicData", "test.version.version2", [("virtualMachineReserved", "long", "test.version.version2", F_OPTIONAL), ("allocationPolicy", "string", "test.version.version2", F_OPTIONAL)])
CreateDataType("test.vim.host.MountInfo", "HostMountInfo", "vmodl.DynamicData", "test.version.version1", [("path", "string", "test.version.version1", F_OPTIONAL), ("accessMode", "string", "test.version.version1", 0), ("accessible", "boolean", "test.version.version2", F_OPTIONAL)])
CreateEnumType("test.vim.host.MountInfo.AccessMode", "HostMountMode", "test.version.version1", ["readWrite", "readOnly"])
CreateDataType("test.vim.host.MultipathInfo", "HostMultipathInfo", "vmodl.DynamicData", "test.version.version1", [("lun", "test.vim.host.MultipathInfo.LogicalUnit[]", "test.version.version1", F_LINKABLE | F_OPTIONAL)])
CreateEnumType("test.vim.host.MultipathInfo.PathState", "MultipathState", "test.version.version1", ["standby", "active", "disabled", "dead", "unknown"])
CreateDataType("test.vim.host.MultipathInfo.LogicalUnitPolicy", "HostMultipathInfoLogicalUnitPolicy", "vmodl.DynamicData", "test.version.version1", [("policy", "string", "test.version.version1", 0)])
CreateDataType("test.vim.host.MultipathInfo.LogicalUnitStorageArrayTypePolicy", "HostMultipathInfoLogicalUnitStorageArrayTypePolicy", "vmodl.DynamicData", "test.version.version5", [("policy", "string", "test.version.version5", 0)])
CreateDataType("test.vim.host.MultipathInfo.FixedLogicalUnitPolicy", "HostMultipathInfoFixedLogicalUnitPolicy", "test.vim.host.MultipathInfo.LogicalUnitPolicy", "test.version.version1", [("prefer", "string", "test.version.version1", 0)])
CreateDataType("test.vim.host.MultipathInfo.LogicalUnit", "HostMultipathInfoLogicalUnit", "vmodl.DynamicData", "test.version.version1", [("key", "string", "test.version.version1", 0), ("id", "string", "test.version.version1", 0), ("lun", "test.vim.host.ScsiLun", "test.version.version1", F_LINK), ("path", "test.vim.host.MultipathInfo.Path[]", "test.version.version1", 0), ("policy", "test.vim.host.MultipathInfo.LogicalUnitPolicy", "test.version.version1", 0), ("storageArrayTypePolicy", "test.vim.host.MultipathInfo.LogicalUnitStorageArrayTypePolicy", "test.version.version5", F_OPTIONAL)])
CreateDataType("test.vim.host.MultipathInfo.Path", "HostMultipathInfoPath", "vmodl.DynamicData", "test.version.version1", [("key", "string", "test.version.version1", 0), ("name", "string", "test.version.version1", 0), ("pathState", "string", "test.version.version1", 0), ("state", "string", "test.version.version5", F_OPTIONAL), ("isWorkingPath", "boolean", "test.version.version5", F_OPTIONAL), ("adapter", "test.vim.host.HostBusAdapter", "test.version.version1", F_LINK), ("lun", "test.vim.host.MultipathInfo.LogicalUnit", "test.version.version1", F_LINK), ("transport", "test.vim.host.TargetTransport", "test.version.version1", F_OPTIONAL)])
CreateDataType("test.vim.host.MultipathStateInfo", "HostMultipathStateInfo", "vmodl.DynamicData", "test.version.version5", [("path", "test.vim.host.MultipathStateInfo.Path[]", "test.version.version5", F_OPTIONAL)])
CreateDataType("test.vim.host.MultipathStateInfo.Path", "HostMultipathStateInfoPath", "vmodl.DynamicData", "test.version.version5", [("name", "string", "test.version.version5", 0), ("pathState", "string", "test.version.version5", 0)])
CreateDataType("test.vim.host.NasDatastoreInfo", "NasDatastoreInfo", "test.vim.Datastore.Info", "test.version.version1", [("nas", "test.vim.host.NasVolume", "test.version.version1", F_OPTIONAL)])
CreateDataType("test.vim.host.NasVolume", "HostNasVolume", "test.vim.host.FileSystemVolume", "test.version.version1", [("remoteHost", "string", "test.version.version1", 0), ("remotePath", "string", "test.version.version1", 0), ("userName", "string", "test.version.version2", F_OPTIONAL)])
CreateDataType("test.vim.host.NasVolume.Specification", "HostNasVolumeSpec", "vmodl.DynamicData", "test.version.version1", [("remoteHost", "string", "test.version.version1", 0), ("remotePath", "string", "test.version.version1", 0), ("localPath", "string", "test.version.version1", 0), ("accessMode", "string", "test.version.version1", 0), ("type", "string", "test.version.version2", F_OPTIONAL), ("userName", "string", "test.version.version2", F_OPTIONAL), ("password", "string", "test.version.version2", F_OPTIONAL | F_SECRET)])
CreateDataType("test.vim.host.NasVolume.Config", "HostNasVolumeConfig", "vmodl.DynamicData", "test.version.version5", [("changeOperation", "string", "test.version.version5", F_OPTIONAL), ("spec", "test.vim.host.NasVolume.Specification", "test.version.version5", F_OPTIONAL)])
CreateDataType("test.vim.host.NatService", "HostNatService", "vmodl.DynamicData", "test.version.version2", [("key", "string", "test.version.version2", 0), ("spec", "test.vim.host.NatService.Specification", "test.version.version2", 0)])
CreateDataType("test.vim.host.NatService.PortForwardSpecification", "HostNatServicePortForwardSpec", "vmodl.DynamicData", "test.version.version2", [("type", "string", "test.version.version2", 0), ("name", "string", "test.version.version2", 0), ("hostPort", "int", "test.version.version2", 0), ("guestPort", "int", "test.version.version2", 0), ("guestIpAddress", "string", "test.version.version2", 0)])
CreateDataType("test.vim.host.NatService.NameServiceSpec", "HostNatServiceNameServiceSpec", "vmodl.DynamicData", "test.version.version2", [("dnsAutoDetect", "boolean", "test.version.version2", 0), ("dnsPolicy", "string", "test.version.version2", 0), ("dnsRetries", "int", "test.version.version2", 0), ("dnsTimeout", "int", "test.version.version2", 0), ("dnsNameServer", "string[]", "test.version.version2", F_OPTIONAL), ("nbdsTimeout", "int", "test.version.version2", 0), ("nbnsRetries", "int", "test.version.version2", 0), ("nbnsTimeout", "int", "test.version.version2", 0)])
CreateDataType("test.vim.host.NatService.Specification", "HostNatServiceSpec", "vmodl.DynamicData", "test.version.version2", [("virtualSwitch", "string", "test.version.version2", 0), ("activeFtp", "boolean", "test.version.version2", 0), ("allowAnyOui", "boolean", "test.version.version2", 0), ("configPort", "boolean", "test.version.version2", 0), ("ipGatewayAddress", "string", "test.version.version2", 0), ("udpTimeout", "int", "test.version.version2", 0), ("portForward", "test.vim.host.NatService.PortForwardSpecification[]", "test.version.version2", F_OPTIONAL), ("nameService", "test.vim.host.NatService.NameServiceSpec", "test.version.version2", F_OPTIONAL)])
CreateDataType("test.vim.host.NatService.Config", "HostNatServiceConfig", "vmodl.DynamicData", "test.version.version2", [("changeOperation", "string", "test.version.version2", F_OPTIONAL), ("key", "string", "test.version.version2", 0), ("spec", "test.vim.host.NatService.Specification", "test.version.version2", 0)])
CreateDataType("test.vim.host.NetCapabilities", "HostNetCapabilities", "vmodl.DynamicData", "test.version.version1", [("canSetPhysicalNicLinkSpeed", "boolean", "test.version.version1", 0), ("supportsNicTeaming", "boolean", "test.version.version1", 0), ("nicTeamingPolicy", "string[]", "test.version.version1", F_OPTIONAL), ("supportsVlan", "boolean", "test.version.version1", 0), ("usesServiceConsoleNic", "boolean", "test.version.version1", 0), ("supportsNetworkHints", "boolean", "test.version.version1", 0), ("maxPortGroupsPerVswitch", "int", "test.version.version2", F_OPTIONAL), ("vswitchConfigSupported", "boolean", "test.version.version2", 0), ("vnicConfigSupported", "boolean", "test.version.version2", 0), ("ipRouteConfigSupported", "boolean", "test.version.version2", 0), ("dnsConfigSupported", "boolean", "test.version.version2", 0), ("dhcpOnVnicSupported", "boolean", "test.version.version2", 0), ("ipV6Supported", "boolean", "test.version.version5", 0)])
CreateDataType("test.vim.host.NetOffloadCapabilities", "HostNetOffloadCapabilities", "vmodl.DynamicData", "test.version.version1", [("csumOffload", "boolean", "test.version.version1", F_OPTIONAL), ("tcpSegmentation", "boolean", "test.version.version1", F_OPTIONAL), ("zeroCopyXmit", "boolean", "test.version.version1", F_OPTIONAL)])
CreateDataType("test.vim.host.NetworkInfo", "HostNetworkInfo", "vmodl.DynamicData", "test.version.version1", [("vswitch", "test.vim.host.VirtualSwitch[]", "test.version.version1", F_LINKABLE | F_OPTIONAL), ("proxySwitch", "test.vim.host.HostProxySwitch[]", "test.version.version5", F_OPTIONAL), ("portgroup", "test.vim.host.PortGroup[]", "test.version.version1", F_LINKABLE | F_OPTIONAL), ("pnic", "test.vim.host.PhysicalNic[]", "test.version.version1", F_LINKABLE | F_OPTIONAL), ("vnic", "test.vim.host.VirtualNic[]", "test.version.version1", F_OPTIONAL), ("consoleVnic", "test.vim.host.VirtualNic[]", "test.version.version1", F_OPTIONAL), ("dnsConfig", "test.vim.host.DnsConfig", "test.version.version1", F_OPTIONAL), ("ipRouteConfig", "test.vim.host.IpRouteConfig", "test.version.version1", F_OPTIONAL), ("consoleIpRouteConfig", "test.vim.host.IpRouteConfig", "test.version.version1", F_OPTIONAL), ("routeTableInfo", "test.vim.host.IpRouteTableInfo", "test.version.version5", F_OPTIONAL), ("dhcp", "test.vim.host.DhcpService[]", "test.version.version2", F_OPTIONAL), ("nat", "test.vim.host.NatService[]", "test.version.version2", F_OPTIONAL), ("ipV6Enabled", "boolean", "test.version.version5", F_OPTIONAL), ("ipSecConfig", "test.vim.host.IpSecConfig", "test.version.version5", F_OPTIONAL), ("consoleIpSecConfig", "test.vim.host.IpSecConfig", "test.version.version5", F_OPTIONAL)])
CreateDataType("test.vim.host.NetworkPolicy", "HostNetworkPolicy", "vmodl.DynamicData", "test.version.version1", [("security", "test.vim.host.NetworkPolicy.SecurityPolicy", "test.version.version1", F_OPTIONAL), ("nicTeaming", "test.vim.host.NetworkPolicy.NicTeamingPolicy", "test.version.version1", F_OPTIONAL), ("offloadPolicy", "test.vim.host.NetOffloadCapabilities", "test.version.version1", F_OPTIONAL), ("shapingPolicy", "test.vim.host.NetworkPolicy.TrafficShapingPolicy", "test.version.version1", F_OPTIONAL)])
CreateDataType("test.vim.host.NetworkPolicy.SecurityPolicy", "HostNetworkSecurityPolicy", "vmodl.DynamicData", "test.version.version1", [("allowPromiscuous", "boolean", "test.version.version1", F_OPTIONAL), ("macChanges", "boolean", "test.version.version1", F_OPTIONAL), ("forgedTransmits", "boolean", "test.version.version1", F_OPTIONAL)])
CreateDataType("test.vim.host.NetworkPolicy.TrafficShapingPolicy", "HostNetworkTrafficShapingPolicy", "vmodl.DynamicData", "test.version.version1", [("enabled", "boolean", "test.version.version1", F_OPTIONAL), ("averageBandwidth", "long", "test.version.version1", F_OPTIONAL), ("peakBandwidth", "long", "test.version.version1", F_OPTIONAL), ("burstSize", "long", "test.version.version1", F_OPTIONAL)])
CreateDataType("test.vim.host.NetworkPolicy.NicFailureCriteria", "HostNicFailureCriteria", "vmodl.DynamicData", "test.version.version1", [("checkSpeed", "string", "test.version.version1", F_OPTIONAL), ("speed", "int", "test.version.version1", F_OPTIONAL), ("checkDuplex", "boolean", "test.version.version1", F_OPTIONAL), ("fullDuplex", "boolean", "test.version.version1", F_OPTIONAL), ("checkErrorPercent", "boolean", "test.version.version1", F_OPTIONAL), ("percentage", "int", "test.version.version1", F_OPTIONAL), ("checkBeacon", "boolean", "test.version.version1", F_OPTIONAL)])
CreateDataType("test.vim.host.NetworkPolicy.NicOrderPolicy", "HostNicOrderPolicy", "vmodl.DynamicData", "test.version.version1", [("activeNic", "string[]", "test.version.version1", F_OPTIONAL), ("standbyNic", "string[]", "test.version.version1", F_OPTIONAL)])
CreateDataType("test.vim.host.NetworkPolicy.NicTeamingPolicy", "HostNicTeamingPolicy", "vmodl.DynamicData", "test.version.version1", [("policy", "string", "test.version.version1", F_OPTIONAL), ("reversePolicy", "boolean", "test.version.version1", F_OPTIONAL), ("notifySwitches", "boolean", "test.version.version1", F_OPTIONAL), ("rollingOrder", "boolean", "test.version.version1", F_OPTIONAL), ("failureCriteria", "test.vim.host.NetworkPolicy.NicFailureCriteria", "test.version.version1", F_OPTIONAL), ("nicOrder", "test.vim.host.NetworkPolicy.NicOrderPolicy", "test.version.version1", F_OPTIONAL)])
CreateDataType("test.vim.host.NtpConfig", "HostNtpConfig", "vmodl.DynamicData", "test.version.version2", [("server", "string[]", "test.version.version2", F_OPTIONAL)])
CreateDataType("test.vim.host.ParallelScsiHba", "HostParallelScsiHba", "test.vim.host.HostBusAdapter", "test.version.version1", None)
CreateDataType("test.vim.host.PciPassthruInfo", "HostPciPassthruInfo", "vmodl.DynamicData", "test.version.version5", [("id", "string", "test.version.version5", 0), ("dependentDevice", "string", "test.version.version5", 0), ("passthruEnabled", "boolean", "test.version.version5", 0), ("passthruCapable", "boolean", "test.version.version5", 0), ("passthruActive", "boolean", "test.version.version5", 0)])
CreateDataType("test.vim.host.PhysicalNic", "PhysicalNic", "vmodl.DynamicData", "test.version.version1", [("key", "string", "test.version.version1", F_OPTIONAL), ("device", "string", "test.version.version1", 0), ("pci", "string", "test.version.version1", 0), ("driver", "string", "test.version.version1", F_OPTIONAL), ("linkSpeed", "test.vim.host.PhysicalNic.LinkSpeedDuplex", "test.version.version1", F_OPTIONAL), ("validLinkSpecification", "test.vim.host.PhysicalNic.LinkSpeedDuplex[]", "test.version.version1", F_OPTIONAL), ("spec", "test.vim.host.PhysicalNic.Specification", "test.version.version1", 0), ("wakeOnLanSupported", "boolean", "test.version.version2", 0), ("mac", "string", "test.version.version2", 0)])
CreateDataType("test.vim.host.PhysicalNic.Specification", "PhysicalNicSpec", "vmodl.DynamicData", "test.version.version1", [("ip", "test.vim.host.IpConfig", "test.version.version1", F_OPTIONAL), ("linkSpeed", "test.vim.host.PhysicalNic.LinkSpeedDuplex", "test.version.version1", F_OPTIONAL)])
CreateDataType("test.vim.host.PhysicalNic.Config", "PhysicalNicConfig", "vmodl.DynamicData", "test.version.version1", [("device", "string", "test.version.version1", 0), ("spec", "test.vim.host.PhysicalNic.Specification", "test.version.version1", 0)])
CreateDataType("test.vim.host.PhysicalNic.LinkSpeedDuplex", "PhysicalNicLinkInfo", "vmodl.DynamicData", "test.version.version1", [("speedMb", "int", "test.version.version1", 0), ("duplex", "boolean", "test.version.version1", 0)])
CreateDataType("test.vim.host.PhysicalNic.NetworkHint", "PhysicalNicHintInfo", "vmodl.DynamicData", "test.version.version1", [("device", "string", "test.version.version1", 0), ("subnet", "test.vim.host.PhysicalNic.NetworkHint.IpNetwork[]", "test.version.version1", F_OPTIONAL), ("network", "test.vim.host.PhysicalNic.NetworkHint.NamedNetwork[]", "test.version.version1", F_OPTIONAL), ("connectedSwitchPort", "test.vim.host.PhysicalNic.CdpInfo", "test.version.version2", F_OPTIONAL)])
CreateDataType("test.vim.host.PhysicalNic.NetworkHint.HintElement", "PhysicalNicHint", "vmodl.DynamicData", "test.version.version1", [("vlanId", "int", "test.version.version1", F_OPTIONAL)])
CreateDataType("test.vim.host.PhysicalNic.NetworkHint.IpNetwork", "PhysicalNicIpHint", "test.vim.host.PhysicalNic.NetworkHint.HintElement", "test.version.version1", [("ipSubnet", "string", "test.version.version1", 0)])
CreateDataType("test.vim.host.PhysicalNic.NetworkHint.NamedNetwork", "PhysicalNicNameHint", "test.vim.host.PhysicalNic.NetworkHint.HintElement", "test.version.version1", [("network", "string", "test.version.version1", 0)])
CreateDataType("test.vim.host.PhysicalNic.CdpDeviceCapability", "PhysicalNicCdpDeviceCapability", "vmodl.DynamicData", "test.version.version2", [("router", "boolean", "test.version.version2", 0), ("transparentBridge", "boolean", "test.version.version2", 0), ("sourceRouteBridge", "boolean", "test.version.version2", 0), ("networkSwitch", "boolean", "test.version.version2", 0), ("host", "boolean", "test.version.version2", 0), ("igmpEnabled", "boolean", "test.version.version2", 0), ("repeater", "boolean", "test.version.version2", 0)])
CreateDataType("test.vim.host.PhysicalNic.CdpInfo", "PhysicalNicCdpInfo", "vmodl.DynamicData", "test.version.version2", [("cdpVersion", "int", "test.version.version2", F_OPTIONAL), ("timeout", "int", "test.version.version2", F_OPTIONAL), ("ttl", "int", "test.version.version2", F_OPTIONAL), ("samples", "int", "test.version.version2", F_OPTIONAL), ("devId", "string", "test.version.version2", F_OPTIONAL), ("address", "string", "test.version.version2", F_OPTIONAL), ("portId", "string", "test.version.version2", F_OPTIONAL), ("deviceCapability", "test.vim.host.PhysicalNic.CdpDeviceCapability", "test.version.version2", F_OPTIONAL), ("softwareVersion", "string", "test.version.version2", F_OPTIONAL), ("hardwarePlatform", "string", "test.version.version2", F_OPTIONAL), ("ipPrefix", "string", "test.version.version2", F_OPTIONAL), ("ipPrefixLen", "int", "test.version.version2", F_OPTIONAL), ("vlan", "int", "test.version.version2", F_OPTIONAL), ("fullDuplex", "boolean", "test.version.version2", F_OPTIONAL), ("mtu", "int", "test.version.version2", F_OPTIONAL), ("systemName", "string", "test.version.version2", F_OPTIONAL), ("systemOID", "string", "test.version.version2", F_OPTIONAL), ("mgmtAddr", "string", "test.version.version2", F_OPTIONAL), ("location", "string", "test.version.version2", F_OPTIONAL)])
CreateDataType("test.vim.host.PlugStoreTopology", "HostPlugStoreTopology", "vmodl.DynamicData", "test.version.version5", [("adapter", "test.vim.host.PlugStoreTopology.Adapter[]", "test.version.version5", F_LINKABLE | F_OPTIONAL), ("path", "test.vim.host.PlugStoreTopology.Path[]", "test.version.version5", F_LINKABLE | F_OPTIONAL), ("target", "test.vim.host.PlugStoreTopology.Target[]", "test.version.version5", F_LINKABLE | F_OPTIONAL), ("device", "test.vim.host.PlugStoreTopology.Device[]", "test.version.version5", F_LINKABLE | F_OPTIONAL), ("plugin", "test.vim.host.PlugStoreTopology.Plugin[]", "test.version.version5", F_LINKABLE | F_OPTIONAL)])
CreateDataType("test.vim.host.PlugStoreTopology.Adapter", "HostPlugStoreTopologyAdapter", "vmodl.DynamicData", "test.version.version5", [("key", "string", "test.version.version5", 0), ("adapter", "test.vim.host.HostBusAdapter", "test.version.version5", F_LINK), ("path", "test.vim.host.PlugStoreTopology.Path[]", "test.version.version5", F_LINK | F_OPTIONAL)])
CreateDataType("test.vim.host.PlugStoreTopology.Path", "HostPlugStoreTopologyPath", "vmodl.DynamicData", "test.version.version5", [("key", "string", "test.version.version5", 0), ("name", "string", "test.version.version5", 0), ("channelNumber", "int", "test.version.version5", F_OPTIONAL), ("targetNumber", "int", "test.version.version5", F_OPTIONAL), ("lunNumber", "int", "test.version.version5", F_OPTIONAL), ("adapter", "test.vim.host.PlugStoreTopology.Adapter", "test.version.version5", F_LINK | F_OPTIONAL), ("target", "test.vim.host.PlugStoreTopology.Target", "test.version.version5", F_LINK | F_OPTIONAL), ("device", "test.vim.host.PlugStoreTopology.Device", "test.version.version5", F_LINK | F_OPTIONAL)])
CreateDataType("test.vim.host.PlugStoreTopology.Device", "HostPlugStoreTopologyDevice", "vmodl.DynamicData", "test.version.version5", [("key", "string", "test.version.version5", 0), ("lun", "test.vim.host.ScsiLun", "test.version.version5", F_LINK), ("path", "test.vim.host.PlugStoreTopology.Path[]", "test.version.version5", F_LINK | F_OPTIONAL)])
CreateDataType("test.vim.host.PlugStoreTopology.Plugin", "HostPlugStoreTopologyPlugin", "vmodl.DynamicData", "test.version.version5", [("key", "string", "test.version.version5", 0), ("name", "string", "test.version.version5", 0), ("device", "test.vim.host.PlugStoreTopology.Device[]", "test.version.version5", F_LINK | F_OPTIONAL), ("claimedPath", "test.vim.host.PlugStoreTopology.Path[]", "test.version.version5", F_LINK | F_OPTIONAL)])
CreateDataType("test.vim.host.PlugStoreTopology.Target", "HostPlugStoreTopologyTarget", "vmodl.DynamicData", "test.version.version5", [("key", "string", "test.version.version5", 0), ("transport", "test.vim.host.TargetTransport", "test.version.version5", F_OPTIONAL)])
CreateDataType("test.vim.host.PortGroup", "HostPortGroup", "vmodl.DynamicData", "test.version.version1", [("key", "string", "test.version.version1", F_OPTIONAL), ("port", "test.vim.host.PortGroup.Port[]", "test.version.version1", F_LINKABLE | F_OPTIONAL), ("vswitch", "test.vim.host.VirtualSwitch", "test.version.version1", F_LINK | F_OPTIONAL), ("computedPolicy", "test.vim.host.NetworkPolicy", "test.version.version1", 0), ("spec", "test.vim.host.PortGroup.Specification", "test.version.version1", 0)])
CreateEnumType("test.vim.host.PortGroup.PortConnecteeType", "PortGroupConnecteeType", "test.version.version1", ["virtualMachine", "systemManagement", "host", "unknown"])
CreateDataType("test.vim.host.PortGroup.Specification", "HostPortGroupSpec", "vmodl.DynamicData", "test.version.version1", [("name", "string", "test.version.version1", 0), ("vlanId", "int", "test.version.version1", 0), ("vswitchName", "string", "test.version.version1", 0), ("policy", "test.vim.host.NetworkPolicy", "test.version.version1", 0)])
CreateDataType("test.vim.host.PortGroup.Config", "HostPortGroupConfig", "vmodl.DynamicData", "test.version.version1", [("changeOperation", "string", "test.version.version1", F_OPTIONAL), ("spec", "test.vim.host.PortGroup.Specification", "test.version.version1", F_OPTIONAL)])
CreateDataType("test.vim.host.PortGroup.Port", "HostPortGroupPort", "vmodl.DynamicData", "test.version.version1", [("key", "string", "test.version.version1", F_OPTIONAL), ("mac", "string[]", "test.version.version1", F_OPTIONAL), ("type", "string", "test.version.version1", 0)])
CreateDataType("test.vim.host.Ruleset", "HostFirewallRuleset", "vmodl.DynamicData", "test.version.version1", [("key", "string", "test.version.version1", 0), ("label", "string", "test.version.version1", 0), ("required", "boolean", "test.version.version1", 0), ("rule", "test.vim.host.Ruleset.Rule[]", "test.version.version1", 0), ("service", "string", "test.version.version1", F_OPTIONAL), ("enabled", "boolean", "test.version.version1", 0)])
CreateDataType("test.vim.host.Ruleset.Rule", "HostFirewallRule", "vmodl.DynamicData", "test.version.version1", [("port", "int", "test.version.version1", 0), ("endPort", "int", "test.version.version1", F_OPTIONAL), ("direction", "test.vim.host.Ruleset.Rule.Direction", "test.version.version1", 0), ("protocol", "string", "test.version.version1", 0)])
CreateEnumType("test.vim.host.Ruleset.Rule.Direction", "HostFirewallRuleDirection", "test.version.version1", ["inbound", "outbound"])
CreateEnumType("test.vim.host.Ruleset.Rule.Protocol", "HostFirewallRuleProtocol", "test.version.version1", ["tcp", "udp"])
CreateDataType("test.vim.host.ScsiLun", "ScsiLun", "test.vim.host.Device", "test.version.version1", [("key", "string", "test.version.version1", F_OPTIONAL), ("uuid", "string", "test.version.version1", 0), ("descriptor", "test.vim.host.ScsiLun.Descriptor[]", "test.version.version5", F_OPTIONAL), ("canonicalName", "string", "test.version.version1", F_OPTIONAL), ("displayName", "string", "test.version.version5", F_OPTIONAL), ("lunType", "string", "test.version.version1", 0), ("vendor", "string", "test.version.version1", F_OPTIONAL), ("model", "string", "test.version.version1", F_OPTIONAL), ("revision", "string", "test.version.version1", F_OPTIONAL), ("scsiLevel", "int", "test.version.version1", F_OPTIONAL), ("serialNumber", "string", "test.version.version1", F_OPTIONAL), ("durableName", "test.vim.host.ScsiLun.DurableName", "test.version.version1", F_OPTIONAL), ("alternateName", "test.vim.host.ScsiLun.DurableName[]", "test.version.version2", F_OPTIONAL), ("standardInquiry", "byte[]", "test.version.version2", F_OPTIONAL), ("queueDepth", "int", "test.version.version1", F_OPTIONAL), ("operationalState", "string[]", "test.version.version1", 0), ("capabilities", "test.vim.host.ScsiLun.Capabilities", "test.version.version5", F_OPTIONAL)])
CreateEnumType("test.vim.host.ScsiLun.ScsiLunType", "ScsiLunType", "test.version.version1", ["disk", "tape", "printer", "processor", "worm", "cdrom", "scanner", "opticalDevice", "mediaChanger", "communications", "storageArrayController", "enclosure", "unknown"])
CreateDataType("test.vim.host.ScsiLun.Capabilities", "ScsiLunCapabilities", "vmodl.DynamicData", "test.version.version5", [("updateDisplayNameSupported", "boolean", "test.version.version5", 0)])
CreateDataType("test.vim.host.ScsiLun.DurableName", "ScsiLunDurableName", "vmodl.DynamicData", "test.version.version1", [("namespace", "string", "test.version.version1", 0), ("namespaceId", "byte", "test.version.version1", 0), ("data", "byte[]", "test.version.version1", F_OPTIONAL)])
CreateEnumType("test.vim.host.ScsiLun.State", "ScsiLunState", "test.version.version1", ["unknownState", "ok", "error", "off", "quiesced", "degraded", "lostCommunication"])
CreateEnumType("test.vim.host.ScsiLun.DescriptorQuality", "ScsiLunDescriptorQuality", "test.version.version5", ["highQuality", "mediumQuality", "lowQuality", "unknownQuality"])
CreateDataType("test.vim.host.ScsiLun.Descriptor", "ScsiLunDescriptor", "vmodl.DynamicData", "test.version.version5", [("quality", "string", "test.version.version5", 0), ("id", "string", "test.version.version5", 0)])
CreateDataType("test.vim.host.ScsiTopology", "HostScsiTopology", "vmodl.DynamicData", "test.version.version1", [("adapter", "test.vim.host.ScsiTopology.Interface[]", "test.version.version1", F_OPTIONAL)])
CreateDataType("test.vim.host.ScsiTopology.Interface", "HostScsiTopologyInterface", "vmodl.DynamicData", "test.version.version1", [("key", "string", "test.version.version1", 0), ("adapter", "test.vim.host.HostBusAdapter", "test.version.version1", F_LINK), ("target", "test.vim.host.ScsiTopology.Target[]", "test.version.version1", F_OPTIONAL)])
CreateDataType("test.vim.host.ScsiTopology.Target", "HostScsiTopologyTarget", "vmodl.DynamicData", "test.version.version1", [("key", "string", "test.version.version1", 0), ("target", "int", "test.version.version1", 0), ("lun", "test.vim.host.ScsiTopology.Lun[]", "test.version.version1", F_OPTIONAL), ("transport", "test.vim.host.TargetTransport", "test.version.version1", F_OPTIONAL)])
CreateDataType("test.vim.host.ScsiTopology.Lun", "HostScsiTopologyLun", "vmodl.DynamicData", "test.version.version1", [("key", "string", "test.version.version1", 0), ("lun", "int", "test.version.version1", 0), ("scsiLun", "test.vim.host.ScsiLun", "test.version.version1", F_LINK)])
CreateDataType("test.vim.host.Service", "HostService", "vmodl.DynamicData", "test.version.version1", [("key", "string", "test.version.version1", 0), ("label", "string", "test.version.version1", 0), ("required", "boolean", "test.version.version1", 0), ("uninstallable", "boolean", "test.version.version1", 0), ("running", "boolean", "test.version.version1", 0), ("ruleset", "string[]", "test.version.version1", F_OPTIONAL), ("policy", "string", "test.version.version1", 0)])
CreateEnumType("test.vim.host.Service.Policy", "HostServicePolicy", "test.version.version1", ["on", "automatic", "off"])
CreateDataType("test.vim.host.ServiceInfo", "HostServiceInfo", "vmodl.DynamicData", "test.version.version1", [("service", "test.vim.host.Service[]", "test.version.version1", F_OPTIONAL)])
CreateDataType("test.vim.host.SslThumbprintInfo", "HostSslThumbprintInfo", "vmodl.DynamicData", "test.version.version5", [("principal", "string", "test.version.version5", 0), ("sslThumbprints", "string[]", "test.version.version5", F_OPTIONAL)])
CreateDataType("test.vim.host.StorageDeviceInfo", "HostStorageDeviceInfo", "vmodl.DynamicData", "test.version.version1", [("hostBusAdapter", "test.vim.host.HostBusAdapter[]", "test.version.version1", F_LINKABLE | F_OPTIONAL), ("scsiLun", "test.vim.host.ScsiLun[]", "test.version.version1", F_LINKABLE | F_OPTIONAL), ("scsiTopology", "test.vim.host.ScsiTopology", "test.version.version1", F_OPTIONAL), ("multipathInfo", "test.vim.host.MultipathInfo", "test.version.version1", F_OPTIONAL), ("plugStoreTopology", "test.vim.host.PlugStoreTopology", "test.version.version5", F_OPTIONAL), ("softwareInternetScsiEnabled", "boolean", "test.version.version1", 0)])
CreateDataType("test.vim.host.SystemResourceInfo", "HostSystemResourceInfo", "vmodl.DynamicData", "test.version.version1", [("key", "string", "test.version.version1", 0), ("config", "test.vim.ResourceConfigSpec", "test.version.version1", F_OPTIONAL), ("child", "test.vim.host.SystemResourceInfo[]", "test.version.version1", F_OPTIONAL)])
CreateDataType("test.vim.host.TargetTransport", "HostTargetTransport", "vmodl.DynamicData", "test.version.version1", None)
CreateManagedType("test.vim.host.VMotionSystem", "HostVMotionSystem", "vmodl.ManagedObject", "test.version.version1", None, None)
CreateDataType("test.vim.host.VMotionSystem.NetConfig", "HostVMotionNetConfig", "vmodl.DynamicData", "test.version.version1", [("candidateVnic", "test.vim.host.VirtualNic[]", "test.version.version1", F_LINKABLE | F_OPTIONAL), ("selectedVnic", "test.vim.host.VirtualNic", "test.version.version1", F_LINK | F_OPTIONAL)])
CreateDataType("test.vim.host.VirtualNic", "HostVirtualNic", "vmodl.DynamicData", "test.version.version1", [("device", "string", "test.version.version1", 0), ("key", "string", "test.version.version1", 0), ("portgroup", "string", "test.version.version1", 0), ("spec", "test.vim.host.VirtualNic.Specification", "test.version.version1", 0), ("port", "test.vim.host.PortGroup.Port", "test.version.version1", F_LINK | F_OPTIONAL)])
CreateDataType("test.vim.host.VirtualNic.Specification", "HostVirtualNicSpec", "vmodl.DynamicData", "test.version.version1", [("ip", "test.vim.host.IpConfig", "test.version.version1", F_OPTIONAL), ("mac", "string", "test.version.version1", F_OPTIONAL), ("distributedVirtualPort", "test.vim.dvs.PortConnection", "test.version.version5", F_OPTIONAL), ("portgroup", "string", "test.version.version5", F_OPTIONAL), ("mtu", "int", "test.version.version5", F_OPTIONAL), ("tsoEnabled", "boolean", "test.version.version5", F_OPTIONAL)])
CreateDataType("test.vim.host.VirtualNic.Config", "HostVirtualNicConfig", "vmodl.DynamicData", "test.version.version1", [("changeOperation", "string", "test.version.version1", F_OPTIONAL), ("device", "string", "test.version.version1", F_OPTIONAL), ("portgroup", "string", "test.version.version1", 0), ("spec", "test.vim.host.VirtualNic.Specification", "test.version.version1", F_OPTIONAL)])
CreateDataType("test.vim.host.VirtualNicConnection", "HostVirtualNicConnection", "vmodl.DynamicData", "test.version.version5", [("portgroup", "string", "test.version.version5", F_OPTIONAL), ("dvPort", "test.vim.dvs.PortConnection", "test.version.version5", F_OPTIONAL)])
CreateManagedType("test.vim.host.VirtualNicManager", "HostVirtualNicManager", "vmodl.ManagedObject", "test.version.version5", None, None)
CreateEnumType("test.vim.host.VirtualNicManager.NicType", "HostVirtualNicManagerNicType", "test.version.version5", ["vmotion", "faultToleranceLogging", "management"])
CreateDataType("test.vim.host.VirtualNicManager.NicTypeSelection", "HostVirtualNicManagerNicTypeSelection", "vmodl.DynamicData", "test.version.version5", [("vnic", "test.vim.host.VirtualNicConnection", "test.version.version5", 0), ("nicType", "string[]", "test.version.version5", F_OPTIONAL)])
CreateDataType("test.vim.host.VirtualNicManager.NetConfig", "VirtualNicManagerNetConfig", "vmodl.DynamicData", "test.version.version5", [("nicType", "string", "test.version.version5", 0), ("multiSelectAllowed", "boolean", "test.version.version5", 0), ("candidateVnic", "test.vim.host.VirtualNic[]", "test.version.version5", F_LINKABLE | F_OPTIONAL), ("selectedVnic", "test.vim.host.VirtualNic[]", "test.version.version5", F_LINK | F_OPTIONAL)])
CreateDataType("test.vim.host.VirtualNicManagerInfo", "HostVirtualNicManagerInfo", "vmodl.DynamicData", "test.version.version5", [("netConfig", "test.vim.host.VirtualNicManager.NetConfig[]", "test.version.version5", F_OPTIONAL)])
CreateDataType("test.vim.host.VirtualSwitch", "HostVirtualSwitch", "vmodl.DynamicData", "test.version.version1", [("name", "string", "test.version.version1", 0), ("key", "string", "test.version.version1", 0), ("numPorts", "int", "test.version.version1", 0), ("numPortsAvailable", "int", "test.version.version1", 0), ("mtu", "int", "test.version.version2", F_OPTIONAL), ("portgroup", "test.vim.host.PortGroup[]", "test.version.version1", F_LINK | F_OPTIONAL), ("pnic", "test.vim.host.PhysicalNic[]", "test.version.version1", F_LINK | F_OPTIONAL), ("spec", "test.vim.host.VirtualSwitch.Specification", "test.version.version1", 0)])
CreateDataType("test.vim.host.VirtualSwitch.Bridge", "HostVirtualSwitchBridge", "vmodl.DynamicData", "test.version.version1", None)
CreateDataType("test.vim.host.VirtualSwitch.AutoBridge", "HostVirtualSwitchAutoBridge", "test.vim.host.VirtualSwitch.Bridge", "test.version.version1", [("excludedNicDevice", "string[]", "test.version.version2", F_OPTIONAL)])
CreateDataType("test.vim.host.VirtualSwitch.SimpleBridge", "HostVirtualSwitchSimpleBridge", "test.vim.host.VirtualSwitch.Bridge", "test.version.version1", [("nicDevice", "string", "test.version.version1", 0)])
CreateDataType("test.vim.host.VirtualSwitch.BondBridge", "HostVirtualSwitchBondBridge", "test.vim.host.VirtualSwitch.Bridge", "test.version.version1", [("nicDevice", "string[]", "test.version.version1", 0), ("beacon", "test.vim.host.VirtualSwitch.BeaconConfig", "test.version.version1", F_OPTIONAL), ("linkDiscoveryProtocolConfig", "test.vim.host.LinkDiscoveryProtocolConfig", "test.version.version5", F_OPTIONAL)])
CreateDataType("test.vim.host.VirtualSwitch.BeaconConfig", "HostVirtualSwitchBeaconConfig", "vmodl.DynamicData", "test.version.version1", [("interval", "int", "test.version.version1", 0)])
CreateDataType("test.vim.host.VirtualSwitch.Specification", "HostVirtualSwitchSpec", "vmodl.DynamicData", "test.version.version1", [("numPorts", "int", "test.version.version1", 0), ("bridge", "test.vim.host.VirtualSwitch.Bridge", "test.version.version1", F_OPTIONAL), ("policy", "test.vim.host.NetworkPolicy", "test.version.version1", F_OPTIONAL), ("mtu", "int", "test.version.version2", F_OPTIONAL)])
CreateDataType("test.vim.host.VirtualSwitch.Config", "HostVirtualSwitchConfig", "vmodl.DynamicData", "test.version.version1", [("changeOperation", "string", "test.version.version1", F_OPTIONAL), ("name", "string", "test.version.version1", 0), ("spec", "test.vim.host.VirtualSwitch.Specification", "test.version.version1", F_OPTIONAL)])
CreateDataType("test.vim.host.VmfsDatastoreInfo", "VmfsDatastoreInfo", "test.vim.Datastore.Info", "test.version.version1", [("vmfs", "test.vim.host.VmfsVolume", "test.version.version1", F_OPTIONAL)])
CreateDataType("test.vim.host.VmfsDatastoreOption", "VmfsDatastoreOption", "vmodl.DynamicData", "test.version.version1", [("info", "test.vim.host.VmfsDatastoreOption.Info", "test.version.version1", 0), ("spec", "test.vim.host.VmfsDatastoreSpec", "test.version.version1", 0)])
CreateDataType("test.vim.host.VmfsDatastoreOption.Info", "VmfsDatastoreBaseOption", "vmodl.DynamicData", "test.version.version1", [("layout", "test.vim.host.DiskPartitionInfo.Layout", "test.version.version1", 0)])
CreateDataType("test.vim.host.VmfsDatastoreOption.SingleExtentInfo", "VmfsDatastoreSingleExtentOption", "test.vim.host.VmfsDatastoreOption.Info", "test.version.version1", [("vmfsExtent", "test.vim.host.DiskPartitionInfo.BlockRange", "test.version.version1", 0)])
CreateDataType("test.vim.host.VmfsDatastoreOption.AllExtentInfo", "VmfsDatastoreAllExtentOption", "test.vim.host.VmfsDatastoreOption.SingleExtentInfo", "test.version.version1", None)
CreateDataType("test.vim.host.VmfsDatastoreOption.MultipleExtentInfo", "VmfsDatastoreMultipleExtentOption", "test.vim.host.VmfsDatastoreOption.Info", "test.version.version1", [("vmfsExtent", "test.vim.host.DiskPartitionInfo.BlockRange[]", "test.version.version1", 0)])
CreateDataType("test.vim.host.VmfsDatastoreSpec", "VmfsDatastoreSpec", "vmodl.DynamicData", "test.version.version1", [("diskUuid", "string", "test.version.version1", 0)])
CreateDataType("test.vim.option.OptionDef", "OptionDef", "test.vim.ElementDescription", "test.version.version1", [("optionType", "test.vim.option.OptionType", "test.version.version1", 0)])
CreateDataType("test.vim.option.OptionType", "OptionType", "vmodl.DynamicData", "test.version.version1", [("valueIsReadonly", "boolean", "test.version.version1", F_OPTIONAL)])
CreateDataType("test.vim.option.OptionValue", "OptionValue", "vmodl.DynamicData", "test.version.version1", [("key", "string", "test.version.version1", 0), ("value", "anyType", "test.version.version1", F_OPTIONAL)])
CreateDataType("test.vim.option.StringOption", "StringOption", "test.vim.option.OptionType", "test.version.version1", [("defaultValue", "string", "test.version.version1", 0), ("validCharacters", "string", "test.version.version1", F_OPTIONAL)])
CreateDataType("test.vim.vApp.EntityConfigInfo", "VAppEntityConfigInfo", "vmodl.DynamicData", "test.version.version5", [("key", "test.vim.ManagedEntity", "test.version.version5", F_OPTIONAL), ("tag", "string", "test.version.version5", F_OPTIONAL), ("startOrder", "int", "test.version.version5", F_OPTIONAL), ("startDelay", "int", "test.version.version5", F_OPTIONAL), ("waitingForGuest", "boolean", "test.version.version5", F_OPTIONAL), ("startAction", "string", "test.version.version5", F_OPTIONAL), ("stopDelay", "int", "test.version.version5", F_OPTIONAL), ("stopAction", "string", "test.version.version5", F_OPTIONAL)])
CreateEnumType("test.vim.vApp.EntityConfigInfo.Action", "VAppAutoStartAction", "test.version.version5", ["none", "powerOn", "powerOff", "guestShutdown", "suspend"])
CreateDataType("test.vim.vApp.IPAssignmentInfo", "VAppIPAssignmentInfo", "vmodl.DynamicData", "test.version.version5", [("supportedAllocationScheme", "string[]", "test.version.version5", F_OPTIONAL), ("ipAllocationPolicy", "string", "test.version.version5", F_OPTIONAL), ("supportedIpProtocol", "string[]", "test.version.version5", F_OPTIONAL), ("ipProtocol", "string", "test.version.version5", F_OPTIONAL)])
CreateEnumType("test.vim.vApp.IPAssignmentInfo.IpAllocationPolicy", "VAppIPAssignmentInfoIpAllocationPolicy", "test.version.version5", ["dhcpPolicy", "transientPolicy", "fixedPolicy"])
CreateEnumType("test.vim.vApp.IPAssignmentInfo.AllocationSchemes", "VAppIPAssignmentInfoAllocationSchemes", "test.version.version5", ["dhcp", "ovfenv"])
CreateEnumType("test.vim.vApp.IPAssignmentInfo.Protocols", "VAppIPAssignmentInfoProtocols", "test.version.version5", ["IPv4", "IPv6"])
CreateDataType("test.vim.vApp.OvfSectionInfo", "VAppOvfSectionInfo", "vmodl.DynamicData", "test.version.version5", [("key", "int", "test.version.version5", F_OPTIONAL), ("namespace", "string", "test.version.version5", F_OPTIONAL), ("type", "string", "test.version.version5", F_OPTIONAL), ("atEnvelopeLevel", "boolean", "test.version.version5", F_OPTIONAL), ("contents", "string", "test.version.version5", F_OPTIONAL)])
CreateDataType("test.vim.vApp.ProductInfo", "VAppProductInfo", "vmodl.DynamicData", "test.version.version5", [("key", "int", "test.version.version5", 0), ("classId", "string", "test.version.version5", F_OPTIONAL), ("instanceId", "string", "test.version.version5", F_OPTIONAL), ("name", "string", "test.version.version5", F_OPTIONAL), ("vendor", "string", "test.version.version5", F_OPTIONAL), ("version", "string", "test.version.version5", F_OPTIONAL), ("fullVersion", "string", "test.version.version5", F_OPTIONAL), ("vendorUrl", "string", "test.version.version5", F_OPTIONAL), ("productUrl", "string", "test.version.version5", F_OPTIONAL), ("appUrl", "string", "test.version.version5", F_OPTIONAL)])
CreateDataType("test.vim.vApp.PropertyInfo", "VAppPropertyInfo", "vmodl.DynamicData", "test.version.version5", [("key", "int", "test.version.version5", 0), ("classId", "string", "test.version.version5", F_OPTIONAL), ("instanceId", "string", "test.version.version5", F_OPTIONAL), ("id", "string", "test.version.version5", F_OPTIONAL), ("category", "string", "test.version.version5", F_OPTIONAL), ("label", "string", "test.version.version5", F_OPTIONAL), ("type", "string", "test.version.version5", F_OPTIONAL), ("userConfigurable", "boolean", "test.version.version5", F_OPTIONAL), ("defaultValue", "string", "test.version.version5", F_OPTIONAL), ("value", "string", "test.version.version5", F_OPTIONAL), ("description", "string", "test.version.version5", F_OPTIONAL)])
CreateDataType("test.vim.vApp.VmConfigInfo", "VmConfigInfo", "vmodl.DynamicData", "test.version.version5", [("product", "test.vim.vApp.ProductInfo[]", "test.version.version5", F_OPTIONAL), ("property", "test.vim.vApp.PropertyInfo[]", "test.version.version5", F_OPTIONAL), ("ipAssignment", "test.vim.vApp.IPAssignmentInfo", "test.version.version5", 0), ("eula", "string[]", "test.version.version5", F_OPTIONAL), ("ovfSection", "test.vim.vApp.OvfSectionInfo[]", "test.version.version5", F_OPTIONAL), ("ovfEnvironmentTransport", "string[]", "test.version.version5", F_OPTIONAL), ("installBootRequired", "boolean", "test.version.version5", 0), ("installBootStopDelay", "int", "test.version.version5", 0)])
CreateDataType("test.vim.vm.AffinityInfo", "VirtualMachineAffinityInfo", "vmodl.DynamicData", "test.version.version1", [("affinitySet", "int[]", "test.version.version1", F_OPTIONAL)])
CreateDataType("test.vim.vm.BootOptions", "VirtualMachineBootOptions", "vmodl.DynamicData", "test.version.version2", [("bootDelay", "long", "test.version.version2", F_OPTIONAL), ("enterBIOSSetup", "boolean", "test.version.version2", F_OPTIONAL)])
CreateDataType("test.vim.vm.ConfigInfo", "VirtualMachineConfigInfo", "vmodl.DynamicData", "test.version.version1", [("changeVersion", "string", "test.version.version1", 0), ("modified", "vmodl.DateTime", "test.version.version1", 0), ("name", "string", "test.version.version1", 0), ("guestFullName", "string", "test.version.version1", 0), ("version", "string", "test.version.version1", 0), ("uuid", "string", "test.version.version1", 0), ("instanceUuid", "string", "test.version.version5", F_OPTIONAL), ("npivNodeWorldWideName", "long[]", "test.version.version2", F_OPTIONAL), ("npivPortWorldWideName", "long[]", "test.version.version2", F_OPTIONAL), ("npivWorldWideNameType", "string", "test.version.version2", F_OPTIONAL), ("npivDesiredNodeWwns", "short", "test.version.version5", F_OPTIONAL), ("npivDesiredPortWwns", "short", "test.version.version5", F_OPTIONAL), ("npivTemporaryDisabled", "boolean", "test.version.version5", F_OPTIONAL), ("npivOnNonRdmDisks", "boolean", "test.version.version5", F_OPTIONAL), ("locationId", "string", "test.version.version1", F_OPTIONAL), ("template", "boolean", "test.version.version1", 0), ("guestId", "string", "test.version.version1", 0), ("alternateGuestName", "string", "test.version.version2", 0), ("annotation", "string", "test.version.version1", F_OPTIONAL), ("files", "test.vim.vm.FileInfo", "test.version.version1", 0), ("tools", "test.vim.vm.ToolsConfigInfo", "test.version.version1", F_OPTIONAL), ("flags", "test.vim.vm.FlagInfo", "test.version.version1", 0), ("consolePreferences", "test.vim.vm.ConsolePreferences", "test.version.version1", F_OPTIONAL), ("defaultPowerOps", "test.vim.vm.DefaultPowerOpInfo", "test.version.version1", 0), ("hardware", "test.vim.vm.VirtualHardware", "test.version.version1", 0), ("cpuAllocation", "test.vim.ResourceAllocationInfo", "test.version.version1", F_OPTIONAL), ("memoryAllocation", "test.vim.ResourceAllocationInfo", "test.version.version1", F_OPTIONAL), ("memoryHotAddEnabled", "boolean", "test.version.version4", F_OPTIONAL), ("cpuHotAddEnabled", "boolean", "test.version.version4", F_OPTIONAL), ("cpuHotRemoveEnabled", "boolean", "test.version.version4", F_OPTIONAL), ("hotPlugMemoryLimit", "long", "test.version.version4", F_OPTIONAL), ("hotPlugMemoryIncrementSize", "long", "test.version.version4", F_OPTIONAL), ("cpuAffinity", "test.vim.vm.AffinityInfo", "test.version.version1", F_OPTIONAL), ("memoryAffinity", "test.vim.vm.AffinityInfo", "test.version.version1", F_OPTIONAL), ("networkShaper", "test.vim.vm.NetworkShaperInfo", "test.version.version1", F_OPTIONAL), ("extraConfig", "test.vim.option.OptionValue[]", "test.version.version1", F_OPTIONAL), ("cpuFeatureMask", "test.vim.host.CpuIdInfo[]", "test.version.version1", F_OPTIONAL), ("datastoreUrl", "test.vim.vm.ConfigInfo.DatastoreUrlPair[]", "test.version.version1", F_OPTIONAL), ("swapPlacement", "string", "test.version.version2", F_OPTIONAL), ("swapDirectory", "string", "test.version.version5", F_OPTIONAL), ("preserveSwapOnPowerOff", "boolean", "test.version.version5", F_OPTIONAL), ("bootOptions", "test.vim.vm.BootOptions", "test.version.version2", F_OPTIONAL), ("ftInfo", "test.vim.vm.FaultToleranceConfigInfo", "test.version.version5", F_OPTIONAL), ("vAppConfig", "test.vim.vApp.VmConfigInfo", "test.version.version5", F_OPTIONAL), ("vAssertsEnabled", "boolean", "test.version.version5", F_OPTIONAL), ("changeTrackingEnabled", "boolean", "test.version.version5", F_OPTIONAL)])
CreateEnumType("test.vim.vm.ConfigInfo.NpivWwnType", "VirtualMachineConfigInfoNpivWwnType", "test.version.version2", ["vc", "host", "external"])
CreateEnumType("test.vim.vm.ConfigInfo.SwapPlacementType", "VirtualMachineConfigInfoSwapPlacementType", "test.version.version2", ["inherit", "vmDirectory", "hostLocal", "vmConfigured"])
CreateDataType("test.vim.vm.ConfigInfo.DatastoreUrlPair", "VirtualMachineConfigInfoDatastoreUrlPair", "vmodl.DynamicData", "test.version.version1", [("name", "string", "test.version.version1", 0), ("url", "string", "test.version.version1", 0)])
CreateDataType("test.vim.vm.ConsolePreferences", "VirtualMachineConsolePreferences", "vmodl.DynamicData", "test.version.version1", [("powerOnWhenOpened", "boolean", "test.version.version1", F_OPTIONAL), ("enterFullScreenOnPowerOn", "boolean", "test.version.version1", F_OPTIONAL), ("closeOnPowerOffOrSuspend", "boolean", "test.version.version1", F_OPTIONAL)])
CreateDataType("test.vim.vm.DefaultPowerOpInfo", "VirtualMachineDefaultPowerOpInfo", "vmodl.DynamicData", "test.version.version1", [("powerOffType", "string", "test.version.version1", F_OPTIONAL), ("suspendType", "string", "test.version.version1", F_OPTIONAL), ("resetType", "string", "test.version.version1", F_OPTIONAL), ("defaultPowerOffType", "string", "test.version.version1", F_OPTIONAL), ("defaultSuspendType", "string", "test.version.version1", F_OPTIONAL), ("defaultResetType", "string", "test.version.version1", F_OPTIONAL), ("standbyAction", "string", "test.version.version1", F_OPTIONAL)])
CreateEnumType("test.vim.vm.DefaultPowerOpInfo.PowerOpType", "VirtualMachinePowerOpType", "test.version.version1", ["soft", "hard", "preset"])
CreateEnumType("test.vim.vm.DefaultPowerOpInfo.StandbyActionType", "VirtualMachineStandbyActionType", "test.version.version1", ["checkpoint", "powerOnSuspend"])
CreateDataType("test.vim.vm.FaultToleranceConfigInfo", "FaultToleranceConfigInfo", "vmodl.DynamicData", "test.version.version5", [("role", "int", "test.version.version5", 0), ("instanceUuids", "string[]", "test.version.version5", 0), ("configPaths", "string[]", "test.version.version5", 0)])
CreateDataType("test.vim.vm.FaultTolerancePrimaryConfigInfo", "FaultTolerancePrimaryConfigInfo", "test.vim.vm.FaultToleranceConfigInfo", "test.version.version5", [("secondaries", "test.vim.VirtualMachine[]", "test.version.version5", 0)])
CreateDataType("test.vim.vm.FaultToleranceSecondaryConfigInfo", "FaultToleranceSecondaryConfigInfo", "test.vim.vm.FaultToleranceConfigInfo", "test.version.version5", [("primaryVM", "test.vim.VirtualMachine", "test.version.version5", 0)])
CreateDataType("test.vim.vm.FileInfo", "VirtualMachineFileInfo", "vmodl.DynamicData", "test.version.version1", [("vmPathName", "string", "test.version.version1", F_OPTIONAL), ("snapshotDirectory", "string", "test.version.version1", F_OPTIONAL), ("suspendDirectory", "string", "test.version.version1", F_OPTIONAL), ("logDirectory", "string", "test.version.version1", F_OPTIONAL)])
CreateDataType("test.vim.vm.FlagInfo", "VirtualMachineFlagInfo", "vmodl.DynamicData", "test.version.version1", [("disableAcceleration", "boolean", "test.version.version1", F_OPTIONAL), ("enableLogging", "boolean", "test.version.version1", F_OPTIONAL), ("useToe", "boolean", "test.version.version1", F_OPTIONAL), ("runWithDebugInfo", "boolean", "test.version.version1", F_OPTIONAL), ("monitorType", "string", "test.version.version2", F_OPTIONAL), ("htSharing", "string", "test.version.version1", F_OPTIONAL), ("snapshotDisabled", "boolean", "test.version.version2", F_OPTIONAL), ("snapshotLocked", "boolean", "test.version.version2", F_OPTIONAL), ("diskUuidEnabled", "boolean", "test.version.version2", F_OPTIONAL), ("virtualMmuUsage", "string", "test.version.version2", F_OPTIONAL), ("virtualExecUsage", "string", "test.version.version5", F_OPTIONAL), ("snapshotPowerOffBehavior", "string", "test.version.version2", F_OPTIONAL), ("recordReplayEnabled", "boolean", "test.version.version5", F_OPTIONAL)])
CreateEnumType("test.vim.vm.FlagInfo.HtSharing", "VirtualMachineHtSharing", "test.version.version1", ["any", "none", "internal"])
CreateEnumType("test.vim.vm.FlagInfo.PowerOffBehavior", "VirtualMachinePowerOffBehavior", "test.version.version2", ["powerOff", "revert", "prompt"])
CreateEnumType("test.vim.vm.FlagInfo.MonitorType", "VirtualMachineFlagInfoMonitorType", "test.version.version2", ["release", "debug", "stats"])
CreateEnumType("test.vim.vm.FlagInfo.VirtualMmuUsage", "VirtualMachineFlagInfoVirtualMmuUsage", "test.version.version2", ["automatic", "on", "off"])
CreateEnumType("test.vim.vm.FlagInfo.VirtualExecUsage", "VirtualMachineFlagInfoVirtualExecUsage", "test.version.version5", ["hvAuto", "hvOn", "hvOff"])
CreateDataType("test.vim.vm.GuestInfo", "GuestInfo", "vmodl.DynamicData", "test.version.version1", [("toolsStatus", "test.vim.vm.GuestInfo.ToolsStatus", "test.version.version1", F_OPTIONAL), ("toolsVersionStatus", "string", "test.version.version5", F_OPTIONAL), ("toolsRunningStatus", "string", "test.version.version5", F_OPTIONAL), ("toolsVersion", "string", "test.version.version1", F_OPTIONAL), ("guestId", "string", "test.version.version1", F_OPTIONAL), ("guestFamily", "string", "test.version.version1", F_OPTIONAL), ("guestFullName", "string", "test.version.version1", F_OPTIONAL), ("hostName", "string", "test.version.version1", F_OPTIONAL), ("ipAddress", "string", "test.version.version1", F_OPTIONAL), ("net", "test.vim.vm.GuestInfo.NicInfo[]", "test.version.version1", F_OPTIONAL), ("disk", "test.vim.vm.GuestInfo.DiskInfo[]", "test.version.version1", F_OPTIONAL), ("screen", "test.vim.vm.GuestInfo.ScreenInfo", "test.version.version1", F_OPTIONAL), ("guestState", "string", "test.version.version1", 0)])
CreateEnumType("test.vim.vm.GuestInfo.ToolsStatus", "VirtualMachineToolsStatus", "test.version.version1", ["toolsNotInstalled", "toolsNotRunning", "toolsOld", "toolsOk"])
CreateEnumType("test.vim.vm.GuestInfo.ToolsVersionStatus", "VirtualMachineToolsVersionStatus", "test.version.version5", ["guestToolsNotInstalled", "guestToolsNeedUpgrade", "guestToolsCurrent", "guestToolsUnmanaged"])
CreateEnumType("test.vim.vm.GuestInfo.ToolsRunningStatus", "VirtualMachineToolsRunningStatus", "test.version.version5", ["guestToolsNotRunning", "guestToolsRunning", "guestToolsExecutingScripts"])
CreateDataType("test.vim.vm.GuestInfo.DiskInfo", "GuestDiskInfo", "vmodl.DynamicData", "test.version.version1", [("diskPath", "string", "test.version.version1", F_OPTIONAL), ("capacity", "long", "test.version.version1", F_OPTIONAL), ("freeSpace", "long", "test.version.version1", F_OPTIONAL)])
CreateDataType("test.vim.vm.GuestInfo.NicInfo", "GuestNicInfo", "vmodl.DynamicData", "test.version.version1", [("network", "string", "test.version.version1", F_OPTIONAL), ("ipAddress", "string[]", "test.version.version1", F_OPTIONAL), ("macAddress", "string", "test.version.version1", F_OPTIONAL), ("connected", "boolean", "test.version.version1", 0), ("deviceConfigId", "int", "test.version.version1", 0)])
CreateDataType("test.vim.vm.GuestInfo.ScreenInfo", "GuestScreenInfo", "vmodl.DynamicData", "test.version.version1", [("width", "int", "test.version.version1", 0), ("height", "int", "test.version.version1", 0)])
CreateEnumType("test.vim.vm.GuestInfo.GuestState", "VirtualMachineGuestState", "test.version.version1", ["running", "shuttingDown", "resetting", "standby", "notRunning", "unknown"])
CreateDataType("test.vim.vm.NetworkShaperInfo", "VirtualMachineNetworkShaperInfo", "vmodl.DynamicData", "test.version.version1", [("enabled", "boolean", "test.version.version1", F_OPTIONAL), ("peakBps", "long", "test.version.version1", F_OPTIONAL), ("averageBps", "long", "test.version.version1", F_OPTIONAL), ("burstSize", "long", "test.version.version1", F_OPTIONAL)])
CreateDataType("test.vim.vm.ToolsConfigInfo", "ToolsConfigInfo", "vmodl.DynamicData", "test.version.version1", [("toolsVersion", "int", "test.version.version1", F_OPTIONAL), ("afterPowerOn", "boolean", "test.version.version1", F_OPTIONAL), ("afterResume", "boolean", "test.version.version1", F_OPTIONAL), ("beforeGuestStandby", "boolean", "test.version.version1", F_OPTIONAL), ("beforeGuestShutdown", "boolean", "test.version.version1", F_OPTIONAL), ("beforeGuestReboot", "boolean", "test.version.version1", F_OPTIONAL), ("toolsUpgradePolicy", "string", "test.version.version2", F_OPTIONAL), ("pendingCustomization", "string", "test.version.version2", F_OPTIONAL), ("syncTimeWithHost", "boolean", "test.version.version2", F_OPTIONAL)])
CreateEnumType("test.vim.vm.ToolsConfigInfo.UpgradePolicy", "UpgradePolicy", "test.version.version2", ["manual", "upgradeAtPowerCycle"])
CreateDataType("test.vim.vm.VirtualHardware", "VirtualHardware", "vmodl.DynamicData", "test.version.version1", [("numCPU", "int", "test.version.version1", 0), ("memoryMB", "int", "test.version.version1", 0), ("device", "test.vim.vm.device.VirtualDevice[]", "test.version.version1", F_OPTIONAL)])
CreateDataType("test.vim.vm.device.VirtualDevice", "VirtualDevice", "vmodl.DynamicData", "test.version.version1", [("key", "int", "test.version.version1", 0), ("deviceInfo", "test.vim.Description", "test.version.version1", F_OPTIONAL), ("backing", "test.vim.vm.device.VirtualDevice.BackingInfo", "test.version.version1", F_OPTIONAL), ("connectable", "test.vim.vm.device.VirtualDevice.ConnectInfo", "test.version.version1", F_OPTIONAL), ("controllerKey", "int", "test.version.version1", F_OPTIONAL), ("unitNumber", "int", "test.version.version1", F_OPTIONAL)])
CreateDataType("test.vim.vm.device.VirtualDevice.BackingInfo", "VirtualDeviceBackingInfo", "vmodl.DynamicData", "test.version.version1", None)
CreateDataType("test.vim.vm.device.VirtualDevice.FileBackingInfo", "VirtualDeviceFileBackingInfo", "test.vim.vm.device.VirtualDevice.BackingInfo", "test.version.version1", [("fileName", "string", "test.version.version1", 0), ("datastore", "test.vim.Datastore", "test.version.version1", F_OPTIONAL)])
CreateDataType("test.vim.vm.device.VirtualDevice.DeviceBackingInfo", "VirtualDeviceDeviceBackingInfo", "test.vim.vm.device.VirtualDevice.BackingInfo", "test.version.version1", [("deviceName", "string", "test.version.version1", 0), ("useAutoDetect", "boolean", "test.version.version2", F_OPTIONAL)])
CreateDataType("test.vim.vm.device.VirtualDevice.RemoteDeviceBackingInfo", "VirtualDeviceRemoteDeviceBackingInfo", "test.vim.vm.device.VirtualDevice.BackingInfo", "test.version.version1", [("deviceName", "string", "test.version.version1", 0), ("useAutoDetect", "boolean", "test.version.version2", F_OPTIONAL)])
CreateDataType("test.vim.vm.device.VirtualDevice.PipeBackingInfo", "VirtualDevicePipeBackingInfo", "test.vim.vm.device.VirtualDevice.BackingInfo", "test.version.version1", [("pipeName", "string", "test.version.version1", 0)])
CreateDataType("test.vim.vm.device.VirtualDevice.ConnectInfo", "VirtualDeviceConnectInfo", "vmodl.DynamicData", "test.version.version1", [("startConnected", "boolean", "test.version.version1", 0), ("allowGuestControl", "boolean", "test.version.version1", 0), ("connected", "boolean", "test.version.version1", 0), ("status", "string", "test.version.version5", F_OPTIONAL)])
CreateEnumType("test.vim.vm.device.VirtualDevice.ConnectInfo.Status", "VirtualDeviceConnectInfoStatus", "test.version.version5", ["ok", "recoverableError", "unrecoverableError", "untried"])
CreateDataType("test.vim.vm.device.VirtualDisk", "VirtualDisk", "test.vim.vm.device.VirtualDevice", "test.version.version1", [("capacityInKB", "long", "test.version.version1", 0), ("shares", "test.vim.SharesInfo", "test.version.version1", F_OPTIONAL)])
CreateDataType("test.vim.vm.device.VirtualDisk.SparseVer1BackingInfo", "VirtualDiskSparseVer1BackingInfo", "test.vim.vm.device.VirtualDevice.FileBackingInfo", "test.version.version1", [("diskMode", "string", "test.version.version1", 0), ("split", "boolean", "test.version.version1", F_OPTIONAL), ("writeThrough", "boolean", "test.version.version1", F_OPTIONAL), ("spaceUsedInKB", "long", "test.version.version1", F_OPTIONAL), ("contentId", "string", "test.version.version5", F_OPTIONAL), ("parent", "test.vim.vm.device.VirtualDisk.SparseVer1BackingInfo", "test.version.version5", F_OPTIONAL)])
CreateDataType("test.vim.vm.device.VirtualDisk.SparseVer2BackingInfo", "VirtualDiskSparseVer2BackingInfo", "test.vim.vm.device.VirtualDevice.FileBackingInfo", "test.version.version1", [("diskMode", "string", "test.version.version1", 0), ("split", "boolean", "test.version.version1", F_OPTIONAL), ("writeThrough", "boolean", "test.version.version1", F_OPTIONAL), ("spaceUsedInKB", "long", "test.version.version1", F_OPTIONAL), ("uuid", "string", "test.version.version2", F_OPTIONAL), ("contentId", "string", "test.version.version5", F_OPTIONAL), ("changeId", "string", "test.version.version5", F_OPTIONAL), ("parent", "test.vim.vm.device.VirtualDisk.SparseVer2BackingInfo", "test.version.version5", F_OPTIONAL)])
CreateDataType("test.vim.vm.device.VirtualDisk.FlatVer1BackingInfo", "VirtualDiskFlatVer1BackingInfo", "test.vim.vm.device.VirtualDevice.FileBackingInfo", "test.version.version1", [("diskMode", "string", "test.version.version1", 0), ("split", "boolean", "test.version.version1", F_OPTIONAL), ("writeThrough", "boolean", "test.version.version1", F_OPTIONAL), ("contentId", "string", "test.version.version5", F_OPTIONAL), ("parent", "test.vim.vm.device.VirtualDisk.FlatVer1BackingInfo", "test.version.version5", F_OPTIONAL)])
CreateDataType("test.vim.vm.device.VirtualDisk.FlatVer2BackingInfo", "VirtualDiskFlatVer2BackingInfo", "test.vim.vm.device.VirtualDevice.FileBackingInfo", "test.version.version1", [("diskMode", "string", "test.version.version1", 0), ("split", "boolean", "test.version.version1", F_OPTIONAL), ("writeThrough", "boolean", "test.version.version1", F_OPTIONAL), ("thinProvisioned", "boolean", "test.version.version1", F_OPTIONAL), ("eagerlyScrub", "boolean", "test.version.version5", F_OPTIONAL), ("uuid", "string", "test.version.version2", F_OPTIONAL), ("contentId", "string", "test.version.version5", F_OPTIONAL), ("changeId", "string", "test.version.version5", F_OPTIONAL), ("parent", "test.vim.vm.device.VirtualDisk.FlatVer2BackingInfo", "test.version.version5", F_OPTIONAL)])
CreateDataType("test.vim.vm.device.VirtualDisk.RawDiskVer2BackingInfo", "VirtualDiskRawDiskVer2BackingInfo", "test.vim.vm.device.VirtualDevice.DeviceBackingInfo", "test.version.version1", [("descriptorFileName", "string", "test.version.version1", 0), ("uuid", "string", "test.version.version2", F_OPTIONAL), ("changeId", "string", "test.version.version5", F_OPTIONAL)])
CreateDataType("test.vim.vm.device.VirtualDisk.PartitionedRawDiskVer2BackingInfo", "VirtualDiskPartitionedRawDiskVer2BackingInfo", "test.vim.vm.device.VirtualDisk.RawDiskVer2BackingInfo", "test.version.version1", [("partition", "int[]", "test.version.version1", 0)])
CreateDataType("test.vim.vm.device.VirtualDisk.RawDiskMappingVer1BackingInfo", "VirtualDiskRawDiskMappingVer1BackingInfo", "test.vim.vm.device.VirtualDevice.FileBackingInfo", "test.version.version1", [("lunUuid", "string", "test.version.version1", F_OPTIONAL), ("deviceName", "string", "test.version.version1", F_OPTIONAL), ("compatibilityMode", "string", "test.version.version1", F_OPTIONAL), ("diskMode", "string", "test.version.version1", F_OPTIONAL), ("uuid", "string", "test.version.version2", F_OPTIONAL), ("contentId", "string", "test.version.version5", F_OPTIONAL), ("changeId", "string", "test.version.version5", F_OPTIONAL), ("parent", "test.vim.vm.device.VirtualDisk.RawDiskMappingVer1BackingInfo", "test.version.version5", F_OPTIONAL)])
CreateDataType("test.vim.vm.device.VirtualEthernetCard", "VirtualEthernetCard", "test.vim.vm.device.VirtualDevice", "test.version.version1", [("addressType", "string", "test.version.version1", F_OPTIONAL), ("macAddress", "string", "test.version.version1", F_OPTIONAL), ("wakeOnLanEnabled", "boolean", "test.version.version1", F_OPTIONAL)])
CreateDataType("test.vim.vm.device.VirtualEthernetCard.NetworkBackingInfo", "VirtualEthernetCardNetworkBackingInfo", "test.vim.vm.device.VirtualDevice.DeviceBackingInfo", "test.version.version1", [("network", "test.vim.Network", "test.version.version1", F_OPTIONAL), ("inPassthroughMode", "boolean", "test.version.version4", F_OPTIONAL)])
CreateDataType("test.vim.vm.device.VirtualEthernetCard.LegacyNetworkBackingInfo", "VirtualEthernetCardLegacyNetworkBackingInfo", "test.vim.vm.device.VirtualDevice.DeviceBackingInfo", "test.version.version1", None)
CreateDataType("test.vim.vm.device.VirtualEthernetCard.DistributedVirtualPortBackingInfo", "VirtualEthernetCardDistributedVirtualPortBackingInfo", "test.vim.vm.device.VirtualDevice.BackingInfo", "test.version.version5", [("port", "test.vim.dvs.PortConnection", "test.version.version5", 0)])
CreateDataType("test.vim.vm.device.VirtualFloppy", "VirtualFloppy", "test.vim.vm.device.VirtualDevice", "test.version.version1", None)
CreateDataType("test.vim.vm.device.VirtualFloppy.ImageBackingInfo", "VirtualFloppyImageBackingInfo", "test.vim.vm.device.VirtualDevice.FileBackingInfo", "test.version.version1", None)
CreateDataType("test.vim.vm.device.VirtualFloppy.DeviceBackingInfo", "VirtualFloppyDeviceBackingInfo", "test.vim.vm.device.VirtualDevice.DeviceBackingInfo", "test.version.version1", None)
CreateDataType("test.vim.vm.device.VirtualFloppy.RemoteDeviceBackingInfo", "VirtualFloppyRemoteDeviceBackingInfo", "test.vim.vm.device.VirtualDevice.RemoteDeviceBackingInfo", "test.version.version1", None)
CreateDataType("test.vim.vm.device.VirtualKeyboard", "VirtualKeyboard", "test.vim.vm.device.VirtualDevice", "test.version.version1", None)
CreateDataType("test.vim.vm.device.VirtualPointingDevice", "VirtualPointingDevice", "test.vim.vm.device.VirtualDevice", "test.version.version1", None)
CreateDataType("test.vim.vm.device.VirtualPointingDevice.DeviceBackingInfo", "VirtualPointingDeviceDeviceBackingInfo", "test.vim.vm.device.VirtualDevice.DeviceBackingInfo", "test.version.version1", [("hostPointingDevice", "string", "test.version.version1", 0)])
CreateDataType("test.vim.vm.device.VirtualVMCIDevice", "VirtualMachineVMCIDevice", "test.vim.vm.device.VirtualDevice", "test.version.version4", [("id", "long", "test.version.version4", F_OPTIONAL), ("allowUnrestrictedCommunication", "boolean", "test.version.version4", F_OPTIONAL)])
CreateDataType("test.vim.vm.device.VirtualVideoCard", "VirtualMachineVideoCard", "test.vim.vm.device.VirtualDevice", "test.version.version1", [("videoRamSizeInKB", "long", "test.version.version1", F_OPTIONAL), ("numDisplays", "int", "test.version.version4", F_OPTIONAL), ("useAutoDetect", "boolean", "test.version.version4", F_OPTIONAL), ("enable3DSupport", "boolean", "test.version.version4", F_OPTIONAL)])
CreateDataType("test.DataIterDerived", "DataIterDerived", "test.DataIterObject", "test.version.version1", None)
CreateManagedType("test.DerivedTestObject", "DerivedTestObject", "test.TestObject", "test.version.version1", None, [("doNothing", "DoNothing", "test.version.version1", (), (0, "void", "void"), None, None)])
CreateDataType("test.Extended", "Extended", "test.Base", "test.version.version1", [("booleanField", "boolean", "test.version.version1", 0), ("optField", "string", "test.version.version1", F_OPTIONAL), ("enumField", "test.TestObject.TestEnum", "test.version.version1", F_OPTIONAL), ("uriField", "vmodl.URI", "test.version.version6", F_OPTIONAL), ("uriArray", "vmodl.URI[]", "test.version.version6", F_OPTIONAL), ("binaryField", "vmodl.Binary", "test.version.version6", F_OPTIONAL), ("binaryArray", "vmodl.Binary[]", "test.version.version6", F_OPTIONAL)])
CreateDataType("test.vim.BoolPolicy", "BoolPolicy", "test.vim.InheritablePolicy", "test.version.version5", [("value", "boolean", "test.version.version5", F_OPTIONAL)])
CreateManagedType("test.vim.DistributedVirtualSwitch", "DistributedVirtualSwitch", "vmodl.ManagedObject", "test.version.version5", None, None)
CreateEnumType("test.vim.DistributedVirtualSwitch.ProductSpecOperationType", "DistributedVirtualSwitchProductSpecOperationType", "test.version.version5", ["preInstall", "upgrade", "notifyAvailableUpgrade", "proceedWithUpgrade", "updateBundleInfo"])
CreateDataType("test.vim.DistributedVirtualSwitch.ContactInfo", "DVSContactInfo", "vmodl.DynamicData", "test.version.version5", [("name", "string", "test.version.version5", F_OPTIONAL), ("contact", "string", "test.version.version5", F_OPTIONAL)])
CreateDataType("test.vim.DistributedVirtualSwitch.Capability", "DVSCapability", "vmodl.DynamicData", "test.version.version5", [("dvsOperationSupported", "boolean", "test.version.version5", F_OPTIONAL), ("dvPortGroupOperationSupported", "boolean", "test.version.version5", F_OPTIONAL), ("dvPortOperationSupported", "boolean", "test.version.version5", F_OPTIONAL), ("compatibleHostComponentProductInfo", "test.vim.dvs.HostProductSpec[]", "test.version.version5", F_OPTIONAL)])
CreateDataType("test.vim.DistributedVirtualSwitch.Summary", "DVSSummary", "vmodl.DynamicData", "test.version.version5", [("name", "string", "test.version.version5", 0), ("uuid", "string", "test.version.version5", 0), ("numPorts", "int", "test.version.version5", 0), ("productInfo", "test.vim.dvs.ProductSpec", "test.version.version5", F_OPTIONAL), ("hostMember", "test.vim.HostSystem[]", "test.version.version5", F_OPTIONAL), ("vm", "test.vim.VirtualMachine[]", "test.version.version5", F_OPTIONAL), ("host", "test.vim.HostSystem[]", "test.version.version5", F_OPTIONAL), ("portgroupName", "string[]", "test.version.version5", F_OPTIONAL), ("description", "string", "test.version.version5", F_OPTIONAL), ("contact", "test.vim.DistributedVirtualSwitch.ContactInfo", "test.version.version5", F_OPTIONAL)])
CreateDataType("test.vim.DistributedVirtualSwitch.SwitchPolicy", "DVSPolicy", "vmodl.DynamicData", "test.version.version5", [("autoPreInstallAllowed", "boolean", "test.version.version5", F_OPTIONAL), ("autoUpgradeAllowed", "boolean", "test.version.version5", F_OPTIONAL), ("partialUpgradeAllowed", "boolean", "test.version.version5", F_OPTIONAL)])
CreateDataType("test.vim.DistributedVirtualSwitch.UplinkPortPolicy", "DVSUplinkPortPolicy", "vmodl.DynamicData", "test.version.version5", None)
CreateDataType("test.vim.DistributedVirtualSwitch.NameArrayUplinkPortPolicy", "DVSNameArrayUplinkPortPolicy", "test.vim.DistributedVirtualSwitch.UplinkPortPolicy", "test.version.version5", [("uplinkPortName", "string[]", "test.version.version5", 0)])
CreateDataType("test.vim.DistributedVirtualSwitch.ConfigSpec", "DVSConfigSpec", "vmodl.DynamicData", "test.version.version5", [("configVersion", "string", "test.version.version5", F_OPTIONAL), ("name", "string", "test.version.version5", F_OPTIONAL), ("numStandalonePorts", "int", "test.version.version5", F_OPTIONAL), ("maxPorts", "int", "test.version.version5", F_OPTIONAL), ("uplinkPortPolicy", "test.vim.DistributedVirtualSwitch.UplinkPortPolicy", "test.version.version5", F_OPTIONAL), ("uplinkPortgroup", "test.vim.dvs.DistributedVirtualPortgroup[]", "test.version.version5", F_OPTIONAL), ("defaultPortConfig", "test.vim.dvs.DistributedVirtualPort.Setting", "test.version.version5", F_OPTIONAL), ("host", "test.vim.dvs.HostMember.ConfigSpec[]", "test.version.version5", F_OPTIONAL), ("extensionKey", "string", "test.version.version5", F_OPTIONAL), ("description", "string", "test.version.version5", F_OPTIONAL), ("policy", "test.vim.DistributedVirtualSwitch.SwitchPolicy", "test.version.version5", F_OPTIONAL), ("vendorSpecificConfig", "test.vim.dvs.KeyedOpaqueBlob[]", "test.version.version5", F_OPTIONAL), ("contact", "test.vim.DistributedVirtualSwitch.ContactInfo", "test.version.version5", F_OPTIONAL), ("switchIpAddress", "string", "test.version.version5", F_OPTIONAL)])
CreateDataType("test.vim.DistributedVirtualSwitch.CreateSpec", "DVSCreateSpec", "vmodl.DynamicData", "test.version.version5", [("configSpec", "test.vim.DistributedVirtualSwitch.ConfigSpec", "test.version.version5", 0), ("productInfo", "test.vim.dvs.ProductSpec", "test.version.version5", F_OPTIONAL), ("capability", "test.vim.DistributedVirtualSwitch.Capability", "test.version.version5", F_OPTIONAL)])
CreateDataType("test.vim.DistributedVirtualSwitch.ConfigInfo", "DVSConfigInfo", "vmodl.DynamicData", "test.version.version5", [("uuid", "string", "test.version.version5", 0), ("name", "string", "test.version.version5", 0), ("numStandalonePorts", "int", "test.version.version5", 0), ("numPorts", "int", "test.version.version5", 0), ("maxPorts", "int", "test.version.version5", 0), ("uplinkPortPolicy", "test.vim.DistributedVirtualSwitch.UplinkPortPolicy", "test.version.version5", 0), ("uplinkPortgroup", "test.vim.dvs.DistributedVirtualPortgroup[]", "test.version.version5", F_OPTIONAL), ("defaultPortConfig", "test.vim.dvs.DistributedVirtualPort.Setting", "test.version.version5", 0), ("host", "test.vim.dvs.HostMember[]", "test.version.version5", F_OPTIONAL), ("productInfo", "test.vim.dvs.ProductSpec", "test.version.version5", 0), ("targetInfo", "test.vim.dvs.ProductSpec", "test.version.version5", F_OPTIONAL), ("extensionKey", "string", "test.version.version5", F_OPTIONAL), ("vendorSpecificConfig", "test.vim.dvs.KeyedOpaqueBlob[]", "test.version.version5", F_OPTIONAL), ("policy", "test.vim.DistributedVirtualSwitch.SwitchPolicy", "test.version.version5", F_OPTIONAL), ("description", "string", "test.version.version5", F_OPTIONAL), ("configVersion", "string", "test.version.version5", 0), ("contact", "test.vim.DistributedVirtualSwitch.ContactInfo", "test.version.version5", 0), ("switchIpAddress", "string", "test.version.version5", F_OPTIONAL), ("overlayInstance", "test.vim.DistributedVirtualSwitch.OverlayInstance[]", "test.version.version5", F_OPTIONAL), ("createTime", "vmodl.DateTime", "test.version.version5", 0)])
CreateDataType("test.vim.DistributedVirtualSwitch.OverlayInstance", "DVSOverlayInstance", "vmodl.DynamicData", "test.version.version5", [("key", "string", "test.version.version5", F_OPTIONAL), ("dvsUuid", "string", "test.version.version5", F_OPTIONAL), ("overlayClass", "string", "test.version.version5", F_OPTIONAL), ("depth", "int", "test.version.version5", F_OPTIONAL)])
CreateDataType("test.vim.DistributedVirtualSwitch.OverlayConfigSpec", "DVSOverlayConfigSpec", "vmodl.DynamicData", "test.version.version5", [("overlayInstance", "test.vim.DistributedVirtualSwitch.OverlayInstance", "test.version.version5", 0), ("operation", "string", "test.version.version5", 0)])
CreateDataType("test.vim.NetworkBandwidthAllocationInfo", "NetworkBandwidthAllocationInfo", "test.vim.ResourceAllocationInfo", "test.version.version5", [("distributedVirtualSwitch", "test.vim.DistributedVirtualSwitch", "test.version.version5", F_OPTIONAL), ("distributedVirtualPort", "test.vim.dvs.DistributedVirtualPort", "test.version.version5", F_OPTIONAL), ("inShapingPolicy", "test.vim.host.NetworkPolicy.TrafficShapingPolicy", "test.version.version5", F_OPTIONAL), ("outShapingPolicy", "test.vim.host.NetworkPolicy.TrafficShapingPolicy", "test.version.version5", F_OPTIONAL)])
CreateDataType("test.vim.host.BlockAdapterTargetTransport", "HostBlockAdapterTargetTransport", "test.vim.host.TargetTransport", "test.version.version1", None)
CreateDataType("test.vim.host.BlockHba", "HostBlockHba", "test.vim.host.HostBusAdapter", "test.version.version1", None)
CreateDataType("test.vim.host.ConfigInfo", "HostConfigInfo", "vmodl.DynamicData", "test.version.version1", [("host", "test.vim.HostSystem", "test.version.version1", 0), ("product", "test.vim.AboutInfo", "test.version.version1", 0), ("hyperThread", "test.vim.host.CpuSchedulerSystem.HyperThreadScheduleInfo", "test.version.version1", F_OPTIONAL), ("consoleReservation", "test.vim.host.MemoryManagerSystem.ServiceConsoleReservationInfo", "test.version.version1", F_OPTIONAL), ("virtualMachineReservation", "test.vim.host.MemoryManagerSystem.VirtualMachineReservationInfo", "test.version.version2", F_OPTIONAL), ("storageDevice", "test.vim.host.StorageDeviceInfo", "test.version.version1", F_OPTIONAL), ("multipathState", "test.vim.host.MultipathStateInfo", "test.version.version5", F_OPTIONAL), ("fileSystemVolume", "test.vim.host.FileSystemVolumeInfo", "test.version.version1", F_OPTIONAL), ("network", "test.vim.host.NetworkInfo", "test.version.version1", F_OPTIONAL), ("vmotion", "test.vim.host.VMotionInfo", "test.version.version1", F_OPTIONAL), ("virtualNicManagerInfo", "test.vim.host.VirtualNicManagerInfo", "test.version.version5", F_OPTIONAL), ("capabilities", "test.vim.host.NetCapabilities", "test.version.version1", F_OPTIONAL), ("datastoreCapabilities", "test.vim.host.DatastoreSystem.Capabilities", "test.version.version2", F_OPTIONAL), ("offloadCapabilities", "test.vim.host.NetOffloadCapabilities", "test.version.version1", F_OPTIONAL), ("service", "test.vim.host.ServiceInfo", "test.version.version1", F_OPTIONAL), ("firewall", "test.vim.host.FirewallInfo", "test.version.version1", F_OPTIONAL), ("autoStart", "test.vim.host.AutoStartManager.Config", "test.version.version1", F_OPTIONAL), ("activeDiagnosticPartition", "test.vim.host.DiagnosticPartition", "test.version.version1", F_OPTIONAL), ("option", "test.vim.option.OptionValue[]", "test.version.version1", F_OPTIONAL), ("optionDef", "test.vim.option.OptionDef[]", "test.version.version1", F_OPTIONAL), ("datastorePrincipal", "string", "test.version.version1", F_OPTIONAL), ("localSwapDatastore", "test.vim.Datastore", "test.version.version2", F_OPTIONAL), ("systemResources", "test.vim.host.SystemResourceInfo", "test.version.version1", F_OPTIONAL), ("dateTimeInfo", "test.vim.host.DateTimeInfo", "test.version.version2", F_OPTIONAL), ("flags", "test.vim.host.FlagInfo", "test.version.version2", F_OPTIONAL), ("adminDisabled", "boolean", "test.version.version2", F_OPTIONAL), ("ipmi", "test.vim.host.IpmiInfo", "test.version.version5", F_OPTIONAL), ("sslThumbprintInfo", "test.vim.host.SslThumbprintInfo", "test.version.version5", F_OPTIONAL), ("pciPassthruInfo", "test.vim.host.PciPassthruInfo[]", "test.version.version5", F_OPTIONAL)])
CreateDataType("test.vim.host.DateTimeInfo", "HostDateTimeInfo", "vmodl.DynamicData", "test.version.version2", [("timeZone", "test.vim.host.DateTimeSystem.TimeZone", "test.version.version2", 0), ("ntpConfig", "test.vim.host.NtpConfig", "test.version.version2", F_OPTIONAL)])
CreateDataType("test.vim.host.FibreChannelHba", "HostFibreChannelHba", "test.vim.host.HostBusAdapter", "test.version.version1", [("portWorldWideName", "long", "test.version.version1", 0), ("nodeWorldWideName", "long", "test.version.version1", 0), ("portType", "test.vim.host.FibreChannelHba.PortType", "test.version.version1", 0), ("speed", "long", "test.version.version1", 0)])
CreateEnumType("test.vim.host.FibreChannelHba.PortType", "FibreChannelPortType", "test.version.version1", ["fabric", "loop", "pointToPoint", "unknown"])
CreateDataType("test.vim.host.FibreChannelTargetTransport", "HostFibreChannelTargetTransport", "test.vim.host.TargetTransport", "test.version.version1", [("portWorldWideName", "long", "test.version.version1", 0), ("nodeWorldWideName", "long", "test.version.version1", 0)])
CreateDataType("test.vim.host.InternetScsiHba", "HostInternetScsiHba", "test.vim.host.HostBusAdapter", "test.version.version1", [("isSoftwareBased", "boolean", "test.version.version1", 0), ("discoveryCapabilities", "test.vim.host.InternetScsiHba.DiscoveryCapabilities", "test.version.version1", 0), ("discoveryProperties", "test.vim.host.InternetScsiHba.DiscoveryProperties", "test.version.version1", 0), ("authenticationCapabilities", "test.vim.host.InternetScsiHba.AuthenticationCapabilities", "test.version.version1", 0), ("authenticationProperties", "test.vim.host.InternetScsiHba.AuthenticationProperties", "test.version.version1", 0), ("digestCapabilities", "test.vim.host.InternetScsiHba.DigestCapabilities", "test.version.version5", F_OPTIONAL), ("digestProperties", "test.vim.host.InternetScsiHba.DigestProperties", "test.version.version5", F_OPTIONAL), ("ipCapabilities", "test.vim.host.InternetScsiHba.IPCapabilities", "test.version.version1", 0), ("ipProperties", "test.vim.host.InternetScsiHba.IPProperties", "test.version.version1", 0), ("supportedAdvancedOptions", "test.vim.option.OptionDef[]", "test.version.version5", F_OPTIONAL), ("advancedOptions", "test.vim.host.InternetScsiHba.ParamValue[]", "test.version.version5", F_OPTIONAL), ("iScsiName", "string", "test.version.version1", 0), ("iScsiAlias", "string", "test.version.version1", F_OPTIONAL), ("configuredSendTarget", "test.vim.host.InternetScsiHba.SendTarget[]", "test.version.version1", F_OPTIONAL), ("configuredStaticTarget", "test.vim.host.InternetScsiHba.StaticTarget[]", "test.version.version1", F_OPTIONAL), ("maxSpeedMb", "int", "test.version.version1", F_OPTIONAL), ("currentSpeedMb", "int", "test.version.version1", F_OPTIONAL)])
CreateDataType("test.vim.host.InternetScsiHba.ParamValue", "HostInternetScsiHbaParamValue", "test.vim.option.OptionValue", "test.version.version5", [("isInherited", "boolean", "test.version.version5", F_OPTIONAL)])
CreateDataType("test.vim.host.InternetScsiHba.DiscoveryCapabilities", "HostInternetScsiHbaDiscoveryCapabilities", "vmodl.DynamicData", "test.version.version1", [("iSnsDiscoverySettable", "boolean", "test.version.version1", 0), ("slpDiscoverySettable", "boolean", "test.version.version1", 0), ("staticTargetDiscoverySettable", "boolean", "test.version.version1", 0), ("sendTargetsDiscoverySettable", "boolean", "test.version.version1", 0)])
CreateDataType("test.vim.host.InternetScsiHba.DiscoveryProperties", "HostInternetScsiHbaDiscoveryProperties", "vmodl.DynamicData", "test.version.version1", [("iSnsDiscoveryEnabled", "boolean", "test.version.version1", 0), ("iSnsDiscoveryMethod", "string", "test.version.version1", F_OPTIONAL), ("iSnsHost", "string", "test.version.version1", F_OPTIONAL), ("slpDiscoveryEnabled", "boolean", "test.version.version1", 0), ("slpDiscoveryMethod", "string", "test.version.version1", F_OPTIONAL), ("slpHost", "string", "test.version.version1", F_OPTIONAL), ("staticTargetDiscoveryEnabled", "boolean", "test.version.version1", 0), ("sendTargetsDiscoveryEnabled", "boolean", "test.version.version1", 0)])
CreateEnumType("test.vim.host.InternetScsiHba.DiscoveryProperties.ISnsDiscoveryMethod", "InternetScsiSnsDiscoveryMethod", "test.version.version1", ["isnsStatic", "isnsDhcp", "isnsSlp"])
CreateEnumType("test.vim.host.InternetScsiHba.DiscoveryProperties.SlpDiscoveryMethod", "SlpDiscoveryMethod", "test.version.version1", ["slpDhcp", "slpAutoUnicast", "slpAutoMulticast", "slpManual"])
CreateEnumType("test.vim.host.InternetScsiHba.ChapAuthenticationType", "HostInternetScsiHbaChapAuthenticationType", "test.version.version5", ["chapProhibited", "chapDiscouraged", "chapPreferred", "chapRequired"])
CreateDataType("test.vim.host.InternetScsiHba.AuthenticationCapabilities", "HostInternetScsiHbaAuthenticationCapabilities", "vmodl.DynamicData", "test.version.version1", [("chapAuthSettable", "boolean", "test.version.version1", 0), ("krb5AuthSettable", "boolean", "test.version.version1", 0), ("srpAuthSettable", "boolean", "test.version.version1", 0), ("spkmAuthSettable", "boolean", "test.version.version1", 0), ("mutualChapSettable", "boolean", "test.version.version5", F_OPTIONAL), ("targetChapSettable", "boolean", "test.version.version5", F_OPTIONAL), ("targetMutualChapSettable", "boolean", "test.version.version5", F_OPTIONAL)])
CreateDataType("test.vim.host.InternetScsiHba.AuthenticationProperties", "HostInternetScsiHbaAuthenticationProperties", "vmodl.DynamicData", "test.version.version1", [("chapAuthEnabled", "boolean", "test.version.version1", 0), ("chapName", "string", "test.version.version1", F_OPTIONAL), ("chapSecret", "string", "test.version.version1", F_OPTIONAL | F_SECRET), ("chapAuthenticationType", "string", "test.version.version5", F_OPTIONAL), ("chapInherited", "boolean", "test.version.version5", F_OPTIONAL), ("mutualChapName", "string", "test.version.version5", F_OPTIONAL), ("mutualChapSecret", "string", "test.version.version5", F_OPTIONAL | F_SECRET), ("mutualChapAuthenticationType", "string", "test.version.version5", F_OPTIONAL), ("mutualChapInherited", "boolean", "test.version.version5", F_OPTIONAL)])
CreateEnumType("test.vim.host.InternetScsiHba.DigestType", "HostInternetScsiHbaDigestType", "test.version.version5", ["digestProhibited", "digestDiscouraged", "digestPreferred", "digestRequired"])
CreateDataType("test.vim.host.InternetScsiHba.DigestCapabilities", "HostInternetScsiHbaDigestCapabilities", "vmodl.DynamicData", "test.version.version5", [("headerDigestSettable", "boolean", "test.version.version5", F_OPTIONAL), ("dataDigestSettable", "boolean", "test.version.version5", F_OPTIONAL), ("targetHeaderDigestSettable", "boolean", "test.version.version5", F_OPTIONAL), ("targetDataDigestSettable", "boolean", "test.version.version5", F_OPTIONAL)])
CreateDataType("test.vim.host.InternetScsiHba.DigestProperties", "HostInternetScsiHbaDigestProperties", "vmodl.DynamicData", "test.version.version5", [("headerDigestType", "string", "test.version.version5", F_OPTIONAL), ("headerDigestInherited", "boolean", "test.version.version5", F_OPTIONAL), ("dataDigestType", "string", "test.version.version5", F_OPTIONAL), ("dataDigestInherited", "boolean", "test.version.version5", F_OPTIONAL)])
CreateDataType("test.vim.host.InternetScsiHba.IPCapabilities", "HostInternetScsiHbaIPCapabilities", "vmodl.DynamicData", "test.version.version1", [("addressSettable", "boolean", "test.version.version1", 0), ("ipConfigurationMethodSettable", "boolean", "test.version.version1", 0), ("subnetMaskSettable", "boolean", "test.version.version1", 0), ("defaultGatewaySettable", "boolean", "test.version.version1", 0), ("primaryDnsServerAddressSettable", "boolean", "test.version.version1", 0), ("alternateDnsServerAddressSettable", "boolean", "test.version.version1", 0), ("ipv6Supported", "boolean", "test.version.version5", F_OPTIONAL), ("arpRedirectSettable", "boolean", "test.version.version5", F_OPTIONAL), ("mtuSettable", "boolean", "test.version.version5", F_OPTIONAL), ("hostNameAsTargetAddress", "boolean", "test.version.version5", F_OPTIONAL)])
CreateDataType("test.vim.host.InternetScsiHba.IPProperties", "HostInternetScsiHbaIPProperties", "vmodl.DynamicData", "test.version.version1", [("mac", "string", "test.version.version1", F_OPTIONAL), ("address", "string", "test.version.version1", F_OPTIONAL), ("dhcpConfigurationEnabled", "boolean", "test.version.version1", 0), ("subnetMask", "string", "test.version.version1", F_OPTIONAL), ("defaultGateway", "string", "test.version.version1", F_OPTIONAL), ("primaryDnsServerAddress", "string", "test.version.version1", F_OPTIONAL), ("alternateDnsServerAddress", "string", "test.version.version1", F_OPTIONAL), ("ipv6Address", "string", "test.version.version5", F_OPTIONAL), ("ipv6SubnetMask", "string", "test.version.version5", F_OPTIONAL), ("ipv6DefaultGateway", "string", "test.version.version5", F_OPTIONAL), ("arpRedirectEnabled", "boolean", "test.version.version5", F_OPTIONAL), ("mtu", "int", "test.version.version5", F_OPTIONAL), ("jumboFramesEnabled", "boolean", "test.version.version5", F_OPTIONAL)])
CreateDataType("test.vim.host.InternetScsiHba.SendTarget", "HostInternetScsiHbaSendTarget", "vmodl.DynamicData", "test.version.version1", [("address", "string", "test.version.version1", 0), ("port", "int", "test.version.version1", F_OPTIONAL), ("authenticationProperties", "test.vim.host.InternetScsiHba.AuthenticationProperties", "test.version.version5", F_OPTIONAL), ("digestProperties", "test.vim.host.InternetScsiHba.DigestProperties", "test.version.version5", F_OPTIONAL), ("supportedAdvancedOptions", "test.vim.option.OptionDef[]", "test.version.version5", F_OPTIONAL), ("advancedOptions", "test.vim.host.InternetScsiHba.ParamValue[]", "test.version.version5", F_OPTIONAL), ("parent", "string", "test.version.version5", F_OPTIONAL)])
CreateDataType("test.vim.host.InternetScsiHba.StaticTarget", "HostInternetScsiHbaStaticTarget", "vmodl.DynamicData", "test.version.version1", [("address", "string", "test.version.version1", 0), ("port", "int", "test.version.version1", F_OPTIONAL), ("iScsiName", "string", "test.version.version1", 0), ("authenticationProperties", "test.vim.host.InternetScsiHba.AuthenticationProperties", "test.version.version5", F_OPTIONAL), ("digestProperties", "test.vim.host.InternetScsiHba.DigestProperties", "test.version.version5", F_OPTIONAL), ("supportedAdvancedOptions", "test.vim.option.OptionDef[]", "test.version.version5", F_OPTIONAL), ("advancedOptions", "test.vim.host.InternetScsiHba.ParamValue[]", "test.version.version5", F_OPTIONAL), ("parent", "string", "test.version.version5", F_OPTIONAL)])
CreateDataType("test.vim.host.InternetScsiHba.TargetSet", "HostInternetScsiHbaTargetSet", "vmodl.DynamicData", "test.version.version5", [("staticTargets", "test.vim.host.InternetScsiHba.StaticTarget[]", "test.version.version5", F_OPTIONAL), ("sendTargets", "test.vim.host.InternetScsiHba.SendTarget[]", "test.version.version5", F_OPTIONAL)])
CreateDataType("test.vim.host.InternetScsiTargetTransport", "HostInternetScsiTargetTransport", "test.vim.host.TargetTransport", "test.version.version1", [("iScsiName", "string", "test.version.version1", 0), ("iScsiAlias", "string", "test.version.version1", 0), ("address", "string[]", "test.version.version1", F_OPTIONAL)])
CreateDataType("test.vim.host.ParallelScsiTargetTransport", "HostParallelScsiTargetTransport", "test.vim.host.TargetTransport", "test.version.version1", None)
CreateDataType("test.vim.host.ScsiDisk", "HostScsiDisk", "test.vim.host.ScsiLun", "test.version.version1", [("capacity", "test.vim.host.DiskDimensions.Lba", "test.version.version1", 0), ("devicePath", "string", "test.version.version1", 0)])
CreateDataType("test.vim.host.ScsiDisk.Partition", "HostScsiDiskPartition", "vmodl.DynamicData", "test.version.version1", [("diskName", "string", "test.version.version1", 0), ("partition", "int", "test.version.version1", 0)])
CreateDataType("test.vim.host.VMotionInfo", "HostVMotionInfo", "vmodl.DynamicData", "test.version.version1", [("netConfig", "test.vim.host.VMotionSystem.NetConfig", "test.version.version1", F_OPTIONAL), ("ipConfig", "test.vim.host.IpConfig", "test.version.version1", F_OPTIONAL)])
CreateDataType("test.vim.host.VmfsDatastoreExpandSpec", "VmfsDatastoreExpandSpec", "test.vim.host.VmfsDatastoreSpec", "test.version.version5", [("partition", "test.vim.host.DiskPartitionInfo.Specification", "test.version.version5", 0), ("extent", "test.vim.host.ScsiDisk.Partition", "test.version.version5", 0)])
CreateDataType("test.vim.host.VmfsDatastoreExtendSpec", "VmfsDatastoreExtendSpec", "test.vim.host.VmfsDatastoreSpec", "test.version.version1", [("partition", "test.vim.host.DiskPartitionInfo.Specification", "test.version.version1", 0), ("extent", "test.vim.host.ScsiDisk.Partition[]", "test.version.version1", 0)])
CreateDataType("test.vim.host.VmfsVolume", "HostVmfsVolume", "test.vim.host.FileSystemVolume", "test.version.version1", [("blockSizeMb", "int", "test.version.version1", 0), ("maxBlocks", "int", "test.version.version1", 0), ("majorVersion", "int", "test.version.version1", 0), ("version", "string", "test.version.version1", 0), ("uuid", "string", "test.version.version1", 0), ("extent", "test.vim.host.ScsiDisk.Partition[]", "test.version.version1", 0), ("vmfsUpgradable", "boolean", "test.version.version1", 0), ("forceMountedInfo", "test.vim.host.ForceMountedInfo", "test.version.version5", F_OPTIONAL)])
CreateDataType("test.vim.host.VmfsVolume.Specification", "HostVmfsSpec", "vmodl.DynamicData", "test.version.version1", [("extent", "test.vim.host.ScsiDisk.Partition", "test.version.version1", 0), ("blockSizeMb", "int", "test.version.version1", F_OPTIONAL), ("majorVersion", "int", "test.version.version1", 0), ("volumeName", "string", "test.version.version1", 0)])
CreateDataType("test.vim.option.BoolOption", "BoolOption", "test.vim.option.OptionType", "test.version.version1", [("supported", "boolean", "test.version.version1", 0), ("defaultValue", "boolean", "test.version.version1", 0)])
CreateDataType("test.vim.option.IntOption", "IntOption", "test.vim.option.OptionType", "test.version.version1", [("min", "int", "test.version.version1", 0), ("max", "int", "test.version.version1", 0), ("defaultValue", "int", "test.version.version1", 0)])
CreateDataType("test.vim.vApp.VAppConfigInfo", "VAppConfigInfo", "test.vim.vApp.VmConfigInfo", "test.version.version5", [("entityConfig", "test.vim.vApp.EntityConfigInfo[]", "test.version.version5", F_OPTIONAL), ("annotation", "string", "test.version.version5", 0)])
CreateDataType("test.vim.vm.device.VirtualCdrom", "VirtualCdrom", "test.vim.vm.device.VirtualDevice", "test.version.version1", None)
CreateDataType("test.vim.vm.device.VirtualCdrom.IsoBackingInfo", "VirtualCdromIsoBackingInfo", "test.vim.vm.device.VirtualDevice.FileBackingInfo", "test.version.version1", None)
CreateDataType("test.vim.vm.device.VirtualCdrom.PassthroughBackingInfo", "VirtualCdromPassthroughBackingInfo", "test.vim.vm.device.VirtualDevice.DeviceBackingInfo", "test.version.version1", [("exclusive", "boolean", "test.version.version1", 0)])
CreateDataType("test.vim.vm.device.VirtualCdrom.RemotePassthroughBackingInfo", "VirtualCdromRemotePassthroughBackingInfo", "test.vim.vm.device.VirtualDevice.RemoteDeviceBackingInfo", "test.version.version1", [("exclusive", "boolean", "test.version.version1", 0)])
CreateDataType("test.vim.vm.device.VirtualCdrom.AtapiBackingInfo", "VirtualCdromAtapiBackingInfo", "test.vim.vm.device.VirtualDevice.DeviceBackingInfo", "test.version.version1", None)
CreateDataType("test.vim.vm.device.VirtualCdrom.RemoteAtapiBackingInfo", "VirtualCdromRemoteAtapiBackingInfo", "test.vim.vm.device.VirtualDevice.RemoteDeviceBackingInfo", "test.version.version1", None)
CreateDataType("test.vim.vm.device.VirtualController", "VirtualController", "test.vim.vm.device.VirtualDevice", "test.version.version1", [("busNumber", "int", "test.version.version1", 0), ("device", "int[]", "test.version.version1", F_OPTIONAL)])
CreateDataType("test.vim.vm.device.VirtualE1000", "VirtualE1000", "test.vim.vm.device.VirtualEthernetCard", "test.version.version1", None)
CreateDataType("test.vim.vm.device.VirtualIDEController", "VirtualIDEController", "test.vim.vm.device.VirtualController", "test.version.version1", None)
CreateDataType("test.vim.vm.device.VirtualPCIController", "VirtualPCIController", "test.vim.vm.device.VirtualController", "test.version.version1", None)
CreateDataType("test.vim.vm.device.VirtualPS2Controller", "VirtualPS2Controller", "test.vim.vm.device.VirtualController", "test.version.version1", None)
CreateDataType("test.vim.vm.device.VirtualSCSIController", "VirtualSCSIController", "test.vim.vm.device.VirtualController", "test.version.version1", [("hotAddRemove", "boolean", "test.version.version1", F_OPTIONAL), ("sharedBus", "test.vim.vm.device.VirtualSCSIController.Sharing", "test.version.version1", 0), ("scsiCtlrUnitNumber", "int", "test.version.version1", F_OPTIONAL)])
CreateEnumType("test.vim.vm.device.VirtualSCSIController.Sharing", "VirtualSCSISharing", "test.version.version1", ["noSharing", "virtualSharing", "physicalSharing"])
CreateDataType("test.vim.vm.device.VirtualSIOController", "VirtualSIOController", "test.vim.vm.device.VirtualController", "test.version.version1", None)
CreateDataType("test.vim.host.DiagnosticPartition", "HostDiagnosticPartition", "vmodl.DynamicData", "test.version.version1", [("storageType", "string", "test.version.version1", 0), ("diagnosticType", "string", "test.version.version1", 0), ("slots", "int", "test.version.version1", 0), ("id", "test.vim.host.ScsiDisk.Partition", "test.version.version1", 0)])
CreateEnumType("test.vim.host.DiagnosticPartition.StorageType", "DiagnosticPartitionStorageType", "test.version.version1", ["directAttached", "networkAttached"])
CreateEnumType("test.vim.host.DiagnosticPartition.DiagnosticType", "DiagnosticPartitionType", "test.version.version1", ["singleHost", "multiHost"])
CreateDataType("test.vim.host.DiagnosticPartition.CreateOption", "HostDiagnosticPartitionCreateOption", "vmodl.DynamicData", "test.version.version1", [("storageType", "string", "test.version.version1", 0), ("diagnosticType", "string", "test.version.version1", 0), ("disk", "test.vim.host.ScsiDisk", "test.version.version1", 0)])
CreateDataType("test.vim.host.DiagnosticPartition.CreateSpec", "HostDiagnosticPartitionCreateSpec", "vmodl.DynamicData", "test.version.version1", [("storageType", "string", "test.version.version1", 0), ("diagnosticType", "string", "test.version.version1", 0), ("id", "test.vim.host.ScsiDisk.Partition", "test.version.version1", 0), ("partition", "test.vim.host.DiskPartitionInfo.Specification", "test.version.version1", 0), ("active", "boolean", "test.version.version1", F_OPTIONAL)])
CreateDataType("test.vim.host.DiagnosticPartition.CreateDescription", "HostDiagnosticPartitionCreateDescription", "vmodl.DynamicData", "test.version.version1", [("layout", "test.vim.host.DiskPartitionInfo.Layout", "test.version.version1", 0), ("diskUuid", "string", "test.version.version1", 0), ("spec", "test.vim.host.DiagnosticPartition.CreateSpec", "test.version.version1", 0)])
CreateDataType("test.vim.host.VmfsDatastoreCreateSpec", "VmfsDatastoreCreateSpec", "test.vim.host.VmfsDatastoreSpec", "test.version.version1", [("partition", "test.vim.host.DiskPartitionInfo.Specification", "test.version.version1", 0), ("vmfs", "test.vim.host.VmfsVolume.Specification", "test.version.version1", 0), ("extent", "test.vim.host.ScsiDisk.Partition[]", "test.version.version1", F_OPTIONAL)])
CreateDataType("test.vim.vm.device.VirtualLsiLogicController", "VirtualLsiLogicController", "test.vim.vm.device.VirtualSCSIController", "test.version.version1", None)
