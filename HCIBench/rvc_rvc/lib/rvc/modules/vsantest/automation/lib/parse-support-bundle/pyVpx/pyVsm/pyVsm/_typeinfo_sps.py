# ******* WARNING - AUTO GENERATED CODE - DO NOT EDIT *******
from .VmomiSupport import CreateDataType, CreateManagedType
from .VmomiSupport import CreateEnumType
from .VmomiSupport import AddVersion, AddVersionParent
from .VmomiSupport import AddBreakingChangesInfo
from .VmomiSupport import F_LINK, F_LINKABLE
from .VmomiSupport import F_OPTIONAL, F_SECRET
from .VmomiSupport import newestVersions, ltsVersions
from .VmomiSupport import dottedVersions, oldestVersions

AddVersion("vmodl.query.version.version4", "", "", 0, "vim25")
AddVersion("vmodl.query.version.version3", "", "", 0, "vim25")
AddVersion("vmodl.query.version.version2", "", "", 0, "vim25")
AddVersion("vmodl.query.version.version1", "", "", 0, "vim25")
AddVersion("vim.version.version6", "vim25", "4.1", 0, "vim25")
AddVersion("vim.version.version7", "vim25", "5.0", 0, "vim25")
AddVersion("vim.version.version1", "vim2", "2.0", 0, "vim25")
AddVersion("vim.version.version4", "vim25", "2.5u2server", 0, "vim25")
AddVersion("vim.version.version5", "vim25", "4.0", 0, "vim25")
AddVersion("vim.version.version2", "vim25", "2.5", 0, "vim25")
AddVersion("vim.version.version3", "vim25", "2.5u2", 0, "vim25")
AddVersion("vmodl.version.version0", "", "", 0, "vim25")
AddVersion("vmodl.version.version1", "", "", 0, "vim25")
AddVersion("vmodl.version.version2", "", "", 0, "vim25")
AddVersion("vmodl.reflect.version.version1", "reflect", "1.0", 0, "reflect")
AddVersion("sps.version.version1", "sps", "1.0", 0, "sps")
AddVersionParent("vmodl.query.version.version4", "vmodl.query.version.version4")
AddVersionParent("vmodl.query.version.version4", "vmodl.query.version.version3")
AddVersionParent("vmodl.query.version.version4", "vmodl.query.version.version2")
AddVersionParent("vmodl.query.version.version4", "vmodl.query.version.version1")
AddVersionParent("vmodl.query.version.version4", "vmodl.version.version0")
AddVersionParent("vmodl.query.version.version4", "vmodl.version.version1")
AddVersionParent("vmodl.query.version.version4", "vmodl.version.version2")
AddVersionParent("vmodl.query.version.version3", "vmodl.query.version.version3")
AddVersionParent("vmodl.query.version.version3", "vmodl.query.version.version2")
AddVersionParent("vmodl.query.version.version3", "vmodl.query.version.version1")
AddVersionParent("vmodl.query.version.version3", "vmodl.version.version0")
AddVersionParent("vmodl.query.version.version3", "vmodl.version.version1")
AddVersionParent("vmodl.query.version.version2", "vmodl.query.version.version2")
AddVersionParent("vmodl.query.version.version2", "vmodl.query.version.version1")
AddVersionParent("vmodl.query.version.version2", "vmodl.version.version0")
AddVersionParent("vmodl.query.version.version2", "vmodl.version.version1")
AddVersionParent("vmodl.query.version.version1", "vmodl.query.version.version1")
AddVersionParent("vmodl.query.version.version1", "vmodl.version.version0")
AddVersionParent("vim.version.version6", "vmodl.query.version.version3")
AddVersionParent("vim.version.version6", "vmodl.query.version.version2")
AddVersionParent("vim.version.version6", "vmodl.query.version.version1")
AddVersionParent("vim.version.version6", "vim.version.version6")
AddVersionParent("vim.version.version6", "vim.version.version1")
AddVersionParent("vim.version.version6", "vim.version.version4")
AddVersionParent("vim.version.version6", "vim.version.version5")
AddVersionParent("vim.version.version6", "vim.version.version2")
AddVersionParent("vim.version.version6", "vim.version.version3")
AddVersionParent("vim.version.version6", "vmodl.version.version0")
AddVersionParent("vim.version.version6", "vmodl.version.version1")
AddVersionParent("vim.version.version7", "vmodl.query.version.version4")
AddVersionParent("vim.version.version7", "vmodl.query.version.version3")
AddVersionParent("vim.version.version7", "vmodl.query.version.version2")
AddVersionParent("vim.version.version7", "vmodl.query.version.version1")
AddVersionParent("vim.version.version7", "vim.version.version6")
AddVersionParent("vim.version.version7", "vim.version.version7")
AddVersionParent("vim.version.version7", "vim.version.version1")
AddVersionParent("vim.version.version7", "vim.version.version4")
AddVersionParent("vim.version.version7", "vim.version.version5")
AddVersionParent("vim.version.version7", "vim.version.version2")
AddVersionParent("vim.version.version7", "vim.version.version3")
AddVersionParent("vim.version.version7", "vmodl.version.version0")
AddVersionParent("vim.version.version7", "vmodl.version.version1")
AddVersionParent("vim.version.version7", "vmodl.version.version2")
AddVersionParent("vim.version.version7", "vmodl.reflect.version.version1")
AddVersionParent("vim.version.version1", "vmodl.query.version.version1")
AddVersionParent("vim.version.version1", "vim.version.version1")
AddVersionParent("vim.version.version1", "vmodl.version.version0")
AddVersionParent("vim.version.version4", "vmodl.query.version.version1")
AddVersionParent("vim.version.version4", "vim.version.version1")
AddVersionParent("vim.version.version4", "vim.version.version4")
AddVersionParent("vim.version.version4", "vim.version.version2")
AddVersionParent("vim.version.version4", "vim.version.version3")
AddVersionParent("vim.version.version4", "vmodl.version.version0")
AddVersionParent("vim.version.version5", "vmodl.query.version.version2")
AddVersionParent("vim.version.version5", "vmodl.query.version.version1")
AddVersionParent("vim.version.version5", "vim.version.version1")
AddVersionParent("vim.version.version5", "vim.version.version4")
AddVersionParent("vim.version.version5", "vim.version.version5")
AddVersionParent("vim.version.version5", "vim.version.version2")
AddVersionParent("vim.version.version5", "vim.version.version3")
AddVersionParent("vim.version.version5", "vmodl.version.version0")
AddVersionParent("vim.version.version5", "vmodl.version.version1")
AddVersionParent("vim.version.version2", "vmodl.query.version.version1")
AddVersionParent("vim.version.version2", "vim.version.version1")
AddVersionParent("vim.version.version2", "vim.version.version2")
AddVersionParent("vim.version.version2", "vmodl.version.version0")
AddVersionParent("vim.version.version3", "vmodl.query.version.version1")
AddVersionParent("vim.version.version3", "vim.version.version1")
AddVersionParent("vim.version.version3", "vim.version.version2")
AddVersionParent("vim.version.version3", "vim.version.version3")
AddVersionParent("vim.version.version3", "vmodl.version.version0")
AddVersionParent("vmodl.version.version0", "vmodl.version.version0")
AddVersionParent("vmodl.version.version1", "vmodl.version.version0")
AddVersionParent("vmodl.version.version1", "vmodl.version.version1")
AddVersionParent("vmodl.version.version2", "vmodl.version.version0")
AddVersionParent("vmodl.version.version2", "vmodl.version.version1")
AddVersionParent("vmodl.version.version2", "vmodl.version.version2")
AddVersionParent("vmodl.reflect.version.version1", "vmodl.version.version0")
AddVersionParent("vmodl.reflect.version.version1", "vmodl.version.version1")
AddVersionParent("vmodl.reflect.version.version1", "vmodl.version.version2")
AddVersionParent("vmodl.reflect.version.version1", "vmodl.reflect.version.version1")
AddVersionParent("sps.version.version1", "vmodl.query.version.version4")
AddVersionParent("sps.version.version1", "vmodl.query.version.version3")
AddVersionParent("sps.version.version1", "vmodl.query.version.version2")
AddVersionParent("sps.version.version1", "vmodl.query.version.version1")
AddVersionParent("sps.version.version1", "vim.version.version6")
AddVersionParent("sps.version.version1", "vim.version.version7")
AddVersionParent("sps.version.version1", "vim.version.version1")
AddVersionParent("sps.version.version1", "vim.version.version4")
AddVersionParent("sps.version.version1", "vim.version.version5")
AddVersionParent("sps.version.version1", "vim.version.version2")
AddVersionParent("sps.version.version1", "vim.version.version3")
AddVersionParent("sps.version.version1", "vmodl.version.version0")
AddVersionParent("sps.version.version1", "vmodl.version.version1")
AddVersionParent("sps.version.version1", "vmodl.version.version2")
AddVersionParent("sps.version.version1", "vmodl.reflect.version.version1")
AddVersionParent("sps.version.version1", "sps.version.version1")

newestVersions.Add("sps.version.version1")
ltsVersions.Add("sps.version.version1")
dottedVersions.Add("sps.version.version1")
oldestVersions.Add("sps.version.version1")

CreateManagedType("sps.StorageProfileServer", "StorageProfileServer", "vmodl.ManagedObject", "sps.version.version1", [("serverGuid", "string", "sps.version.version1", 0, "StorageProfile.View")], [("queryServerGuid", "QueryServerGuid", "sps.version.version1", (), (0, "string", "string"), "StorageProfile.View", None)])
CreateDataType("sps.VirtualDiskMarker", "VirtualDiskMarker", "vmodl.DynamicData", "sps.version.version1", [("controllerType", "vmodl.TypeName", "sps.version.version1", F_OPTIONAL), ("busNumber", "int", "sps.version.version1", F_OPTIONAL), ("unitNumber", "int", "sps.version.version1", F_OPTIONAL), ("profile", "sps.profile.StorageProfile", "sps.version.version1", F_OPTIONAL), ("diskKey", "int", "sps.version.version1", F_OPTIONAL)])
CreateManagedType("sps.VirtualDiskTaskTracker", "VirtualDiskTaskTracker", "vmodl.ManagedObject", "sps.version.version1", None, [("trackTask", "TrackTask", "sps.version.version1", (("task", "vim.Task", "sps.version.version1", 0, None),("vm", "vim.VirtualMachine", "sps.version.version1", F_OPTIONAL, None),("vmHomeProfile", "sps.profile.StorageProfile", "sps.version.version1", F_OPTIONAL, None),("disk", "sps.VirtualDiskMarker[]", "sps.version.version1", F_OPTIONAL, None),("checkAllCompliance", "boolean", "sps.version.version1", F_OPTIONAL, None),), (0, "void", "void"), "StorageProfile.View", None)])
CreateManagedType("sps.datastore.StorageCapability", "DatastoreStorageCapability", "vmodl.ManagedObject", "sps.version.version1", [("datastore", "vim.Datastore[]", "sps.version.version1", F_OPTIONAL, "StorageProfile.View")], [("queryDatastore", "QueryDatastore", "sps.version.version1", (), (F_OPTIONAL, "vim.Datastore[]", "vim.Datastore[]"), "StorageProfile.View", None), ("associateDatastore", "AssociateDatastore", "sps.version.version1", (("datastore", "vim.Datastore[]", "sps.version.version1", 0, None),), (0, "void", "void"), "StorageProfile.Update", None), ("dissociateDatastore", "DissociateDatastore", "sps.version.version1", (("datastore", "vim.Datastore[]", "sps.version.version1", 0, None),), (0, "void", "void"), "StorageProfile.Update", None), ("destroy", "DestroyCapability", "sps.version.version1", (), (0, "void", "void"), "StorageProfile.Update", None)])
CreateManagedType("sps.datastore.StorageLabelCapability", "DatastoreStorageLabelCapability", "sps.datastore.StorageCapability", "sps.version.version1", [("label", "string", "sps.version.version1", 0, "StorageProfile.View"), ("description", "string", "sps.version.version1", F_OPTIONAL, "StorageProfile.View")], [("queryLabel", "QueryStorageLabelCapabilityLabel", "sps.version.version1", (), (0, "string", "string"), "StorageProfile.View", None), ("queryDescription", "QueryStorageLabelCapabilityDescription", "sps.version.version1", (), (F_OPTIONAL, "string", "string"), "StorageProfile.View", None), ("queryInformation", "QueryStorageLabelCapabilityInformation", "sps.version.version1", (), (0, "sps.datastore.StorageLabelCapability.Information", "sps.datastore.StorageLabelCapability.Information"), "StorageProfile.View", None)])
CreateDataType("sps.datastore.StorageLabelCapability.Information", "DatastoreStorageLabelCapabilityInformation", "vmodl.DynamicData", "sps.version.version1", [("capability", "sps.datastore.StorageLabelCapability", "sps.version.version1", 0), ("label", "string", "sps.version.version1", 0), ("description", "string", "sps.version.version1", F_OPTIONAL), ("datastore", "vim.Datastore[]", "sps.version.version1", F_OPTIONAL)])
CreateManagedType("sps.datastore.SystemLabelCapability", "DatastoreSystemLabelCapability", "sps.datastore.StorageLabelCapability", "sps.version.version1", None, None)
CreateManagedType("sps.profile.ComplianceManager", "StorageComplianceManager", "vim.profile.ComplianceManager", "sps.version.version1", None, [("checkComplianceForVmDisk", "CheckComplianceForVmDisk", "sps.version.version1", (("profile", "vim.profile.Profile[]", "sps.version.version1", F_OPTIONAL, None),("vmDisk", "sps.profile.VirtualMachineDisk[]", "sps.version.version1", F_OPTIONAL, None),), (F_OPTIONAL, "sps.profile.ComplianceResultForVmDisk[]", "sps.profile.ComplianceResultForVmDisk[]"), "StorageProfile.View", None), ("queryStorageComplianceStatus", "QueryStorageComplianceStatus", "sps.version.version1", (("profile", "sps.profile.StorageProfile[]", "sps.version.version1", F_OPTIONAL, None),("entity", "vim.VirtualMachine[]", "sps.version.version1", F_OPTIONAL, None),), (F_OPTIONAL, "vim.profile.ComplianceResult[]", "vim.profile.ComplianceResult[]"), "StorageProfile.View", None), ("clearStorageComplianceStatus", "ClearStorageComplianceStatus", "sps.version.version1", (("profile", "sps.profile.StorageProfile[]", "sps.version.version1", F_OPTIONAL, None),("entity", "vim.VirtualMachine[]", "sps.version.version1", F_OPTIONAL, None),), (0, "void", "void"), "StorageProfile.Update", None), ("queryComplianceStatusForVmDisk", "QueryComplianceStatusForVmDisk", "sps.version.version1", (("profile", "vim.profile.Profile[]", "sps.version.version1", F_OPTIONAL, None),("vmDisk", "sps.profile.VirtualMachineDisk[]", "sps.version.version1", F_OPTIONAL, None),), (F_OPTIONAL, "sps.profile.ComplianceResultForVmDisk[]", "sps.profile.ComplianceResultForVmDisk[]"), "StorageProfile.View", None), ("clearComplianceStatusForVmDisk", "ClearComplianceStatusForVmDisk", "sps.version.version1", (("profile", "vim.profile.Profile[]", "sps.version.version1", F_OPTIONAL, None),("vmDisk", "sps.profile.VirtualMachineDisk[]", "sps.version.version1", F_OPTIONAL, None),), (0, "void", "void"), "StorageProfile.Update", None), ("checkStorageProfileCompliance", "CheckComplianceForVmHomeProfile", "sps.version.version1", (("profile", "vim.profile.Profile[]", "sps.version.version1", F_OPTIONAL, None),("entity", "vim.ManagedEntity[]", "sps.version.version1", F_OPTIONAL, None),), (F_OPTIONAL, "vim.profile.ComplianceResult[]", "vim.profile.ComplianceResult[]"), "StorageProfile.View", None), ("checkRollupCompliance", "CheckStorageRollupCompliance", "sps.version.version1", (("entity", "vim.VirtualMachine[]", "sps.version.version1", 0, None),), (F_OPTIONAL, "sps.profile.RollupComplianceResult[]", "sps.profile.RollupComplianceResult[]"), "StorageProfile.View", None), ("queryRollupComplianceStatus", "QueryStorageRollupComplianceStatus", "sps.version.version1", (("entity", "vim.VirtualMachine[]", "sps.version.version1", 0, None),), (F_OPTIONAL, "sps.profile.RollupComplianceResult[]", "sps.profile.RollupComplianceResult[]"), "StorageProfile.View", None), ("queryMatchingDatastore", "QueryMatchingDatastoreForVms", "sps.version.version1", (("entity", "vim.VirtualMachine[]", "sps.version.version1", 0, None),("datastore", "vim.Datastore[]", "sps.version.version1", F_OPTIONAL, None),), (F_OPTIONAL, "vim.Datastore[]", "vim.Datastore[]"), "StorageProfile.View", None), ("queryMatchingStoragePod", "QueryMatchingStoragePodForVms", "sps.version.version1", (("entity", "vim.VirtualMachine[]", "sps.version.version1", 0, None),("storagePod", "vim.StoragePod[]", "sps.version.version1", F_OPTIONAL, None),), (F_OPTIONAL, "vim.StoragePod[]", "vim.StoragePod[]"), "StorageProfile.View", None)])
CreateDataType("sps.profile.ComplianceResultForVmDisk", "ProfileComplianceResultForVmDisk", "vim.profile.ComplianceResult", "sps.version.version1", [("vmDisk", "sps.profile.VirtualMachineDisk", "sps.version.version1", F_OPTIONAL)])
CreateDataType("sps.profile.RollupComplianceResult", "ProfileRollupComplianceResult", "vmodl.DynamicData", "sps.version.version1", [("entity", "vim.ManagedEntity", "sps.version.version1", 0), ("result", "vim.profile.ComplianceResult[]", "sps.version.version1", 0), ("rollupComplianceStatus", "string", "sps.version.version1", 0), ("oldestCheckTime", "vmodl.DateTime", "sps.version.version1", F_OPTIONAL)])
CreateManagedType("sps.profile.StorageProfile", "SpsStorageProfile", "vim.profile.Profile", "sps.version.version1", [("associatedDisk", "sps.profile.VirtualMachineDisk[]", "sps.version.version1", F_OPTIONAL, "StorageProfile.View")], [("associateVirtualDisk", "AssociateVirtualDisk", "sps.version.version1", (("disks", "sps.profile.VirtualMachineDisk[]", "sps.version.version1", 0, None),), (0, "void", "void"), "StorageProfile.Update", None), ("dissociateVirtualDisk", "DissociateVirtualDisk", "sps.version.version1", (("disks", "sps.profile.VirtualMachineDisk[]", "sps.version.version1", F_OPTIONAL, None),), (0, "void", "void"), "StorageProfile.Update", None), ("queryAssociatedDisk", "QueryAssociatedDisk", "sps.version.version1", (), (F_OPTIONAL, "sps.profile.VirtualMachineDisk[]", "sps.profile.VirtualMachineDisk[]"), "StorageProfile.View", None), ("queryConfigInfo", "QueryConfigInfo", "sps.version.version1", (), (F_OPTIONAL, "sps.profile.StorageProfile.ConfigInfo", "sps.profile.StorageProfile.ConfigInfo"), "StorageProfile.View", None), ("queryMatchingDatastore", "QueryMatchingDatastore", "sps.version.version1", (("datastores", "vim.Datastore[]", "sps.version.version1", F_OPTIONAL, None),), (F_OPTIONAL, "vim.Datastore[]", "vim.Datastore[]"), "StorageProfile.View", None), ("queryMatchingStoragePod", "QueryMatchingStoragePod", "sps.version.version1", (("storagePods", "vim.StoragePod[]", "sps.version.version1", F_OPTIONAL, None),), (F_OPTIONAL, "vim.StoragePod[]", "vim.StoragePod[]"), "StorageProfile.View", None), ("update", "UpdateStorageProfile", "sps.version.version1", (("spec", "sps.profile.StorageProfile.ConfigSpec", "sps.version.version1", 0, None),), (0, "void", "void"), "StorageProfile.Update", None), ("queryModifiedTime", "QueryModifiedTime", "sps.version.version1", (), (0, "vmodl.DateTime", "vmodl.DateTime"), "StorageProfile.View", None), ("queryCreatedTime", "QueryCreatedTime", "sps.version.version1", (), (0, "vmodl.DateTime", "vmodl.DateTime"), "StorageProfile.View", None), ("queryName", "QueryStorageProfileName", "sps.version.version1", (), (0, "string", "string"), "StorageProfile.View", None), ("queryEntity", "QueryStorageProfileEntity", "sps.version.version1", (), (F_OPTIONAL, "vim.ManagedEntity[]", "vim.ManagedEntity[]"), "StorageProfile.View", None), ("queryStorageProfileConfig", "QueryStorageProfileConfig", "sps.version.version1", (), (F_OPTIONAL, "sps.profile.StorageProfile.ConfigInfo", "sps.profile.StorageProfile.ConfigInfo"), "StorageProfile.View", None), ("queryComplianceStatus", "QueryStorageProfileComplianceStatus", "sps.version.version1", (), (F_OPTIONAL, "string", "string"), "StorageProfile.View", None), ("destroyStorageProfile", "DestroyStorageProfile", "sps.version.version1", (), (0, "void", "void"), "StorageProfile.Update", None), ("associateStorageEntities", "AssociateStorageEntities", "sps.version.version1", (("entity", "vim.ManagedEntity[]", "sps.version.version1", F_OPTIONAL, None),), (0, "void", "void"), "StorageProfile.Update", None), ("dissociateStorageEntities", "DissociateStorageEntities", "sps.version.version1", (("entity", "vim.ManagedEntity[]", "sps.version.version1", F_OPTIONAL, None),), (0, "void", "void"), "StorageProfile.Update", None), ("checkStorageProfileCompliance", "CheckStorageProfileCompliance", "sps.version.version1", (("entity", "vim.ManagedEntity[]", "sps.version.version1", F_OPTIONAL, None),), (F_OPTIONAL, "vim.profile.ComplianceResult[]", "vim.profile.ComplianceResult[]"), "StorageProfile.View", None)])
CreateDataType("sps.profile.StorageProfile.ConfigInfo", "SpsStorageProfileConfigInfo", "vim.profile.Profile.ConfigInfo", "sps.version.version1", [("storageProfile", "sps.profile.StorageProfile", "sps.version.version1", 0), ("profile", "vim.profile.ApplyProfile", "sps.version.version1", F_OPTIONAL)])
CreateDataType("sps.profile.StorageProfile.ConfigSpec", "SpsStorageProfileConfigSpec", "vim.profile.Profile.CreateSpec", "sps.version.version1", None)
CreateDataType("sps.profile.StorageProfile.LabelConfigSpec", "SpsStorageProfileLabelConfigSpec", "sps.profile.StorageProfile.ConfigSpec", "sps.version.version1", [("systemLabel", "string[]", "sps.version.version1", F_OPTIONAL), ("customLabel", "string[]", "sps.version.version1", F_OPTIONAL)])
CreateDataType("sps.profile.VirtualMachineDisk", "ProfileVirtualMachineDisk", "vmodl.DynamicData", "sps.version.version1", [("vm", "vim.VirtualMachine", "sps.version.version1", 0), ("diskKey", "int", "sps.version.version1", 0)])
CreateManagedType("sps.datastore.CustomLabelCapability", "DatastoreCustomLabelCapability", "sps.datastore.StorageLabelCapability", "sps.version.version1", None, [("updateDescription", "UpdateCustomCapability", "sps.version.version1", (("description", "string", "sps.version.version1", 0, None),), (0, "void", "void"), "StorageProfile.Update", None)])
CreateManagedType("sps.datastore.StorageCapabilityService", "DatastoreStorageCapabilityService", "vmodl.ManagedObject", "sps.version.version1", [("capability", "sps.datastore.StorageCapability[]", "sps.version.version1", F_OPTIONAL, "StorageProfile.View")], [("queryLabelCapabilityInfo", "QueryLabelCapabilityInfo", "sps.version.version1", (("capability", "sps.datastore.StorageLabelCapability[]", "sps.version.version1", F_OPTIONAL, None),), (F_OPTIONAL, "sps.datastore.StorageLabelCapability.Information[]", "sps.datastore.StorageLabelCapability.Information[]"), "StorageProfile.View", None), ("queryCapability", "QueryCapability", "sps.version.version1", (), (F_OPTIONAL, "sps.datastore.StorageCapability[]", "sps.datastore.StorageCapability[]"), "StorageProfile.View", None)])
CreateManagedType("sps.profile.ProfileManager", "StorageProfileManager", "vim.profile.ProfileManager", "sps.version.version1", None, [("createStorageProfile", "CreateStorageProfile", "sps.version.version1", (("createSpec", "vim.profile.Profile.CreateSpec", "sps.version.version1", 0, None),), (0, "sps.profile.StorageProfile", "sps.profile.StorageProfile"), "StorageProfile.Update", ["vim.fault.DuplicateName", ]), ("findAssociatedProfileForDisk", "FindAssociatedProfileForDisk", "sps.version.version1", (("disk", "sps.profile.VirtualMachineDisk", "sps.version.version1", 0, None),), (F_OPTIONAL, "sps.profile.StorageProfile[]", "sps.profile.StorageProfile[]"), "StorageProfile.View", None), ("queryProfile", "QueryProfile", "sps.version.version1", (), (F_OPTIONAL, "sps.profile.StorageProfile[]", "sps.profile.StorageProfile[]"), "StorageProfile.View", None), ("queryProfileConfigInfo", "QueryProfileConfigInfo", "sps.version.version1", (("profile", "sps.profile.StorageProfile[]", "sps.version.version1", F_OPTIONAL, None),), (F_OPTIONAL, "sps.profile.StorageProfile.ConfigInfo[]", "sps.profile.StorageProfile.ConfigInfo[]"), "StorageProfile.View", None), ("findAssociatedStorageProfile", "FindAssociatedStorageProfile", "sps.version.version1", (("entity", "vim.VirtualMachine", "sps.version.version1", 0, None),), (F_OPTIONAL, "sps.profile.StorageProfile[]", "sps.profile.StorageProfile[]"), "StorageProfile.View", None)])
