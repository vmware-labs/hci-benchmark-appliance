# ******* WARNING - AUTO GENERATED CODE - DO NOT EDIT *******
from .VmomiSupport import CreateDataType, CreateManagedType
from .VmomiSupport import CreateEnumType
from .VmomiSupport import AddVersion, AddVersionParent
from .VmomiSupport import AddBreakingChangesInfo
from .VmomiSupport import F_LINK, F_LINKABLE
from .VmomiSupport import F_OPTIONAL, F_SECRET
from .VmomiSupport import newestVersions, ltsVersions
from .VmomiSupport import dottedVersions, oldestVersions

AddVersion("vmodl.query.version.version4", "", "", 0, "vim25")
AddVersion("vmodl.query.version.version3", "", "", 0, "vim25")
AddVersion("vmodl.query.version.version2", "", "", 0, "vim25")
AddVersion("vmodl.query.version.version1", "", "", 0, "vim25")
AddVersion("vim.version.version6", "vim25", "4.1", 0, "vim25")
AddVersion("vim.version.version7", "vim25", "5.0", 0, "vim25")
AddVersion("vim.version.version1", "vim2", "2.0", 0, "vim25")
AddVersion("vim.version.version4", "vim25", "2.5u2server", 0, "vim25")
AddVersion("vim.version.version5", "vim25", "4.0", 0, "vim25")
AddVersion("vim.version.version2", "vim25", "2.5", 0, "vim25")
AddVersion("vim.version.version3", "vim25", "2.5u2", 0, "vim25")
AddVersion("vmodl.version.version0", "", "", 0, "vim25")
AddVersion("vmodl.version.version1", "", "", 0, "vim25")
AddVersion("vmodl.version.version2", "", "", 0, "vim25")
AddVersion("dodo.version.version1", "dodo", "1.0", 0, "")
AddVersion("vmodl.reflect.version.version1", "reflect", "1.0", 0, "reflect")
AddVersionParent("vmodl.query.version.version4", "vmodl.query.version.version4")
AddVersionParent("vmodl.query.version.version4", "vmodl.query.version.version3")
AddVersionParent("vmodl.query.version.version4", "vmodl.query.version.version2")
AddVersionParent("vmodl.query.version.version4", "vmodl.query.version.version1")
AddVersionParent("vmodl.query.version.version4", "vmodl.version.version0")
AddVersionParent("vmodl.query.version.version4", "vmodl.version.version1")
AddVersionParent("vmodl.query.version.version4", "vmodl.version.version2")
AddVersionParent("vmodl.query.version.version3", "vmodl.query.version.version3")
AddVersionParent("vmodl.query.version.version3", "vmodl.query.version.version2")
AddVersionParent("vmodl.query.version.version3", "vmodl.query.version.version1")
AddVersionParent("vmodl.query.version.version3", "vmodl.version.version0")
AddVersionParent("vmodl.query.version.version3", "vmodl.version.version1")
AddVersionParent("vmodl.query.version.version2", "vmodl.query.version.version2")
AddVersionParent("vmodl.query.version.version2", "vmodl.query.version.version1")
AddVersionParent("vmodl.query.version.version2", "vmodl.version.version0")
AddVersionParent("vmodl.query.version.version2", "vmodl.version.version1")
AddVersionParent("vmodl.query.version.version1", "vmodl.query.version.version1")
AddVersionParent("vmodl.query.version.version1", "vmodl.version.version0")
AddVersionParent("vim.version.version6", "vmodl.query.version.version3")
AddVersionParent("vim.version.version6", "vmodl.query.version.version2")
AddVersionParent("vim.version.version6", "vmodl.query.version.version1")
AddVersionParent("vim.version.version6", "vim.version.version6")
AddVersionParent("vim.version.version6", "vim.version.version1")
AddVersionParent("vim.version.version6", "vim.version.version4")
AddVersionParent("vim.version.version6", "vim.version.version5")
AddVersionParent("vim.version.version6", "vim.version.version2")
AddVersionParent("vim.version.version6", "vim.version.version3")
AddVersionParent("vim.version.version6", "vmodl.version.version0")
AddVersionParent("vim.version.version6", "vmodl.version.version1")
AddVersionParent("vim.version.version7", "vmodl.query.version.version4")
AddVersionParent("vim.version.version7", "vmodl.query.version.version3")
AddVersionParent("vim.version.version7", "vmodl.query.version.version2")
AddVersionParent("vim.version.version7", "vmodl.query.version.version1")
AddVersionParent("vim.version.version7", "vim.version.version6")
AddVersionParent("vim.version.version7", "vim.version.version7")
AddVersionParent("vim.version.version7", "vim.version.version1")
AddVersionParent("vim.version.version7", "vim.version.version4")
AddVersionParent("vim.version.version7", "vim.version.version5")
AddVersionParent("vim.version.version7", "vim.version.version2")
AddVersionParent("vim.version.version7", "vim.version.version3")
AddVersionParent("vim.version.version7", "vmodl.version.version0")
AddVersionParent("vim.version.version7", "vmodl.version.version1")
AddVersionParent("vim.version.version7", "vmodl.version.version2")
AddVersionParent("vim.version.version7", "vmodl.reflect.version.version1")
AddVersionParent("vim.version.version1", "vmodl.query.version.version1")
AddVersionParent("vim.version.version1", "vim.version.version1")
AddVersionParent("vim.version.version1", "vmodl.version.version0")
AddVersionParent("vim.version.version4", "vmodl.query.version.version1")
AddVersionParent("vim.version.version4", "vim.version.version1")
AddVersionParent("vim.version.version4", "vim.version.version4")
AddVersionParent("vim.version.version4", "vim.version.version2")
AddVersionParent("vim.version.version4", "vim.version.version3")
AddVersionParent("vim.version.version4", "vmodl.version.version0")
AddVersionParent("vim.version.version5", "vmodl.query.version.version2")
AddVersionParent("vim.version.version5", "vmodl.query.version.version1")
AddVersionParent("vim.version.version5", "vim.version.version1")
AddVersionParent("vim.version.version5", "vim.version.version4")
AddVersionParent("vim.version.version5", "vim.version.version5")
AddVersionParent("vim.version.version5", "vim.version.version2")
AddVersionParent("vim.version.version5", "vim.version.version3")
AddVersionParent("vim.version.version5", "vmodl.version.version0")
AddVersionParent("vim.version.version5", "vmodl.version.version1")
AddVersionParent("vim.version.version2", "vmodl.query.version.version1")
AddVersionParent("vim.version.version2", "vim.version.version1")
AddVersionParent("vim.version.version2", "vim.version.version2")
AddVersionParent("vim.version.version2", "vmodl.version.version0")
AddVersionParent("vim.version.version3", "vmodl.query.version.version1")
AddVersionParent("vim.version.version3", "vim.version.version1")
AddVersionParent("vim.version.version3", "vim.version.version2")
AddVersionParent("vim.version.version3", "vim.version.version3")
AddVersionParent("vim.version.version3", "vmodl.version.version0")
AddVersionParent("vmodl.version.version0", "vmodl.version.version0")
AddVersionParent("vmodl.version.version1", "vmodl.version.version0")
AddVersionParent("vmodl.version.version1", "vmodl.version.version1")
AddVersionParent("vmodl.version.version2", "vmodl.version.version0")
AddVersionParent("vmodl.version.version2", "vmodl.version.version1")
AddVersionParent("vmodl.version.version2", "vmodl.version.version2")
AddVersionParent("dodo.version.version1", "vmodl.query.version.version4")
AddVersionParent("dodo.version.version1", "vmodl.query.version.version3")
AddVersionParent("dodo.version.version1", "vmodl.query.version.version2")
AddVersionParent("dodo.version.version1", "vmodl.query.version.version1")
AddVersionParent("dodo.version.version1", "vim.version.version6")
AddVersionParent("dodo.version.version1", "vim.version.version7")
AddVersionParent("dodo.version.version1", "vim.version.version1")
AddVersionParent("dodo.version.version1", "vim.version.version4")
AddVersionParent("dodo.version.version1", "vim.version.version5")
AddVersionParent("dodo.version.version1", "vim.version.version2")
AddVersionParent("dodo.version.version1", "vim.version.version3")
AddVersionParent("dodo.version.version1", "vmodl.version.version0")
AddVersionParent("dodo.version.version1", "vmodl.version.version1")
AddVersionParent("dodo.version.version1", "vmodl.version.version2")
AddVersionParent("dodo.version.version1", "dodo.version.version1")
AddVersionParent("dodo.version.version1", "vmodl.reflect.version.version1")
AddVersionParent("vmodl.reflect.version.version1", "vmodl.version.version0")
AddVersionParent("vmodl.reflect.version.version1", "vmodl.version.version1")
AddVersionParent("vmodl.reflect.version.version1", "vmodl.version.version2")
AddVersionParent("vmodl.reflect.version.version1", "vmodl.reflect.version.version1")

newestVersions.Add("dodo.version.version1")
ltsVersions.Add("dodo.version.version1")
dottedVersions.Add("dodo.version.version1")
oldestVersions.Add("dodo.version.version1")

CreateManagedType("dodo.AggregatorService", "DodoAggregatorService", "vmodl.ManagedObject", "dodo.version.version1", None, [("fetchServices", "FetchServices", "dodo.version.version1", (("serviceType", "string", "dodo.version.version1", F_OPTIONAL, None),), (F_OPTIONAL, "dodo.Service[]", "dodo.Service[]"), None, None), ("lookupService", "LookupService", "dodo.version.version1", (("serviceType", "string", "dodo.version.version1", 0, None),("context", "dodo.KeyValue[]", "dodo.version.version1", F_OPTIONAL, None),), (F_OPTIONAL, "dodo.Service", "dodo.Service"), None, None), ("InvokeMethod", "InvokeMethod", "dodo.version.version1", (("serviceId", "string", "dodo.version.version1", 0, None),("methodName", "string", "dodo.version.version1", 0, None),("param", "vmodl.KeyAnyValue[]", "dodo.version.version1", F_OPTIONAL, None),), (F_OPTIONAL, "anyType", "anyType"), None, None), ("RegisterService", "RegisterService", "dodo.version.version1", (("serviceSpec", "dodo.ServiceSpec", "dodo.version.version1", 0, None),), (0, "string", "string"), None, None), ("UnregisterService", "UnregisterService", "dodo.version.version1", (("serviceId", "string", "dodo.version.version1", 0, None),), (0, "void", "void"), None, None)])
CreateDataType("dodo.KeyValue", "DodoKeyValue", "vmodl.DynamicData", "dodo.version.version1", [("key", "string", "dodo.version.version1", 0), ("value", "string", "dodo.version.version1", 0)])
CreateManagedType("dodo.LeaseProvider", "DodoLeaseProvider", "vmodl.ManagedObject", "dodo.version.version1", None, [("powerOffVM", "DodoLeaseProvider_PowerOffVM", "dodo.version.version1", (("vm", "vim.VirtualMachine", "dodo.version.version1", 0, None),), (0, "void", "void"), None, None), ("moveIntoFolder", "DodoLeaseProvider_MoveIntoFolder", "dodo.version.version1", (("folder", "vim.Folder", "dodo.version.version1", 0, None),("vm", "vim.VirtualMachine", "dodo.version.version1", 0, None),), (0, "void", "void"), None, None), ("deleteVM", "DeleteVM", "dodo.version.version1", (("vm", "vim.VirtualMachine", "dodo.version.version1", 0, None),), (0, "void", "void"), None, None)])
CreateDataType("dodo.Service", "DodoService", "vmodl.DynamicData", "dodo.version.version1", [("serviceId", "string", "dodo.version.version1", 0), ("serviceType", "string", "dodo.version.version1", 0), ("context", "dodo.KeyValue[]", "dodo.version.version1", F_OPTIONAL), ("interfaceType", "string", "dodo.version.version1", 0)])
CreateManagedType("dodo.ServiceInstance", "DodoServiceInstance", "vmodl.ManagedObject", "dodo.version.version1", None, [("fetchVirtualDiskService", "FetchVirtualDiskService", "dodo.version.version1", (), (0, "dodo.VirtualDiskService", "dodo.VirtualDiskService"), None, None)])
CreateDataType("dodo.ServiceSpec", "DodoServiceSpec", "vmodl.DynamicData", "dodo.version.version1", [("serviceType", "string", "dodo.version.version1", 0), ("context", "dodo.KeyValue[]", "dodo.version.version1", F_OPTIONAL), ("host", "string", "dodo.version.version1", 0), ("port", "int", "dodo.version.version1", 0), ("namespace", "string", "dodo.version.version1", 0), ("passwd", "string", "dodo.version.version1", 0), ("moType", "string", "dodo.version.version1", 0), ("moid", "string", "dodo.version.version1", 0)])
CreateDataType("dodo.VirtualDisk", "DodoVirtualDisk", "vmodl.DynamicData", "dodo.version.version1", [("uuid", "string", "dodo.version.version1", 0), ("datastoreUuid", "string", "dodo.version.version1", 0), ("relativePath", "string", "dodo.version.version1", 0)])
CreateManagedType("dodo.VirtualDiskService", "DodoVirtualDiskService", "vmodl.ManagedObject", "dodo.version.version1", None, [("fetchVirtualDisks", "FetchVirtualDisks", "dodo.version.version1", (), (0, "dodo.VirtualDisk[]", "dodo.VirtualDisk[]"), None, None), ("moveVirtualDisk", "DodoVirtualDiskService_MoveVirtualDisk", "dodo.version.version1", (("uuid", "string", "dodo.version.version1", 0, None),("dstDatastoreUuid", "string", "dodo.version.version1", 0, None),("dstRelativePath", "string", "dodo.version.version1", 0, None),), (0, "void", "void"), None, None)])
CreateManagedType("dodo.VmConfigurationService", "DodoVmConfigurationService", "vmodl.ManagedObject", "dodo.version.version1", None, [("updateMemory", "UpdateMemory", "dodo.version.version1", (("vm", "vim.VirtualMachine", "dodo.version.version1", 0, None),("memoryMb", "long", "dodo.version.version1", 0, None),), (0, "void", "void"), None, None), ("updateNumCpu", "UpdateNumCpu", "dodo.version.version1", (("vm", "vim.VirtualMachine", "dodo.version.version1", 0, None),("numCpu", "int", "dodo.version.version1", 0, None),), (0, "void", "void"), None, None), ("updateMemoryResourceAllocation", "UpdateMemoryResourceAllocation", "dodo.version.version1", (("vm", "vim.VirtualMachine", "dodo.version.version1", 0, None),("memoryAllocation", "vim.ResourceAllocationInfo", "dodo.version.version1", 0, None),), (0, "void", "void"), None, None)])
CreateManagedType("dodo.VmInventory", "DodoVmInventory", "vmodl.ManagedObject", "dodo.version.version1", None, [("listVms", "ListVms", "dodo.version.version1", (), (F_OPTIONAL, "anyType[]", "anyType[]"), None, None), ("ScanForVms", "ScanForVms", "dodo.version.version1", (("host", "string", "dodo.version.version1", 0, None),), (0, "void", "void"), None, None), ("PurgeVms", "PurgeVms", "dodo.version.version1", (("timeNotSeen", "int", "dodo.version.version1", 0, None),), (0, "void", "void"), None, None), ("ResolveVm", "ResolveVm", "dodo.version.version1", (("vmuuid", "string", "dodo.version.version1", 0, None),), (0, "string", "string"), None, None)])
